
projeto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f3c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be8  0800a110  0800a110  0000b110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf8  0800acf8  0000c1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800acf8  0800acf8  0000bcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad00  0800ad00  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad00  0800ad00  0000bd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad04  0800ad04  0000bd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800ad08  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  200001f0  0800aef8  0000c1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  0800aef8  0000c864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7a2  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229c  00000000  00000000  0001a9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0001cc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bad  00000000  00000000  0001db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023419  00000000  00000000  0001e705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dc1  00000000  00000000  00041b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3885  00000000  00000000  000548df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005480  00000000  00000000  001281a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0012d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a0f4 	.word	0x0800a0f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800a0f4 	.word	0x0800a0f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	0000      	movs	r0, r0
	...

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b0a3      	sub	sp, #140	@ 0x8c
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f001 fd7f 	bl	8002bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 f931 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f000 fa1b 	bl	8001510 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010da:	f000 f99b 	bl	8001414 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010de:	f000 f9c7 	bl	8001470 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // Inicializa o display
 80010e2:	f001 faaf 	bl	8002644 <SSD1306_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ec:	4880      	ldr	r0, [pc, #512]	@ (80012f0 <main+0x228>)
 80010ee:	f002 f897 	bl	8003220 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80010f2:	2064      	movs	r0, #100	@ 0x64
 80010f4:	f001 fdde 	bl	8002cb4 <HAL_Delay>

//  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start(&htim1);
 80010f8:	487e      	ldr	r0, [pc, #504]	@ (80012f4 <main+0x22c>)
 80010fa:	f004 f9a1 	bl	8005440 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2140      	movs	r1, #64	@ 0x40
 8001102:	487b      	ldr	r0, [pc, #492]	@ (80012f0 <main+0x228>)
 8001104:	f002 f88c 	bl	8003220 <HAL_GPIO_WritePin>

  bmp280_init_default_params(&bmp280.params);
 8001108:	487b      	ldr	r0, [pc, #492]	@ (80012f8 <main+0x230>)
 800110a:	f000 fc6c 	bl	80019e6 <bmp280_init_default_params>
    bmp280.addr = BMP280_I2C_ADDRESS_0;
 800110e:	4b7b      	ldr	r3, [pc, #492]	@ (80012fc <main+0x234>)
 8001110:	2276      	movs	r2, #118	@ 0x76
 8001112:	849a      	strh	r2, [r3, #36]	@ 0x24
    bmp280.i2c = &hi2c1;
 8001114:	4b79      	ldr	r3, [pc, #484]	@ (80012fc <main+0x234>)
 8001116:	4a7a      	ldr	r2, [pc, #488]	@ (8001300 <main+0x238>)
 8001118:	629a      	str	r2, [r3, #40]	@ 0x28

    while (!bmp280_init(&bmp280, &bmp280.params)) {
 800111a:	bf00      	nop
 800111c:	4976      	ldr	r1, [pc, #472]	@ (80012f8 <main+0x230>)
 800111e:	4877      	ldr	r0, [pc, #476]	@ (80012fc <main+0x234>)
 8001120:	f000 fddb 	bl	8001cda <bmp280_init>
 8001124:	4603      	mov	r3, r0
 8001126:	f083 0301 	eor.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f5      	bne.n	800111c <main+0x54>
    }
    	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001130:	4b72      	ldr	r3, [pc, #456]	@ (80012fc <main+0x234>)
 8001132:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001136:	2b60      	cmp	r3, #96	@ 0x60
 8001138:	bf0c      	ite	eq
 800113a:	2301      	moveq	r3, #1
 800113c:	2300      	movne	r3, #0
 800113e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* USER CODE BEGIN WHILE */
    while (1)
    {

  	//HAL_Delay(1000);
  	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001142:	2201      	movs	r2, #1
 8001144:	2140      	movs	r1, #64	@ 0x40
 8001146:	486a      	ldr	r0, [pc, #424]	@ (80012f0 <main+0x228>)
 8001148:	f002 f86a 	bl	8003220 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800114c:	4b69      	ldr	r3, [pc, #420]	@ (80012f4 <main+0x22c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001154:	bf00      	nop
 8001156:	4b67      	ldr	r3, [pc, #412]	@ (80012f4 <main+0x22c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115c:	2b09      	cmp	r3, #9
 800115e:	d9fa      	bls.n	8001156 <main+0x8e>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001160:	2200      	movs	r2, #0
 8001162:	2140      	movs	r1, #64	@ 0x40
 8001164:	4862      	ldr	r0, [pc, #392]	@ (80012f0 <main+0x228>)
 8001166:	f002 f85b 	bl	8003220 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800116a:	f001 fd97 	bl	8002c9c <HAL_GetTick>
 800116e:	4603      	mov	r3, r0
 8001170:	4a64      	ldr	r2, [pc, #400]	@ (8001304 <main+0x23c>)
 8001172:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8001174:	bf00      	nop
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	485d      	ldr	r0, [pc, #372]	@ (80012f0 <main+0x228>)
 800117a:	f002 f839 	bl	80031f0 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d108      	bne.n	8001196 <main+0xce>
 8001184:	4b5f      	ldr	r3, [pc, #380]	@ (8001304 <main+0x23c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f103 040a 	add.w	r4, r3, #10
 800118c:	f001 fd86 	bl	8002c9c <HAL_GetTick>
 8001190:	4603      	mov	r3, r0
 8001192:	429c      	cmp	r4, r3
 8001194:	d8ef      	bhi.n	8001176 <main+0xae>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001196:	4b57      	ldr	r3, [pc, #348]	@ (80012f4 <main+0x22c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	4a5a      	ldr	r2, [pc, #360]	@ (8001308 <main+0x240>)
 800119e:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80011a0:	f001 fd7c 	bl	8002c9c <HAL_GetTick>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a57      	ldr	r2, [pc, #348]	@ (8001304 <main+0x23c>)
 80011a8:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80011aa:	bf00      	nop
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	4850      	ldr	r0, [pc, #320]	@ (80012f0 <main+0x228>)
 80011b0:	f002 f81e 	bl	80031f0 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <main+0x104>
 80011ba:	4b52      	ldr	r3, [pc, #328]	@ (8001304 <main+0x23c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80011c2:	f001 fd6b 	bl	8002c9c <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d8ef      	bhi.n	80011ac <main+0xe4>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80011cc:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <main+0x22c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d2:	4a4e      	ldr	r2, [pc, #312]	@ (800130c <main+0x244>)
 80011d4:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1)* 0.034/2;
 80011d6:	4b4d      	ldr	r3, [pc, #308]	@ (800130c <main+0x244>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b4b      	ldr	r3, [pc, #300]	@ (8001308 <main+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9af 	bl	8000544 <__aeabi_ui2d>
 80011e6:	a340      	add	r3, pc, #256	@ (adr r3, 80012e8 <main+0x220>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fa24 	bl	8000638 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001200:	f7ff fb44 	bl	800088c <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fcec 	bl	8000be8 <__aeabi_d2uiz>
 8001210:	4603      	mov	r3, r0
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b3e      	ldr	r3, [pc, #248]	@ (8001310 <main+0x248>)
 8001216:	801a      	strh	r2, [r3, #0]
  	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001218:	e003      	b.n	8001222 <main+0x15a>
  		HAL_Delay(2000);
 800121a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800121e:	f001 fd49 	bl	8002cb4 <HAL_Delay>
  	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001222:	4b3c      	ldr	r3, [pc, #240]	@ (8001314 <main+0x24c>)
 8001224:	4a3c      	ldr	r2, [pc, #240]	@ (8001318 <main+0x250>)
 8001226:	493d      	ldr	r1, [pc, #244]	@ (800131c <main+0x254>)
 8001228:	4834      	ldr	r0, [pc, #208]	@ (80012fc <main+0x234>)
 800122a:	f001 f9bf 	bl	80025ac <bmp280_read_float>
 800122e:	4603      	mov	r3, r0
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1ef      	bne.n	800121a <main+0x152>
  	}

  HAL_Delay(2000);
 800123a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800123e:	f001 fd39 	bl	8002cb4 <HAL_Delay>
  sprintf(strCopy,"Distancia: %d cm", Distance);
 8001242:	4b33      	ldr	r3, [pc, #204]	@ (8001310 <main+0x248>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4935      	ldr	r1, [pc, #212]	@ (8001320 <main+0x258>)
 800124a:	4836      	ldr	r0, [pc, #216]	@ (8001324 <main+0x25c>)
 800124c:	f005 fb18 	bl	8006880 <siprintf>

  char temperature_msg[64];
  sprintf(temperature_msg, "Temperatura: %f ºC",  temperature);
 8001250:	4b32      	ldr	r3, [pc, #200]	@ (800131c <main+0x254>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f997 	bl	8000588 <__aeabi_f2d>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	1d38      	adds	r0, r7, #4
 8001260:	4931      	ldr	r1, [pc, #196]	@ (8001328 <main+0x260>)
 8001262:	f005 fb0d 	bl	8006880 <siprintf>
  char pressure_msg[64];
  sprintf(pressure_msg, "Pressao: %f",  pressure);
 8001266:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <main+0x250>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f98c 	bl	8000588 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001278:	492c      	ldr	r1, [pc, #176]	@ (800132c <main+0x264>)
 800127a:	f005 fb01 	bl	8006880 <siprintf>

  SSD1306_Clear(); //Seta todos os pixels do buffer para branco
 800127e:	f001 fc04 	bl	8002a8a <SSD1306_Clear>
  SSD1306_GotoXY(2,0); //Posiciona o "cursor" no pixel correspondente
 8001282:	2100      	movs	r1, #0
 8001284:	2002      	movs	r0, #2
 8001286:	f001 fb47 	bl	8002918 <SSD1306_GotoXY>
  SSD1306_Puts(temperature_msg, &Font_7x10, 1); // Escreva a mensagem
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2201      	movs	r2, #1
 800128e:	4928      	ldr	r1, [pc, #160]	@ (8001330 <main+0x268>)
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fbd5 	bl	8002a40 <SSD1306_Puts>
  SSD1306_GotoXY(2, 16);
 8001296:	2110      	movs	r1, #16
 8001298:	2002      	movs	r0, #2
 800129a:	f001 fb3d 	bl	8002918 <SSD1306_GotoXY>
  SSD1306_Puts(pressure_msg, &Font_7x10, 1);
 800129e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012a2:	2201      	movs	r2, #1
 80012a4:	4922      	ldr	r1, [pc, #136]	@ (8001330 <main+0x268>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fbca 	bl	8002a40 <SSD1306_Puts>
  SSD1306_GotoXY(2, 26); // Defina a posição inicial
 80012ac:	211a      	movs	r1, #26
 80012ae:	2002      	movs	r0, #2
 80012b0:	f001 fb32 	bl	8002918 <SSD1306_GotoXY>
  SSD1306_Puts(strCopy, &Font_7x10, 1); // Escreva a mensagem
 80012b4:	2201      	movs	r2, #1
 80012b6:	491e      	ldr	r1, [pc, #120]	@ (8001330 <main+0x268>)
 80012b8:	481a      	ldr	r0, [pc, #104]	@ (8001324 <main+0x25c>)
 80012ba:	f001 fbc1 	bl	8002a40 <SSD1306_Puts>
  SSD1306_GotoXY(2, 36); // Defina a posição inicial
 80012be:	2124      	movs	r1, #36	@ 0x24
 80012c0:	2002      	movs	r0, #2
 80012c2:	f001 fb29 	bl	8002918 <SSD1306_GotoXY>
  SSD1306_Puts(standard_msg_led, &Font_7x10, 1); // Escreva a mensagem
 80012c6:	2201      	movs	r2, #1
 80012c8:	4919      	ldr	r1, [pc, #100]	@ (8001330 <main+0x268>)
 80012ca:	481a      	ldr	r0, [pc, #104]	@ (8001334 <main+0x26c>)
 80012cc:	f001 fbb8 	bl	8002a40 <SSD1306_Puts>
  SSD1306_GotoXY(2, 46); // Defina a posição inicial
 80012d0:	212e      	movs	r1, #46	@ 0x2e
 80012d2:	2002      	movs	r0, #2
 80012d4:	f001 fb20 	bl	8002918 <SSD1306_GotoXY>
  SSD1306_Puts(standard_msg_led, &Font_7x10, 1); // Escreva a mensagem
 80012d8:	2201      	movs	r2, #1
 80012da:	4915      	ldr	r1, [pc, #84]	@ (8001330 <main+0x268>)
 80012dc:	4815      	ldr	r0, [pc, #84]	@ (8001334 <main+0x26c>)
 80012de:	f001 fbaf 	bl	8002a40 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // Atualize o display
 80012e2:	f001 fa73 	bl	80027cc <SSD1306_UpdateScreen>
    {
 80012e6:	e72c      	b.n	8001142 <main+0x7a>
 80012e8:	b020c49c 	.word	0xb020c49c
 80012ec:	3fa16872 	.word	0x3fa16872
 80012f0:	40020000 	.word	0x40020000
 80012f4:	20000260 	.word	0x20000260
 80012f8:	200002d4 	.word	0x200002d4
 80012fc:	200002a8 	.word	0x200002a8
 8001300:	2000020c 	.word	0x2000020c
 8001304:	200002e8 	.word	0x200002e8
 8001308:	200002ec 	.word	0x200002ec
 800130c:	200002f0 	.word	0x200002f0
 8001310:	200002f4 	.word	0x200002f4
 8001314:	200002e4 	.word	0x200002e4
 8001318:	200002dc 	.word	0x200002dc
 800131c:	200002e0 	.word	0x200002e0
 8001320:	0800a110 	.word	0x0800a110
 8001324:	200002f8 	.word	0x200002f8
 8001328:	0800a124 	.word	0x0800a124
 800132c:	0800a138 	.word	0x0800a138
 8001330:	20000018 	.word	0x20000018
 8001334:	20000000 	.word	0x20000000

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	@ 0x50
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	2234      	movs	r2, #52	@ 0x34
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f005 fafd 	bl	8006946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <SystemClock_Config+0xd4>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	4a29      	ldr	r2, [pc, #164]	@ (800140c <SystemClock_Config+0xd4>)
 8001366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136a:	6413      	str	r3, [r2, #64]	@ 0x40
 800136c:	4b27      	ldr	r3, [pc, #156]	@ (800140c <SystemClock_Config+0xd4>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <SystemClock_Config+0xd8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001384:	4a22      	ldr	r2, [pc, #136]	@ (8001410 <SystemClock_Config+0xd8>)
 8001386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <SystemClock_Config+0xd8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a0:	2310      	movs	r3, #16
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a4:	2302      	movs	r3, #2
 80013a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a8:	2300      	movs	r3, #0
 80013aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013ac:	2310      	movs	r3, #16
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013b6:	2304      	movs	r3, #4
 80013b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013be:	2302      	movs	r3, #2
 80013c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 fd4c 	bl	8004e64 <HAL_RCC_OscConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013d2:	f000 f93f 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d6:	230f      	movs	r3, #15
 80013d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013da:	2302      	movs	r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	2102      	movs	r1, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fa00 	bl	80047f8 <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013fe:	f000 f929 	bl	8001654 <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3750      	adds	r7, #80	@ 0x50
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40007000 	.word	0x40007000

08001414 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_I2C1_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <MX_I2C1_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <MX_I2C1_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001452:	f001 feff 	bl	8003254 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 f8fa 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000020c 	.word	0x2000020c
 8001468:	40005400 	.word	0x40005400
 800146c:	00061a80 	.word	0x00061a80

08001470 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800148c:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <MX_TIM1_Init+0x98>)
 800148e:	4a1f      	ldr	r2, [pc, #124]	@ (800150c <MX_TIM1_Init+0x9c>)
 8001490:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001492:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <MX_TIM1_Init+0x98>)
 8001494:	2253      	movs	r2, #83	@ 0x53
 8001496:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <MX_TIM1_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800149e:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_TIM1_Init+0x98>)
 80014a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a6:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <MX_TIM1_Init+0x98>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <MX_TIM1_Init+0x98>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <MX_TIM1_Init+0x98>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b8:	4813      	ldr	r0, [pc, #76]	@ (8001508 <MX_TIM1_Init+0x98>)
 80014ba:	f003 ff71 	bl	80053a0 <HAL_TIM_Base_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014c4:	f000 f8c6 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4619      	mov	r1, r3
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <MX_TIM1_Init+0x98>)
 80014d6:	f004 f81b 	bl	8005510 <HAL_TIM_ConfigClockSource>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014e0:	f000 f8b8 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_TIM1_Init+0x98>)
 80014f2:	f004 fa1b 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014fc:	f000 f8aa 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000260 	.word	0x20000260
 800150c:	40010000 	.word	0x40010000

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b46      	ldr	r3, [pc, #280]	@ (8001644 <MX_GPIO_Init+0x134>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a45      	ldr	r2, [pc, #276]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b43      	ldr	r3, [pc, #268]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a3e      	ldr	r2, [pc, #248]	@ (8001644 <MX_GPIO_Init+0x134>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b3c      	ldr	r3, [pc, #240]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b38      	ldr	r3, [pc, #224]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a37      	ldr	r2, [pc, #220]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a30      	ldr	r2, [pc, #192]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <MX_GPIO_Init+0x134>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800159c:	482a      	ldr	r0, [pc, #168]	@ (8001648 <MX_GPIO_Init+0x138>)
 800159e:	f001 fe3f 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2101      	movs	r1, #1
 80015a6:	4829      	ldr	r0, [pc, #164]	@ (800164c <MX_GPIO_Init+0x13c>)
 80015a8:	f001 fe3a 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4823      	ldr	r0, [pc, #140]	@ (8001650 <MX_GPIO_Init+0x140>)
 80015c4:	f001 fc80 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c8:	230c      	movs	r3, #12
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d8:	2307      	movs	r3, #7
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4819      	ldr	r0, [pc, #100]	@ (8001648 <MX_GPIO_Init+0x138>)
 80015e4:	f001 fc70 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_8;
 80015e8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4811      	ldr	r0, [pc, #68]	@ (8001648 <MX_GPIO_Init+0x138>)
 8001602:	f001 fc61 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001606:	2380      	movs	r3, #128	@ 0x80
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	480b      	ldr	r0, [pc, #44]	@ (8001648 <MX_GPIO_Init+0x138>)
 800161a:	f001 fc55 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800161e:	2301      	movs	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_GPIO_Init+0x13c>)
 8001636:	f001 fc47 	bl	8002ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <Error_Handler+0x8>

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4a0f      	ldr	r2, [pc, #60]	@ (80016ac <HAL_MspInit+0x4c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001674:	6453      	str	r3, [r2, #68]	@ 0x44
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <HAL_MspInit+0x4c>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800169e:	2007      	movs	r0, #7
 80016a0:	f001 fbde 	bl	8002e60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <HAL_I2C_MspInit+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12c      	bne.n	800172c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f4:	2312      	movs	r3, #18
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001700:	2304      	movs	r3, #4
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	480c      	ldr	r0, [pc, #48]	@ (800173c <HAL_I2C_MspInit+0x8c>)
 800170c:	f001 fbdc 	bl	8002ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 800171a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40005400 	.word	0x40005400
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <HAL_TIM_Base_MspInit+0x3c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d10d      	bne.n	800176e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_TIM_Base_MspInit+0x40>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <HAL_TIM_Base_MspInit+0x40>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6453      	str	r3, [r2, #68]	@ 0x44
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <HAL_TIM_Base_MspInit+0x40>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40010000 	.word	0x40010000
 8001780:	40023800 	.word	0x40023800

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <NMI_Handler+0x4>

0800178c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <MemManage_Handler+0x4>

0800179c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <UsageFault_Handler+0x4>

080017ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017da:	f001 fa4b 	bl	8002c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  return 1;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_kill>:

int _kill(int pid, int sig)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017fc:	f005 f8f6 	bl	80069ec <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	2216      	movs	r2, #22
 8001804:	601a      	str	r2, [r3, #0]
  return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_exit>:

void _exit (int status)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800181a:	f04f 31ff 	mov.w	r1, #4294967295
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffe7 	bl	80017f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <_exit+0x12>

08001828 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e00a      	b.n	8001850 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800183a:	f3af 8000 	nop.w
 800183e:	4601      	mov	r1, r0
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf0      	blt.n	800183a <_read+0x12>
  }

  return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e009      	b.n	8001888 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbf1      	blt.n	8001874 <_write+0x12>
  }
  return len;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_close>:

int _close(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c2:	605a      	str	r2, [r3, #4]
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_isatty>:

int _isatty(int file)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	@ (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f005 f85a 	bl	80069ec <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20020000 	.word	0x20020000
 8001964:	00000400 	.word	0x00000400
 8001968:	20000308 	.word	0x20000308
 800196c:	20000868 	.word	0x20000868

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001998:	f7ff ffea 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f005 f819 	bl	80069f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7ff fb7f 	bl	80010c8 <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80019d8:	0800ad08 	.word	0x0800ad08
  ldr r2, =_sbss
 80019dc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80019e0:	20000864 	.word	0x20000864

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>

080019e6 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2203      	movs	r2, #3
 80019f2:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2203      	movs	r2, #3
 80019fe:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2203      	movs	r2, #3
 8001a04:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	715a      	strb	r2, [r3, #5]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b08a      	sub	sp, #40	@ 0x28
 8001a22:	af04      	add	r7, sp, #16
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	460b      	mov	r3, r1
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	8af9      	ldrh	r1, [r7, #22]
 8001a3e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2302      	movs	r3, #2
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f001 ff3c 	bl	80038cc <HAL_I2C_Mem_Read>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10b      	bne.n	8001a72 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001a5a:	7d7b      	ldrb	r3, [r7, #21]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	7d3b      	ldrb	r3, [r7, #20]
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	801a      	strh	r2, [r3, #0]
		return true;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <read_register16+0x56>
	} else
		return false;
 8001a72:	2300      	movs	r3, #0

}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b08b      	sub	sp, #44	@ 0x2c
 8001a80:	af04      	add	r7, sp, #16
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	461a      	mov	r2, r3
 8001a88:	460b      	mov	r3, r1
 8001a8a:	72fb      	strb	r3, [r7, #11]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	7abb      	ldrb	r3, [r7, #10]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	8af9      	ldrh	r1, [r7, #22]
 8001aa6:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001aaa:	9402      	str	r4, [sp, #8]
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f001 ff0a 	bl	80038cc <HAL_I2C_Mem_Read>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <read_data+0x46>
		return 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <read_data+0x48>
	else
		return 1;
 8001ac2:	2301      	movs	r3, #1

}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}

08001acc <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2188      	movs	r1, #136	@ 0x88
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff9f 	bl	8001a1e <read_register16>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d06f      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	461a      	mov	r2, r3
 8001aec:	218a      	movs	r1, #138	@ 0x8a
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff95 	bl	8001a1e <read_register16>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d065      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	461a      	mov	r2, r3
 8001b00:	218c      	movs	r1, #140	@ 0x8c
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ff8b 	bl	8001a1e <read_register16>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d05b      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3306      	adds	r3, #6
 8001b12:	461a      	mov	r2, r3
 8001b14:	218e      	movs	r1, #142	@ 0x8e
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff81 	bl	8001a1e <read_register16>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d051      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3308      	adds	r3, #8
 8001b26:	461a      	mov	r2, r3
 8001b28:	2190      	movs	r1, #144	@ 0x90
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ff77 	bl	8001a1e <read_register16>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d047      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	330a      	adds	r3, #10
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2192      	movs	r1, #146	@ 0x92
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff6d 	bl	8001a1e <read_register16>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d03d      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2194      	movs	r1, #148	@ 0x94
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff63 	bl	8001a1e <read_register16>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d033      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	330e      	adds	r3, #14
 8001b62:	461a      	mov	r2, r3
 8001b64:	2196      	movs	r1, #150	@ 0x96
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ff59 	bl	8001a1e <read_register16>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d029      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3310      	adds	r3, #16
 8001b76:	461a      	mov	r2, r3
 8001b78:	2198      	movs	r1, #152	@ 0x98
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff4f 	bl	8001a1e <read_register16>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01f      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3312      	adds	r3, #18
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	219a      	movs	r1, #154	@ 0x9a
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff45 	bl	8001a1e <read_register16>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d015      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3314      	adds	r3, #20
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	219c      	movs	r1, #156	@ 0x9c
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ff3b 	bl	8001a1e <read_register16>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	219e      	movs	r1, #158	@ 0x9e
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff31 	bl	8001a1e <read_register16>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <read_calibration_data+0xfa>

		return true;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <read_calibration_data+0xfc>
	}

	return false;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f103 0218 	add.w	r2, r3, #24
 8001bde:	2301      	movs	r3, #1
 8001be0:	21a1      	movs	r1, #161	@ 0xa1
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff4a 	bl	8001a7c <read_data>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d14b      	bne.n	8001c86 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	331a      	adds	r3, #26
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	21e1      	movs	r1, #225	@ 0xe1
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff11 	bl	8001a1e <read_register16>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d041      	beq.n	8001c86 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f103 021c 	add.w	r2, r3, #28
 8001c08:	2301      	movs	r3, #1
 8001c0a:	21e3      	movs	r1, #227	@ 0xe3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff35 	bl	8001a7c <read_data>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d136      	bne.n	8001c86 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001c18:	f107 030e 	add.w	r3, r7, #14
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	21e4      	movs	r1, #228	@ 0xe4
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff fefc 	bl	8001a1e <read_register16>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d02c      	beq.n	8001c86 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	461a      	mov	r2, r3
 8001c32:	21e5      	movs	r1, #229	@ 0xe5
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fef2 	bl	8001a1e <read_register16>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d022      	beq.n	8001c86 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001c46:	2301      	movs	r3, #1
 8001c48:	21e7      	movs	r1, #231	@ 0xe7
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff16 	bl	8001a7c <read_data>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d117      	bne.n	8001c86 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001c56:	89fb      	ldrh	r3, [r7, #14]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	89fb      	ldrh	r3, [r7, #14]
 8001c64:	121b      	asrs	r3, r3, #8
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001c76:	89bb      	ldrh	r3, [r7, #12]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	841a      	strh	r2, [r3, #32]

		return true;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af04      	add	r7, sp, #16
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	89f9      	ldrh	r1, [r7, #14]
 8001cb2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	1cbb      	adds	r3, r7, #2
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f001 fd09 	bl	80036d8 <HAL_I2C_Mem_Write>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <write_register8+0x40>
		return false;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <write_register8+0x42>
	else
		return true;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001ce8:	2b76      	cmp	r3, #118	@ 0x76
 8001cea:	d005      	beq.n	8001cf8 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001cf0:	2b77      	cmp	r3, #119	@ 0x77
 8001cf2:	d001      	beq.n	8001cf8 <bmp280_init+0x1e>

		return false;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e099      	b.n	8001e2c <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001cfe:	2301      	movs	r3, #1
 8001d00:	21d0      	movs	r1, #208	@ 0xd0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff feba 	bl	8001a7c <read_data>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <bmp280_init+0x38>
		return false;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e08c      	b.n	8001e2c <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001d18:	2b58      	cmp	r3, #88	@ 0x58
 8001d1a:	d006      	beq.n	8001d2a <bmp280_init+0x50>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001d22:	2b60      	cmp	r3, #96	@ 0x60
 8001d24:	d001      	beq.n	8001d2a <bmp280_init+0x50>

		return false;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e080      	b.n	8001e2c <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001d2a:	22b6      	movs	r2, #182	@ 0xb6
 8001d2c:	21e0      	movs	r1, #224	@ 0xe0
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffae 	bl	8001c90 <write_register8>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <bmp280_init+0x64>
		return false;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e076      	b.n	8001e2c <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	2301      	movs	r3, #1
 8001d44:	21f3      	movs	r1, #243	@ 0xf3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fe98 	bl	8001a7c <read_data>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f5      	bne.n	8001d3e <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001d52:	7b3b      	ldrb	r3, [r7, #12]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff feb5 	bl	8001acc <read_calibration_data>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d100      	bne.n	8001d70 <bmp280_init+0x96>
 8001d6e:	e001      	b.n	8001d74 <bmp280_init+0x9a>
		return false;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e05b      	b.n	8001e2c <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001d7a:	2b60      	cmp	r3, #96	@ 0x60
 8001d7c:	d10a      	bne.n	8001d94 <bmp280_init+0xba>
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ff26 	bl	8001bd0 <read_hum_calibration_data>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f083 0301 	eor.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <bmp280_init+0xba>
		return false;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e04b      	b.n	8001e2c <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	795b      	ldrb	r3, [r3, #5]
 8001d98:	015b      	lsls	r3, r3, #5
 8001d9a:	b25a      	sxtb	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	461a      	mov	r2, r3
 8001dae:	21f5      	movs	r1, #245	@ 0xf5
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff6d 	bl	8001c90 <write_register8>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <bmp280_init+0xe6>
		return false;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e035      	b.n	8001e2c <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d102      	bne.n	8001dce <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	78db      	ldrb	r3, [r3, #3]
 8001dd2:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001dd4:	b25a      	sxtb	r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	789b      	ldrb	r3, [r3, #2]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b25a      	sxtb	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001dec:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001df4:	2b60      	cmp	r3, #96	@ 0x60
 8001df6:	d10d      	bne.n	8001e14 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	791b      	ldrb	r3, [r3, #4]
 8001dfc:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001dfe:	7b7b      	ldrb	r3, [r7, #13]
 8001e00:	461a      	mov	r2, r3
 8001e02:	21f2      	movs	r1, #242	@ 0xf2
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff43 	bl	8001c90 <write_register8>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <bmp280_init+0x13a>
			return false;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e00b      	b.n	8001e2c <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	461a      	mov	r2, r3
 8001e18:	21f4      	movs	r1, #244	@ 0xf4
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff38 	bl	8001c90 <write_register8>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <bmp280_init+0x150>
		return false;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <bmp280_init+0x152>
	}

	return true;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	10da      	asrs	r2, r3, #3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001e56:	12db      	asrs	r3, r3, #11
 8001e58:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	111b      	asrs	r3, r3, #4
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	8812      	ldrh	r2, [r2, #0]
 8001e62:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	1112      	asrs	r2, r2, #4
 8001e68:	68f9      	ldr	r1, [r7, #12]
 8001e6a:	8809      	ldrh	r1, [r1, #0]
 8001e6c:	1a52      	subs	r2, r2, r1
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001e7e:	139b      	asrs	r3, r3, #14
 8001e80:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	441a      	add	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	3380      	adds	r3, #128	@ 0x80
 8001e98:	121b      	asrs	r3, r3, #8
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001ea6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eaa:	b0cc      	sub	sp, #304	@ 0x130
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001eb2:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001eb6:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ebe:	17da      	asrs	r2, r3, #31
 8001ec0:	461c      	mov	r4, r3
 8001ec2:	4615      	mov	r5, r2
 8001ec4:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001ec8:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001ecc:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001ed0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ed8:	fb03 f102 	mul.w	r1, r3, r2
 8001edc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001ee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ee4:	fb02 f303 	mul.w	r3, r2, r3
 8001ee8:	18ca      	adds	r2, r1, r3
 8001eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001eee:	fba3 8903 	umull	r8, r9, r3, r3
 8001ef2:	eb02 0309 	add.w	r3, r2, r9
 8001ef6:	4699      	mov	r9, r3
 8001ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001efc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	17da      	asrs	r2, r3, #31
 8001f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f0c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001f10:	4603      	mov	r3, r0
 8001f12:	fb03 f209 	mul.w	r2, r3, r9
 8001f16:	460b      	mov	r3, r1
 8001f18:	fb08 f303 	mul.w	r3, r8, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4602      	mov	r2, r0
 8001f20:	fba8 1202 	umull	r1, r2, r8, r2
 8001f24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001f28:	460a      	mov	r2, r1
 8001f2a:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001f2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001f32:	4413      	add	r3, r2
 8001f34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001f38:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001f3c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001f40:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f48:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	17da      	asrs	r2, r3, #31
 8001f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f54:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f5c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001f60:	462a      	mov	r2, r5
 8001f62:	fb02 f203 	mul.w	r2, r2, r3
 8001f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	441a      	add	r2, r3
 8001f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f76:	4621      	mov	r1, r4
 8001f78:	fba3 1301 	umull	r1, r3, r3, r1
 8001f7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f80:	460b      	mov	r3, r1
 8001f82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001f8a:	18d3      	adds	r3, r2, r3
 8001f8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f90:	f04f 0000 	mov.w	r0, #0
 8001f94:	f04f 0100 	mov.w	r1, #0
 8001f98:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	0459      	lsls	r1, r3, #17
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	0458      	lsls	r0, r3, #17
 8001faa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001fae:	1814      	adds	r4, r2, r0
 8001fb0:	643c      	str	r4, [r7, #64]	@ 0x40
 8001fb2:	414b      	adcs	r3, r1
 8001fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fb6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001fba:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001fc2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	17da      	asrs	r2, r3, #31
 8001fca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fce:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fde:	00d9      	lsls	r1, r3, #3
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001fe6:	1814      	adds	r4, r2, r0
 8001fe8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001fea:	414b      	adcs	r3, r1
 8001fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fee:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ff2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001ff6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001ffa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ffe:	fb03 f102 	mul.w	r1, r3, r2
 8002002:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002006:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	18ca      	adds	r2, r1, r3
 8002010:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002014:	fba3 1303 	umull	r1, r3, r3, r3
 8002018:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800201c:	460b      	mov	r3, r1
 800201e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002026:	18d3      	adds	r3, r2, r3
 8002028:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800202c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002030:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002034:	b21b      	sxth	r3, r3
 8002036:	17da      	asrs	r2, r3, #31
 8002038:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800203c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002040:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8002044:	462b      	mov	r3, r5
 8002046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800204a:	4642      	mov	r2, r8
 800204c:	fb02 f203 	mul.w	r2, r2, r3
 8002050:	464b      	mov	r3, r9
 8002052:	4621      	mov	r1, r4
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	4622      	mov	r2, r4
 800205c:	4641      	mov	r1, r8
 800205e:	fba2 1201 	umull	r1, r2, r2, r1
 8002062:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002066:	460a      	mov	r2, r1
 8002068:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800206c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002070:	4413      	add	r3, r2
 8002072:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002076:	f04f 0000 	mov.w	r0, #0
 800207a:	f04f 0100 	mov.w	r1, #0
 800207e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002082:	4623      	mov	r3, r4
 8002084:	0a18      	lsrs	r0, r3, #8
 8002086:	462b      	mov	r3, r5
 8002088:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800208c:	462b      	mov	r3, r5
 800208e:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8002090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002094:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002098:	b21b      	sxth	r3, r3
 800209a:	17da      	asrs	r2, r3, #31
 800209c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020a0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80020a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020a8:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80020ac:	464a      	mov	r2, r9
 80020ae:	fb02 f203 	mul.w	r2, r2, r3
 80020b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020b6:	4644      	mov	r4, r8
 80020b8:	fb04 f303 	mul.w	r3, r4, r3
 80020bc:	441a      	add	r2, r3
 80020be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020c2:	4644      	mov	r4, r8
 80020c4:	fba3 4304 	umull	r4, r3, r3, r4
 80020c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80020cc:	4623      	mov	r3, r4
 80020ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80020d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80020d6:	18d3      	adds	r3, r2, r3
 80020d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80020e8:	464c      	mov	r4, r9
 80020ea:	0323      	lsls	r3, r4, #12
 80020ec:	4644      	mov	r4, r8
 80020ee:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80020f2:	4644      	mov	r4, r8
 80020f4:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80020f6:	1884      	adds	r4, r0, r2
 80020f8:	633c      	str	r4, [r7, #48]	@ 0x30
 80020fa:	eb41 0303 	adc.w	r3, r1, r3
 80020fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002100:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002104:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002108:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800210c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8002110:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8002114:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800211c:	88db      	ldrh	r3, [r3, #6]
 800211e:	b29b      	uxth	r3, r3
 8002120:	2200      	movs	r2, #0
 8002122:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002126:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800212a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800212e:	462b      	mov	r3, r5
 8002130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002134:	4642      	mov	r2, r8
 8002136:	fb02 f203 	mul.w	r2, r2, r3
 800213a:	464b      	mov	r3, r9
 800213c:	4621      	mov	r1, r4
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	4622      	mov	r2, r4
 8002146:	4641      	mov	r1, r8
 8002148:	fba2 1201 	umull	r1, r2, r2, r1
 800214c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8002150:	460a      	mov	r2, r1
 8002152:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8002156:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800215a:	4413      	add	r3, r2
 800215c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800216c:	4629      	mov	r1, r5
 800216e:	104a      	asrs	r2, r1, #1
 8002170:	4629      	mov	r1, r5
 8002172:	17cb      	asrs	r3, r1, #31
 8002174:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8002178:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800217c:	4313      	orrs	r3, r2
 800217e:	d101      	bne.n	8002184 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8002180:	2300      	movs	r3, #0
 8002182:	e148      	b.n	8002416 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8002184:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002188:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800218c:	17da      	asrs	r2, r3, #31
 800218e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002190:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002192:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002196:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800219a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800219e:	105b      	asrs	r3, r3, #1
 80021a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80021a8:	07db      	lsls	r3, r3, #31
 80021aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021ae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80021b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80021b6:	4621      	mov	r1, r4
 80021b8:	1a89      	subs	r1, r1, r2
 80021ba:	67b9      	str	r1, [r7, #120]	@ 0x78
 80021bc:	4629      	mov	r1, r5
 80021be:	eb61 0303 	sbc.w	r3, r1, r3
 80021c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80021c4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80021c8:	4622      	mov	r2, r4
 80021ca:	462b      	mov	r3, r5
 80021cc:	1891      	adds	r1, r2, r2
 80021ce:	6239      	str	r1, [r7, #32]
 80021d0:	415b      	adcs	r3, r3
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021d8:	4621      	mov	r1, r4
 80021da:	1851      	adds	r1, r2, r1
 80021dc:	61b9      	str	r1, [r7, #24]
 80021de:	4629      	mov	r1, r5
 80021e0:	414b      	adcs	r3, r1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80021f0:	4649      	mov	r1, r9
 80021f2:	018b      	lsls	r3, r1, #6
 80021f4:	4641      	mov	r1, r8
 80021f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021fa:	4641      	mov	r1, r8
 80021fc:	018a      	lsls	r2, r1, #6
 80021fe:	4641      	mov	r1, r8
 8002200:	1889      	adds	r1, r1, r2
 8002202:	6139      	str	r1, [r7, #16]
 8002204:	4649      	mov	r1, r9
 8002206:	eb43 0101 	adc.w	r1, r3, r1
 800220a:	6179      	str	r1, [r7, #20]
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002218:	4649      	mov	r1, r9
 800221a:	008b      	lsls	r3, r1, #2
 800221c:	4641      	mov	r1, r8
 800221e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002222:	4641      	mov	r1, r8
 8002224:	008a      	lsls	r2, r1, #2
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	4603      	mov	r3, r0
 800222c:	4622      	mov	r2, r4
 800222e:	189b      	adds	r3, r3, r2
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	460b      	mov	r3, r1
 8002234:	462a      	mov	r2, r5
 8002236:	eb42 0303 	adc.w	r3, r2, r3
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002248:	4649      	mov	r1, r9
 800224a:	008b      	lsls	r3, r1, #2
 800224c:	4641      	mov	r1, r8
 800224e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002252:	4641      	mov	r1, r8
 8002254:	008a      	lsls	r2, r1, #2
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	4603      	mov	r3, r0
 800225c:	4622      	mov	r2, r4
 800225e:	189b      	adds	r3, r3, r2
 8002260:	673b      	str	r3, [r7, #112]	@ 0x70
 8002262:	462b      	mov	r3, r5
 8002264:	460a      	mov	r2, r1
 8002266:	eb42 0303 	adc.w	r3, r2, r3
 800226a:	677b      	str	r3, [r7, #116]	@ 0x74
 800226c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002270:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002274:	f7fe fd28 	bl	8000cc8 <__aeabi_ldivmod>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002284:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002288:	b21b      	sxth	r3, r3
 800228a:	17da      	asrs	r2, r3, #31
 800228c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800228e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002290:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002294:	f04f 0000 	mov.w	r0, #0
 8002298:	f04f 0100 	mov.w	r1, #0
 800229c:	0b50      	lsrs	r0, r2, #13
 800229e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80022a2:	1359      	asrs	r1, r3, #13
 80022a4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80022a8:	462b      	mov	r3, r5
 80022aa:	fb00 f203 	mul.w	r2, r0, r3
 80022ae:	4623      	mov	r3, r4
 80022b0:	fb03 f301 	mul.w	r3, r3, r1
 80022b4:	4413      	add	r3, r2
 80022b6:	4622      	mov	r2, r4
 80022b8:	fba2 1200 	umull	r1, r2, r2, r0
 80022bc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80022c0:	460a      	mov	r2, r1
 80022c2:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80022c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80022ca:	4413      	add	r3, r2
 80022cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80022d0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80022d4:	f04f 0000 	mov.w	r0, #0
 80022d8:	f04f 0100 	mov.w	r1, #0
 80022dc:	0b50      	lsrs	r0, r2, #13
 80022de:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80022e2:	1359      	asrs	r1, r3, #13
 80022e4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80022e8:	462b      	mov	r3, r5
 80022ea:	fb00 f203 	mul.w	r2, r0, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	fb03 f301 	mul.w	r3, r3, r1
 80022f4:	4413      	add	r3, r2
 80022f6:	4622      	mov	r2, r4
 80022f8:	fba2 1200 	umull	r1, r2, r2, r0
 80022fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002300:	460a      	mov	r2, r1
 8002302:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8002306:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800230a:	4413      	add	r3, r2
 800230c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800231c:	4621      	mov	r1, r4
 800231e:	0e4a      	lsrs	r2, r1, #25
 8002320:	4629      	mov	r1, r5
 8002322:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002326:	4629      	mov	r1, r5
 8002328:	164b      	asrs	r3, r1, #25
 800232a:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800232e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002332:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002336:	b21b      	sxth	r3, r3
 8002338:	17da      	asrs	r2, r3, #31
 800233a:	663b      	str	r3, [r7, #96]	@ 0x60
 800233c:	667a      	str	r2, [r7, #100]	@ 0x64
 800233e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002342:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002346:	462a      	mov	r2, r5
 8002348:	fb02 f203 	mul.w	r2, r2, r3
 800234c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002350:	4621      	mov	r1, r4
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800235c:	4621      	mov	r1, r4
 800235e:	fba2 1201 	umull	r1, r2, r2, r1
 8002362:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002366:	460a      	mov	r2, r1
 8002368:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800236c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002370:	4413      	add	r3, r2
 8002372:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002382:	4621      	mov	r1, r4
 8002384:	0cca      	lsrs	r2, r1, #19
 8002386:	4629      	mov	r1, r5
 8002388:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800238c:	4629      	mov	r1, r5
 800238e:	14cb      	asrs	r3, r1, #19
 8002390:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002394:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8002398:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800239c:	1884      	adds	r4, r0, r2
 800239e:	65bc      	str	r4, [r7, #88]	@ 0x58
 80023a0:	eb41 0303 	adc.w	r3, r1, r3
 80023a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023a6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80023aa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80023ae:	4621      	mov	r1, r4
 80023b0:	1889      	adds	r1, r1, r2
 80023b2:	6539      	str	r1, [r7, #80]	@ 0x50
 80023b4:	4629      	mov	r1, r5
 80023b6:	eb43 0101 	adc.w	r1, r3, r1
 80023ba:	6579      	str	r1, [r7, #84]	@ 0x54
 80023bc:	f04f 0000 	mov.w	r0, #0
 80023c0:	f04f 0100 	mov.w	r1, #0
 80023c4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80023c8:	4623      	mov	r3, r4
 80023ca:	0a18      	lsrs	r0, r3, #8
 80023cc:	462b      	mov	r3, r5
 80023ce:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80023d2:	462b      	mov	r3, r5
 80023d4:	1219      	asrs	r1, r3, #8
 80023d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80023de:	b21b      	sxth	r3, r3
 80023e0:	17da      	asrs	r2, r3, #31
 80023e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80023f2:	464c      	mov	r4, r9
 80023f4:	0123      	lsls	r3, r4, #4
 80023f6:	4644      	mov	r4, r8
 80023f8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80023fc:	4644      	mov	r4, r8
 80023fe:	0122      	lsls	r2, r4, #4
 8002400:	1884      	adds	r4, r0, r2
 8002402:	603c      	str	r4, [r7, #0]
 8002404:	eb41 0303 	adc.w	r3, r1, r3
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800240e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8002412:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8002416:	4618      	mov	r0, r3
 8002418:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800241c:	46bd      	mov	sp, r7
 800241e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002422 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002422:	b480      	push	{r7}
 8002424:	b087      	sub	sp, #28
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002434:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	039a      	lsls	r2, r3, #14
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002440:	051b      	lsls	r3, r3, #20
 8002442:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800244a:	4619      	mov	r1, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002458:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8002460:	4611      	mov	r1, r2
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	fb01 f202 	mul.w	r2, r1, r2
 8002468:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800246a:	68f9      	ldr	r1, [r7, #12]
 800246c:	7f09      	ldrb	r1, [r1, #28]
 800246e:	4608      	mov	r0, r1
 8002470:	6979      	ldr	r1, [r7, #20]
 8002472:	fb00 f101 	mul.w	r1, r0, r1
 8002476:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002478:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800247c:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002480:	1292      	asrs	r2, r2, #10
 8002482:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800248c:	fb01 f202 	mul.w	r2, r1, r2
 8002490:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002494:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	13db      	asrs	r3, r3, #15
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	13d2      	asrs	r2, r2, #15
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	7e12      	ldrb	r2, [r2, #24]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80024c0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80024c8:	bfa8      	it	ge
 80024ca:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80024ce:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	131b      	asrs	r3, r3, #12
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	@ 0x30
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80024f4:	2b60      	cmp	r3, #96	@ 0x60
 80024f6:	d007      	beq.n	8002508 <bmp280_read_fixed+0x28>
		if (humidity)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002504:	2300      	movs	r3, #0
 8002506:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <bmp280_read_fixed+0x32>
 800250e:	2308      	movs	r3, #8
 8002510:	e000      	b.n	8002514 <bmp280_read_fixed+0x34>
 8002512:	2306      	movs	r3, #6
 8002514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f107 0218 	add.w	r2, r7, #24
 800251e:	21f7      	movs	r1, #247	@ 0xf7
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7ff faab 	bl	8001a7c <read_data>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <bmp280_read_fixed+0x50>
		return false;
 800252c:	2300      	movs	r3, #0
 800252e:	e038      	b.n	80025a2 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002530:	7e3b      	ldrb	r3, [r7, #24]
 8002532:	031a      	lsls	r2, r3, #12
 8002534:	7e7b      	ldrb	r3, [r7, #25]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4313      	orrs	r3, r2
 800253a:	7eba      	ldrb	r2, [r7, #26]
 800253c:	0912      	lsrs	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	4313      	orrs	r3, r2
 8002542:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002544:	7efb      	ldrb	r3, [r7, #27]
 8002546:	031a      	lsls	r2, r3, #12
 8002548:	7f3b      	ldrb	r3, [r7, #28]
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4313      	orrs	r3, r2
 800254e:	7f7a      	ldrb	r2, [r7, #29]
 8002550:	0912      	lsrs	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	4313      	orrs	r3, r2
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	461a      	mov	r2, r3
 800255e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7ff fc67 	bl	8001e34 <compensate_temperature>
 8002566:	4602      	mov	r2, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	461a      	mov	r2, r3
 8002570:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fc97 	bl	8001ea6 <compensate_pressure>
 8002578:	4602      	mov	r2, r0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00d      	beq.n	80025a0 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002584:	7fbb      	ldrb	r3, [r7, #30]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	7ffa      	ldrb	r2, [r7, #31]
 800258a:	4313      	orrs	r3, r2
 800258c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	461a      	mov	r2, r3
 8002592:	6a39      	ldr	r1, [r7, #32]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff ff44 	bl	8002422 <compensate_humidity>
 800259a:	4602      	mov	r2, r0
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	601a      	str	r2, [r3, #0]
	}

	return true;
 80025a0:	2301      	movs	r3, #1
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3730      	adds	r7, #48	@ 0x30
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <bmp280_read_float+0x1a>
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	e000      	b.n	80025c8 <bmp280_read_float+0x1c>
 80025c6:	2300      	movs	r3, #0
 80025c8:	f107 0218 	add.w	r2, r7, #24
 80025cc:	f107 011c 	add.w	r1, r7, #28
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff ff85 	bl	80024e0 <bmp280_read_fixed>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d028      	beq.n	800262e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e6:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002638 <bmp280_read_float+0x8c>
 80025ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fe:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800263c <bmp280_read_float+0x90>
 8002602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800261c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002640 <bmp280_read_float+0x94>
 8002620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <bmp280_read_float+0x84>
	}

	return false;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	42c80000 	.word	0x42c80000
 800263c:	43800000 	.word	0x43800000
 8002640:	44800000 	.word	0x44800000

08002644 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800264a:	f000 fa27 	bl	8002a9c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800264e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002652:	2201      	movs	r2, #1
 8002654:	2178      	movs	r1, #120	@ 0x78
 8002656:	485b      	ldr	r0, [pc, #364]	@ (80027c4 <SSD1306_Init+0x180>)
 8002658:	f001 fb6a 	bl	8003d30 <HAL_I2C_IsDeviceReady>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002662:	2300      	movs	r3, #0
 8002664:	e0a9      	b.n	80027ba <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002666:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800266a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800266c:	e002      	b.n	8002674 <SSD1306_Init+0x30>
		p--;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3b01      	subs	r3, #1
 8002672:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f9      	bne.n	800266e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800267a:	22ae      	movs	r2, #174	@ 0xae
 800267c:	2100      	movs	r1, #0
 800267e:	2078      	movs	r0, #120	@ 0x78
 8002680:	f000 fa88 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002684:	2220      	movs	r2, #32
 8002686:	2100      	movs	r1, #0
 8002688:	2078      	movs	r0, #120	@ 0x78
 800268a:	f000 fa83 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800268e:	2210      	movs	r2, #16
 8002690:	2100      	movs	r1, #0
 8002692:	2078      	movs	r0, #120	@ 0x78
 8002694:	f000 fa7e 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002698:	22b0      	movs	r2, #176	@ 0xb0
 800269a:	2100      	movs	r1, #0
 800269c:	2078      	movs	r0, #120	@ 0x78
 800269e:	f000 fa79 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80026a2:	22c8      	movs	r2, #200	@ 0xc8
 80026a4:	2100      	movs	r1, #0
 80026a6:	2078      	movs	r0, #120	@ 0x78
 80026a8:	f000 fa74 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80026ac:	2200      	movs	r2, #0
 80026ae:	2100      	movs	r1, #0
 80026b0:	2078      	movs	r0, #120	@ 0x78
 80026b2:	f000 fa6f 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80026b6:	2210      	movs	r2, #16
 80026b8:	2100      	movs	r1, #0
 80026ba:	2078      	movs	r0, #120	@ 0x78
 80026bc:	f000 fa6a 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80026c0:	2240      	movs	r2, #64	@ 0x40
 80026c2:	2100      	movs	r1, #0
 80026c4:	2078      	movs	r0, #120	@ 0x78
 80026c6:	f000 fa65 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80026ca:	2281      	movs	r2, #129	@ 0x81
 80026cc:	2100      	movs	r1, #0
 80026ce:	2078      	movs	r0, #120	@ 0x78
 80026d0:	f000 fa60 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80026d4:	22ff      	movs	r2, #255	@ 0xff
 80026d6:	2100      	movs	r1, #0
 80026d8:	2078      	movs	r0, #120	@ 0x78
 80026da:	f000 fa5b 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80026de:	22a1      	movs	r2, #161	@ 0xa1
 80026e0:	2100      	movs	r1, #0
 80026e2:	2078      	movs	r0, #120	@ 0x78
 80026e4:	f000 fa56 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80026e8:	22a6      	movs	r2, #166	@ 0xa6
 80026ea:	2100      	movs	r1, #0
 80026ec:	2078      	movs	r0, #120	@ 0x78
 80026ee:	f000 fa51 	bl	8002b94 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80026f2:	22a8      	movs	r2, #168	@ 0xa8
 80026f4:	2100      	movs	r1, #0
 80026f6:	2078      	movs	r0, #120	@ 0x78
 80026f8:	f000 fa4c 	bl	8002b94 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80026fc:	223f      	movs	r2, #63	@ 0x3f
 80026fe:	2100      	movs	r1, #0
 8002700:	2078      	movs	r0, #120	@ 0x78
 8002702:	f000 fa47 	bl	8002b94 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002706:	22a4      	movs	r2, #164	@ 0xa4
 8002708:	2100      	movs	r1, #0
 800270a:	2078      	movs	r0, #120	@ 0x78
 800270c:	f000 fa42 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002710:	22d3      	movs	r2, #211	@ 0xd3
 8002712:	2100      	movs	r1, #0
 8002714:	2078      	movs	r0, #120	@ 0x78
 8002716:	f000 fa3d 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	2078      	movs	r0, #120	@ 0x78
 8002720:	f000 fa38 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002724:	22d5      	movs	r2, #213	@ 0xd5
 8002726:	2100      	movs	r1, #0
 8002728:	2078      	movs	r0, #120	@ 0x78
 800272a:	f000 fa33 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800272e:	22f0      	movs	r2, #240	@ 0xf0
 8002730:	2100      	movs	r1, #0
 8002732:	2078      	movs	r0, #120	@ 0x78
 8002734:	f000 fa2e 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002738:	22d9      	movs	r2, #217	@ 0xd9
 800273a:	2100      	movs	r1, #0
 800273c:	2078      	movs	r0, #120	@ 0x78
 800273e:	f000 fa29 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002742:	2222      	movs	r2, #34	@ 0x22
 8002744:	2100      	movs	r1, #0
 8002746:	2078      	movs	r0, #120	@ 0x78
 8002748:	f000 fa24 	bl	8002b94 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800274c:	22da      	movs	r2, #218	@ 0xda
 800274e:	2100      	movs	r1, #0
 8002750:	2078      	movs	r0, #120	@ 0x78
 8002752:	f000 fa1f 	bl	8002b94 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8002756:	2212      	movs	r2, #18
 8002758:	2100      	movs	r1, #0
 800275a:	2078      	movs	r0, #120	@ 0x78
 800275c:	f000 fa1a 	bl	8002b94 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002760:	22db      	movs	r2, #219	@ 0xdb
 8002762:	2100      	movs	r1, #0
 8002764:	2078      	movs	r0, #120	@ 0x78
 8002766:	f000 fa15 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800276a:	2220      	movs	r2, #32
 800276c:	2100      	movs	r1, #0
 800276e:	2078      	movs	r0, #120	@ 0x78
 8002770:	f000 fa10 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002774:	228d      	movs	r2, #141	@ 0x8d
 8002776:	2100      	movs	r1, #0
 8002778:	2078      	movs	r0, #120	@ 0x78
 800277a:	f000 fa0b 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800277e:	2214      	movs	r2, #20
 8002780:	2100      	movs	r1, #0
 8002782:	2078      	movs	r0, #120	@ 0x78
 8002784:	f000 fa06 	bl	8002b94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002788:	22af      	movs	r2, #175	@ 0xaf
 800278a:	2100      	movs	r1, #0
 800278c:	2078      	movs	r0, #120	@ 0x78
 800278e:	f000 fa01 	bl	8002b94 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002792:	222e      	movs	r2, #46	@ 0x2e
 8002794:	2100      	movs	r1, #0
 8002796:	2078      	movs	r0, #120	@ 0x78
 8002798:	f000 f9fc 	bl	8002b94 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800279c:	2000      	movs	r0, #0
 800279e:	f000 f843 	bl	8002828 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80027a2:	f000 f813 	bl	80027cc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80027a6:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <SSD1306_Init+0x184>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <SSD1306_Init+0x184>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <SSD1306_Init+0x184>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000020c 	.word	0x2000020c
 80027c8:	2000070c 	.word	0x2000070c

080027cc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80027d2:	2300      	movs	r3, #0
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	e01d      	b.n	8002814 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	3b50      	subs	r3, #80	@ 0x50
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	2100      	movs	r1, #0
 80027e2:	2078      	movs	r0, #120	@ 0x78
 80027e4:	f000 f9d6 	bl	8002b94 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	2078      	movs	r0, #120	@ 0x78
 80027ee:	f000 f9d1 	bl	8002b94 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80027f2:	2210      	movs	r2, #16
 80027f4:	2100      	movs	r1, #0
 80027f6:	2078      	movs	r0, #120	@ 0x78
 80027f8:	f000 f9cc 	bl	8002b94 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	01db      	lsls	r3, r3, #7
 8002800:	4a08      	ldr	r2, [pc, #32]	@ (8002824 <SSD1306_UpdateScreen+0x58>)
 8002802:	441a      	add	r2, r3
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	2140      	movs	r1, #64	@ 0x40
 8002808:	2078      	movs	r0, #120	@ 0x78
 800280a:	f000 f95d 	bl	8002ac8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	3301      	adds	r3, #1
 8002812:	71fb      	strb	r3, [r7, #7]
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	2b07      	cmp	r3, #7
 8002818:	d9de      	bls.n	80027d8 <SSD1306_UpdateScreen+0xc>
	}
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	2000030c 	.word	0x2000030c

08002828 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <SSD1306_Fill+0x14>
 8002838:	2300      	movs	r3, #0
 800283a:	e000      	b.n	800283e <SSD1306_Fill+0x16>
 800283c:	23ff      	movs	r3, #255	@ 0xff
 800283e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002842:	4619      	mov	r1, r3
 8002844:	4803      	ldr	r0, [pc, #12]	@ (8002854 <SSD1306_Fill+0x2c>)
 8002846:	f004 f87e 	bl	8006946 <memset>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000030c 	.word	0x2000030c

08002858 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	80fb      	strh	r3, [r7, #6]
 8002862:	460b      	mov	r3, r1
 8002864:	80bb      	strh	r3, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	70fb      	strb	r3, [r7, #3]
	if (
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b7f      	cmp	r3, #127	@ 0x7f
 800286e:	d848      	bhi.n	8002902 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002870:	88bb      	ldrh	r3, [r7, #4]
 8002872:	2b3f      	cmp	r3, #63	@ 0x3f
 8002874:	d845      	bhi.n	8002902 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002876:	4b26      	ldr	r3, [pc, #152]	@ (8002910 <SSD1306_DrawPixel+0xb8>)
 8002878:	791b      	ldrb	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d11a      	bne.n	80028c8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	88bb      	ldrh	r3, [r7, #4]
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	b298      	uxth	r0, r3
 800289a:	4603      	mov	r3, r0
 800289c:	01db      	lsls	r3, r3, #7
 800289e:	4413      	add	r3, r2
 80028a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002914 <SSD1306_DrawPixel+0xbc>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	b25a      	sxtb	r2, r3
 80028a6:	88bb      	ldrh	r3, [r7, #4]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b259      	sxtb	r1, r3
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	4603      	mov	r3, r0
 80028bc:	01db      	lsls	r3, r3, #7
 80028be:	4413      	add	r3, r2
 80028c0:	b2c9      	uxtb	r1, r1
 80028c2:	4a14      	ldr	r2, [pc, #80]	@ (8002914 <SSD1306_DrawPixel+0xbc>)
 80028c4:	54d1      	strb	r1, [r2, r3]
 80028c6:	e01d      	b.n	8002904 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	88bb      	ldrh	r3, [r7, #4]
 80028cc:	08db      	lsrs	r3, r3, #3
 80028ce:	b298      	uxth	r0, r3
 80028d0:	4603      	mov	r3, r0
 80028d2:	01db      	lsls	r3, r3, #7
 80028d4:	4413      	add	r3, r2
 80028d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002914 <SSD1306_DrawPixel+0xbc>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	b25a      	sxtb	r2, r3
 80028dc:	88bb      	ldrh	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	b25b      	sxtb	r3, r3
 80028ee:	4013      	ands	r3, r2
 80028f0:	b259      	sxtb	r1, r3
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	4603      	mov	r3, r0
 80028f6:	01db      	lsls	r3, r3, #7
 80028f8:	4413      	add	r3, r2
 80028fa:	b2c9      	uxtb	r1, r1
 80028fc:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <SSD1306_DrawPixel+0xbc>)
 80028fe:	54d1      	strb	r1, [r2, r3]
 8002900:	e000      	b.n	8002904 <SSD1306_DrawPixel+0xac>
		return;
 8002902:	bf00      	nop
	}
}
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	2000070c 	.word	0x2000070c
 8002914:	2000030c 	.word	0x2000030c

08002918 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	460a      	mov	r2, r1
 8002922:	80fb      	strh	r3, [r7, #6]
 8002924:	4613      	mov	r3, r2
 8002926:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002928:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <SSD1306_GotoXY+0x28>)
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800292e:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <SSD1306_GotoXY+0x28>)
 8002930:	88bb      	ldrh	r3, [r7, #4]
 8002932:	8053      	strh	r3, [r2, #2]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	2000070c 	.word	0x2000070c

08002944 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
 8002950:	4613      	mov	r3, r2
 8002952:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002954:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <SSD1306_Putc+0xf8>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	4413      	add	r3, r2
	if (
 8002960:	2b7f      	cmp	r3, #127	@ 0x7f
 8002962:	dc07      	bgt.n	8002974 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002964:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <SSD1306_Putc+0xf8>)
 8002966:	885b      	ldrh	r3, [r3, #2]
 8002968:	461a      	mov	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002970:	2b3f      	cmp	r3, #63	@ 0x3f
 8002972:	dd01      	ble.n	8002978 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002974:	2300      	movs	r3, #0
 8002976:	e05d      	b.n	8002a34 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	e04b      	b.n	8002a16 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	3b20      	subs	r3, #32
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	7849      	ldrb	r1, [r1, #1]
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4619      	mov	r1, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	440b      	add	r3, r1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	e030      	b.n	8002a04 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d010      	beq.n	80029d4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80029b2:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <SSD1306_Putc+0xf8>)
 80029b4:	881a      	ldrh	r2, [r3, #0]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	b298      	uxth	r0, r3
 80029be:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <SSD1306_Putc+0xf8>)
 80029c0:	885a      	ldrh	r2, [r3, #2]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	79ba      	ldrb	r2, [r7, #6]
 80029cc:	4619      	mov	r1, r3
 80029ce:	f7ff ff43 	bl	8002858 <SSD1306_DrawPixel>
 80029d2:	e014      	b.n	80029fe <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80029d4:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <SSD1306_Putc+0xf8>)
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	4413      	add	r3, r2
 80029de:	b298      	uxth	r0, r3
 80029e0:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <SSD1306_Putc+0xf8>)
 80029e2:	885a      	ldrh	r2, [r3, #2]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	b299      	uxth	r1, r3
 80029ec:	79bb      	ldrb	r3, [r7, #6]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	f7ff ff2d 	bl	8002858 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	3301      	adds	r3, #1
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d3c8      	bcc.n	80029a2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3301      	adds	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d3ad      	bcc.n	800297e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <SSD1306_Putc+0xf8>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	7812      	ldrb	r2, [r2, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <SSD1306_Putc+0xf8>)
 8002a30:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002a32:	79fb      	ldrb	r3, [r7, #7]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	2000070c 	.word	0x2000070c

08002a40 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002a4e:	e012      	b.n	8002a76 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	79fa      	ldrb	r2, [r7, #7]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff73 	bl	8002944 <SSD1306_Putc>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d002      	beq.n	8002a70 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	e008      	b.n	8002a82 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1e8      	bne.n	8002a50 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	781b      	ldrb	r3, [r3, #0]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7ff feca 	bl	8002828 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002a94:	f7ff fe9a 	bl	80027cc <SSD1306_UpdateScreen>
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002aa2:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <ssd1306_I2C_Init+0x28>)
 8002aa4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002aa6:	e002      	b.n	8002aae <ssd1306_I2C_Init+0x12>
		p--;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f9      	bne.n	8002aa8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	0003d090 	.word	0x0003d090

08002ac8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b0c7      	sub	sp, #284	@ 0x11c
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	4604      	mov	r4, r0
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002ad6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002ada:	600a      	str	r2, [r1, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ae2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002aee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002af2:	4602      	mov	r2, r0
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002afa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002afe:	460a      	mov	r2, r1
 8002b00:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002b02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b0a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002b0e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002b1c:	e015      	b.n	8002b4a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002b1e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002b22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002b26:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	441a      	add	r2, r3
 8002b2e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002b32:	3301      	adds	r3, #1
 8002b34:	7811      	ldrb	r1, [r2, #0]
 8002b36:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002b3a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002b3e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002b40:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002b44:	3301      	adds	r3, #1
 8002b46:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002b4a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002b54:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002b58:	8812      	ldrh	r2, [r2, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d8df      	bhi.n	8002b1e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8002b5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b62:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b299      	uxth	r1, r3
 8002b6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f107 020c 	add.w	r2, r7, #12
 8002b7c:	200a      	movs	r0, #10
 8002b7e:	9000      	str	r0, [sp, #0]
 8002b80:	4803      	ldr	r0, [pc, #12]	@ (8002b90 <ssd1306_I2C_WriteMulti+0xc8>)
 8002b82:	f000 fcab 	bl	80034dc <HAL_I2C_Master_Transmit>
}
 8002b86:	bf00      	nop
 8002b88:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd90      	pop	{r4, r7, pc}
 8002b90:	2000020c 	.word	0x2000020c

08002b94 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	71bb      	strb	r3, [r7, #6]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002baa:	797b      	ldrb	r3, [r7, #5]
 8002bac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	b299      	uxth	r1, r3
 8002bb2:	f107 020c 	add.w	r2, r7, #12
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2302      	movs	r3, #2
 8002bbc:	4803      	ldr	r0, [pc, #12]	@ (8002bcc <ssd1306_I2C_Write+0x38>)
 8002bbe:	f000 fc8d 	bl	80034dc <HAL_I2C_Master_Transmit>
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000020c 	.word	0x2000020c

08002bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c10 <HAL_Init+0x40>)
 8002bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c10 <HAL_Init+0x40>)
 8002be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bec:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a07      	ldr	r2, [pc, #28]	@ (8002c10 <HAL_Init+0x40>)
 8002bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	f000 f931 	bl	8002e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f000 f808 	bl	8002c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c04:	f7fe fd2c 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00

08002c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c1c:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <HAL_InitTick+0x54>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <HAL_InitTick+0x58>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4619      	mov	r1, r3
 8002c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f93b 	bl	8002eae <HAL_SYSTICK_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00e      	b.n	8002c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b0f      	cmp	r3, #15
 8002c46:	d80a      	bhi.n	8002c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c50:	f000 f911 	bl	8002e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c54:	4a06      	ldr	r2, [pc, #24]	@ (8002c70 <HAL_InitTick+0x5c>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000014 	.word	0x20000014
 8002c6c:	20000024 	.word	0x20000024
 8002c70:	20000020 	.word	0x20000020

08002c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_IncTick+0x20>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_IncTick+0x24>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_IncTick+0x24>)
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000024 	.word	0x20000024
 8002c98:	20000714 	.word	0x20000714

08002c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <HAL_GetTick+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000714 	.word	0x20000714

08002cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff ffee 	bl	8002c9c <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d005      	beq.n	8002cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <HAL_Delay+0x44>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cda:	bf00      	nop
 8002cdc:	f7ff ffde 	bl	8002c9c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d8f7      	bhi.n	8002cdc <HAL_Delay+0x28>
  {
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000024 	.word	0x20000024

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	6039      	str	r1, [r7, #0]
 8002d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db0a      	blt.n	8002d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	490c      	ldr	r1, [pc, #48]	@ (8002dac <__NVIC_SetPriority+0x4c>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	440b      	add	r3, r1
 8002d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d88:	e00a      	b.n	8002da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4908      	ldr	r1, [pc, #32]	@ (8002db0 <__NVIC_SetPriority+0x50>)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	3b04      	subs	r3, #4
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	761a      	strb	r2, [r3, #24]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000e100 	.word	0xe000e100
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	@ 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f1c3 0307 	rsb	r3, r3, #7
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	bf28      	it	cs
 8002dd2:	2304      	movcs	r3, #4
 8002dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d902      	bls.n	8002de4 <NVIC_EncodePriority+0x30>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3b03      	subs	r3, #3
 8002de2:	e000      	b.n	8002de6 <NVIC_EncodePriority+0x32>
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	401a      	ands	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	43d9      	mvns	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	4313      	orrs	r3, r2
         );
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3724      	adds	r7, #36	@ 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e2c:	d301      	bcc.n	8002e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00f      	b.n	8002e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e32:	4a0a      	ldr	r2, [pc, #40]	@ (8002e5c <SysTick_Config+0x40>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3a:	210f      	movs	r1, #15
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f7ff ff8e 	bl	8002d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <SysTick_Config+0x40>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4a:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <SysTick_Config+0x40>)
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	e000e010 	.word	0xe000e010

08002e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff47 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e88:	f7ff ff5c 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff8e 	bl	8002db4 <NVIC_EncodePriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff5d 	bl	8002d60 <__NVIC_SetPriority>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ffb0 	bl	8002e1c <SysTick_Config>
 8002ebc:	4603      	mov	r3, r0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	@ 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	e165      	b.n	80031b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	f040 8154 	bne.w	80031aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d005      	beq.n	8002f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d130      	bne.n	8002f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f50:	2201      	movs	r2, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 0201 	and.w	r2, r3, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d017      	beq.n	8002fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d123      	bne.n	800300c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	08da      	lsrs	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3208      	adds	r2, #8
 8003006:	69b9      	ldr	r1, [r7, #24]
 8003008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0203 	and.w	r2, r3, #3
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80ae 	beq.w	80031aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b5d      	ldr	r3, [pc, #372]	@ (80031c8 <HAL_GPIO_Init+0x300>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	4a5c      	ldr	r2, [pc, #368]	@ (80031c8 <HAL_GPIO_Init+0x300>)
 8003058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800305c:	6453      	str	r3, [r2, #68]	@ 0x44
 800305e:	4b5a      	ldr	r3, [pc, #360]	@ (80031c8 <HAL_GPIO_Init+0x300>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800306a:	4a58      	ldr	r2, [pc, #352]	@ (80031cc <HAL_GPIO_Init+0x304>)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	220f      	movs	r2, #15
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4f      	ldr	r2, [pc, #316]	@ (80031d0 <HAL_GPIO_Init+0x308>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d025      	beq.n	80030e2 <HAL_GPIO_Init+0x21a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4e      	ldr	r2, [pc, #312]	@ (80031d4 <HAL_GPIO_Init+0x30c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01f      	beq.n	80030de <HAL_GPIO_Init+0x216>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4d      	ldr	r2, [pc, #308]	@ (80031d8 <HAL_GPIO_Init+0x310>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x212>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4c      	ldr	r2, [pc, #304]	@ (80031dc <HAL_GPIO_Init+0x314>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x20e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4b      	ldr	r2, [pc, #300]	@ (80031e0 <HAL_GPIO_Init+0x318>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x20a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4a      	ldr	r2, [pc, #296]	@ (80031e4 <HAL_GPIO_Init+0x31c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x206>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a49      	ldr	r2, [pc, #292]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x202>
 80030c6:	2306      	movs	r3, #6
 80030c8:	e00c      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e00a      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030ce:	2305      	movs	r3, #5
 80030d0:	e008      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030d2:	2304      	movs	r3, #4
 80030d4:	e006      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030d6:	2303      	movs	r3, #3
 80030d8:	e004      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030da:	2302      	movs	r3, #2
 80030dc:	e002      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030e2:	2300      	movs	r3, #0
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	f002 0203 	and.w	r2, r2, #3
 80030ea:	0092      	lsls	r2, r2, #2
 80030ec:	4093      	lsls	r3, r2
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030f4:	4935      	ldr	r1, [pc, #212]	@ (80031cc <HAL_GPIO_Init+0x304>)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	3302      	adds	r3, #2
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003102:	4b3a      	ldr	r3, [pc, #232]	@ (80031ec <HAL_GPIO_Init+0x324>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003126:	4a31      	ldr	r2, [pc, #196]	@ (80031ec <HAL_GPIO_Init+0x324>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800312c:	4b2f      	ldr	r3, [pc, #188]	@ (80031ec <HAL_GPIO_Init+0x324>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003150:	4a26      	ldr	r2, [pc, #152]	@ (80031ec <HAL_GPIO_Init+0x324>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003156:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <HAL_GPIO_Init+0x324>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800317a:	4a1c      	ldr	r2, [pc, #112]	@ (80031ec <HAL_GPIO_Init+0x324>)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003180:	4b1a      	ldr	r3, [pc, #104]	@ (80031ec <HAL_GPIO_Init+0x324>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a4:	4a11      	ldr	r2, [pc, #68]	@ (80031ec <HAL_GPIO_Init+0x324>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3301      	adds	r3, #1
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	f67f ae96 	bls.w	8002ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	3724      	adds	r7, #36	@ 0x24
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40013800 	.word	0x40013800
 80031d0:	40020000 	.word	0x40020000
 80031d4:	40020400 	.word	0x40020400
 80031d8:	40020800 	.word	0x40020800
 80031dc:	40020c00 	.word	0x40020c00
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40021400 	.word	0x40021400
 80031e8:	40021800 	.word	0x40021800
 80031ec:	40013c00 	.word	0x40013c00

080031f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e001      	b.n	8003212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	807b      	strh	r3, [r7, #2]
 800322c:	4613      	mov	r3, r2
 800322e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003230:	787b      	ldrb	r3, [r7, #1]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800323c:	e003      	b.n	8003246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	041a      	lsls	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	619a      	str	r2, [r3, #24]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e12b      	b.n	80034be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe fa18 	bl	80016b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	@ 0x24
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032b8:	f001 fb90 	bl	80049dc <HAL_RCC_GetPCLK1Freq>
 80032bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4a81      	ldr	r2, [pc, #516]	@ (80034c8 <HAL_I2C_Init+0x274>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d807      	bhi.n	80032d8 <HAL_I2C_Init+0x84>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a80      	ldr	r2, [pc, #512]	@ (80034cc <HAL_I2C_Init+0x278>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	bf94      	ite	ls
 80032d0:	2301      	movls	r3, #1
 80032d2:	2300      	movhi	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e006      	b.n	80032e6 <HAL_I2C_Init+0x92>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a7d      	ldr	r2, [pc, #500]	@ (80034d0 <HAL_I2C_Init+0x27c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	bf94      	ite	ls
 80032e0:	2301      	movls	r3, #1
 80032e2:	2300      	movhi	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0e7      	b.n	80034be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a78      	ldr	r2, [pc, #480]	@ (80034d4 <HAL_I2C_Init+0x280>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	0c9b      	lsrs	r3, r3, #18
 80032f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4a6a      	ldr	r2, [pc, #424]	@ (80034c8 <HAL_I2C_Init+0x274>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d802      	bhi.n	8003328 <HAL_I2C_Init+0xd4>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3301      	adds	r3, #1
 8003326:	e009      	b.n	800333c <HAL_I2C_Init+0xe8>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	4a69      	ldr	r2, [pc, #420]	@ (80034d8 <HAL_I2C_Init+0x284>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	3301      	adds	r3, #1
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	430b      	orrs	r3, r1
 8003342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800334e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	495c      	ldr	r1, [pc, #368]	@ (80034c8 <HAL_I2C_Init+0x274>)
 8003358:	428b      	cmp	r3, r1
 800335a:	d819      	bhi.n	8003390 <HAL_I2C_Init+0x13c>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e59      	subs	r1, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	fbb1 f3f3 	udiv	r3, r1, r3
 800336a:	1c59      	adds	r1, r3, #1
 800336c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003370:	400b      	ands	r3, r1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_I2C_Init+0x138>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1e59      	subs	r1, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fbb1 f3f3 	udiv	r3, r1, r3
 8003384:	3301      	adds	r3, #1
 8003386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338a:	e051      	b.n	8003430 <HAL_I2C_Init+0x1dc>
 800338c:	2304      	movs	r3, #4
 800338e:	e04f      	b.n	8003430 <HAL_I2C_Init+0x1dc>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d111      	bne.n	80033bc <HAL_I2C_Init+0x168>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e012      	b.n	80033e2 <HAL_I2C_Init+0x18e>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	0099      	lsls	r1, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Init+0x196>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e022      	b.n	8003430 <HAL_I2C_Init+0x1dc>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10e      	bne.n	8003410 <HAL_I2C_Init+0x1bc>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1e58      	subs	r0, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	440b      	add	r3, r1
 8003400:	fbb0 f3f3 	udiv	r3, r0, r3
 8003404:	3301      	adds	r3, #1
 8003406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800340e:	e00f      	b.n	8003430 <HAL_I2C_Init+0x1dc>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e58      	subs	r0, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	0099      	lsls	r1, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	6809      	ldr	r1, [r1, #0]
 8003434:	4313      	orrs	r3, r2
 8003436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800345e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6911      	ldr	r1, [r2, #16]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	430b      	orrs	r3, r1
 8003472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	000186a0 	.word	0x000186a0
 80034cc:	001e847f 	.word	0x001e847f
 80034d0:	003d08ff 	.word	0x003d08ff
 80034d4:	431bde83 	.word	0x431bde83
 80034d8:	10624dd3 	.word	0x10624dd3

080034dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	461a      	mov	r2, r3
 80034e8:	460b      	mov	r3, r1
 80034ea:	817b      	strh	r3, [r7, #10]
 80034ec:	4613      	mov	r3, r2
 80034ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7ff fbd4 	bl	8002c9c <HAL_GetTick>
 80034f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b20      	cmp	r3, #32
 8003500:	f040 80e0 	bne.w	80036c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	4970      	ldr	r1, [pc, #448]	@ (80036d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 ff3c 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	e0d3      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_I2C_Master_Transmit+0x50>
 8003528:	2302      	movs	r3, #2
 800352a:	e0cc      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d007      	beq.n	8003552 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003560:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2221      	movs	r2, #33	@ 0x21
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2210      	movs	r2, #16
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	893a      	ldrh	r2, [r7, #8]
 8003582:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a50      	ldr	r2, [pc, #320]	@ (80036d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003592:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003594:	8979      	ldrh	r1, [r7, #10]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	6a3a      	ldr	r2, [r7, #32]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fcf6 	bl	8003f8c <I2C_MasterRequestWrite>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e08d      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035c0:	e066      	b.n	8003690 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	6a39      	ldr	r1, [r7, #32]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fffa 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d107      	bne.n	80035ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e06b      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b04      	cmp	r3, #4
 800362a:	d11b      	bne.n	8003664 <HAL_I2C_Master_Transmit+0x188>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d017      	beq.n	8003664 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	6a39      	ldr	r1, [r7, #32]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fff1 	bl	8004650 <I2C_WaitOnBTFFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2b04      	cmp	r3, #4
 800367a:	d107      	bne.n	800368c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e01a      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d194      	bne.n	80035c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	00100002 	.word	0x00100002
 80036d4:	ffff0000 	.word	0xffff0000

080036d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	460b      	mov	r3, r1
 80036ec:	813b      	strh	r3, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036f2:	f7ff fad3 	bl	8002c9c <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b20      	cmp	r3, #32
 8003702:	f040 80d9 	bne.w	80038b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2319      	movs	r3, #25
 800370c:	2201      	movs	r2, #1
 800370e:	496d      	ldr	r1, [pc, #436]	@ (80038c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fe3b 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	e0cc      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2C_Mem_Write+0x56>
 800372a:	2302      	movs	r3, #2
 800372c:	e0c5      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d007      	beq.n	8003754 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2221      	movs	r2, #33	@ 0x21
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	@ 0x40
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a4d      	ldr	r2, [pc, #308]	@ (80038c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003794:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003796:	88f8      	ldrh	r0, [r7, #6]
 8003798:	893a      	ldrh	r2, [r7, #8]
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4603      	mov	r3, r0
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fc72 	bl	8004090 <I2C_RequestMemoryWrite>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d052      	beq.n	8003858 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e081      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 ff00 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d107      	bne.n	80037de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06b      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11b      	bne.n	8003858 <HAL_I2C_Mem_Write+0x180>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d017      	beq.n	8003858 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1aa      	bne.n	80037b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fef3 	bl	8004650 <I2C_WaitOnBTFFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	2b04      	cmp	r3, #4
 8003876:	d107      	bne.n	8003888 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003886:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e016      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	00100002 	.word	0x00100002
 80038c8:	ffff0000 	.word	0xffff0000

080038cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	@ 0x30
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	817b      	strh	r3, [r7, #10]
 80038de:	460b      	mov	r3, r1
 80038e0:	813b      	strh	r3, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038e6:	f7ff f9d9 	bl	8002c9c <HAL_GetTick>
 80038ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	f040 8214 	bne.w	8003d22 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2319      	movs	r3, #25
 8003900:	2201      	movs	r2, #1
 8003902:	497b      	ldr	r1, [pc, #492]	@ (8003af0 <HAL_I2C_Mem_Read+0x224>)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fd41 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
 8003912:	e207      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Mem_Read+0x56>
 800391e:	2302      	movs	r3, #2
 8003920:	e200      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d007      	beq.n	8003948 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2222      	movs	r2, #34	@ 0x22
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	@ 0x40
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003972:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003978:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a5b      	ldr	r2, [pc, #364]	@ (8003af4 <HAL_I2C_Mem_Read+0x228>)
 8003988:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800398a:	88f8      	ldrh	r0, [r7, #6]
 800398c:	893a      	ldrh	r2, [r7, #8]
 800398e:	8979      	ldrh	r1, [r7, #10]
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	4603      	mov	r3, r0
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fc0e 	bl	80041bc <I2C_RequestMemoryRead>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1bc      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d113      	bne.n	80039da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	623b      	str	r3, [r7, #32]
 80039c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e190      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d11b      	bne.n	8003a1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	e170      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d11b      	bne.n	8003a5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	e150      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a70:	e144      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	f200 80f1 	bhi.w	8003c5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d123      	bne.n	8003acc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fe29 	bl	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e145      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aca:	e117      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d14e      	bne.n	8003b72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ada:	2200      	movs	r2, #0
 8003adc:	4906      	ldr	r1, [pc, #24]	@ (8003af8 <HAL_I2C_Mem_Read+0x22c>)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fc54 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e11a      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
 8003aee:	bf00      	nop
 8003af0:	00100002 	.word	0x00100002
 8003af4:	ffff0000 	.word	0xffff0000
 8003af8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b70:	e0c4      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b78:	2200      	movs	r2, #0
 8003b7a:	496c      	ldr	r1, [pc, #432]	@ (8003d2c <HAL_I2C_Mem_Read+0x460>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fc05 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0cb      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	4955      	ldr	r1, [pc, #340]	@ (8003d2c <HAL_I2C_Mem_Read+0x460>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fbd7 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e09d      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c5c:	e04e      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c60:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fd3c 	bl	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e058      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d124      	bne.n	8003cfc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f aeb6 	bne.w	8003a72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e000      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d22:	2302      	movs	r3, #2
  }
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3728      	adds	r7, #40	@ 0x28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	00010004 	.word	0x00010004

08003d30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	@ 0x28
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d40:	f7fe ffac 	bl	8002c9c <HAL_GetTick>
 8003d44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	f040 8111 	bne.w	8003f7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2319      	movs	r3, #25
 8003d5e:	2201      	movs	r2, #1
 8003d60:	4988      	ldr	r1, [pc, #544]	@ (8003f84 <HAL_I2C_IsDeviceReady+0x254>)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fb12 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e104      	b.n	8003f7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_I2C_IsDeviceReady+0x50>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e0fd      	b.n	8003f7c <HAL_I2C_IsDeviceReady+0x24c>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d007      	beq.n	8003da6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003db4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2224      	movs	r2, #36	@ 0x24
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a70      	ldr	r2, [pc, #448]	@ (8003f88 <HAL_I2C_IsDeviceReady+0x258>)
 8003dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fad0 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e00:	d103      	bne.n	8003e0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e08:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0b6      	b.n	8003f7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fe ff3d 	bl	8002c9c <HAL_GetTick>
 8003e22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e52:	e025      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e54:	f7fe ff22 	bl	8002c9c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <HAL_I2C_IsDeviceReady+0x13a>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	22a0      	movs	r2, #160	@ 0xa0
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2ba0      	cmp	r3, #160	@ 0xa0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_I2C_IsDeviceReady+0x188>
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <HAL_I2C_IsDeviceReady+0x188>
 8003eb2:	7dbb      	ldrb	r3, [r7, #22]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0cd      	beq.n	8003e54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d129      	bne.n	8003f22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003edc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2319      	movs	r3, #25
 8003efa:	2201      	movs	r2, #1
 8003efc:	4921      	ldr	r1, [pc, #132]	@ (8003f84 <HAL_I2C_IsDeviceReady+0x254>)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fa44 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e036      	b.n	8003f7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e02c      	b.n	8003f7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2319      	movs	r3, #25
 8003f42:	2201      	movs	r2, #1
 8003f44:	490f      	ldr	r1, [pc, #60]	@ (8003f84 <HAL_I2C_IsDeviceReady+0x254>)
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fa20 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e012      	b.n	8003f7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	f4ff af32 	bcc.w	8003dca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	00100002 	.word	0x00100002
 8003f88:	ffff0000 	.word	0xffff0000

08003f8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d006      	beq.n	8003fb6 <I2C_MasterRequestWrite+0x2a>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d003      	beq.n	8003fb6 <I2C_MasterRequestWrite+0x2a>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fb4:	d108      	bne.n	8003fc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e00b      	b.n	8003fe0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	2b12      	cmp	r3, #18
 8003fce:	d107      	bne.n	8003fe0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f9cd 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004006:	d103      	bne.n	8004010 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e035      	b.n	8004080 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401c:	d108      	bne.n	8004030 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800402c:	611a      	str	r2, [r3, #16]
 800402e:	e01b      	b.n	8004068 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004030:	897b      	ldrh	r3, [r7, #10]
 8004032:	11db      	asrs	r3, r3, #7
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0306 	and.w	r3, r3, #6
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f063 030f 	orn	r3, r3, #15
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	490e      	ldr	r1, [pc, #56]	@ (8004088 <I2C_MasterRequestWrite+0xfc>)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fa16 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e010      	b.n	8004080 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800405e:	897b      	ldrh	r3, [r7, #10]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4907      	ldr	r1, [pc, #28]	@ (800408c <I2C_MasterRequestWrite+0x100>)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fa06 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	00010008 	.word	0x00010008
 800408c:	00010002 	.word	0x00010002

08004090 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	817b      	strh	r3, [r7, #10]
 80040a2:	460b      	mov	r3, r1
 80040a4:	813b      	strh	r3, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f960 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e0:	d103      	bne.n	80040ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e05f      	b.n	80041ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ee:	897b      	ldrh	r3, [r7, #10]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	6a3a      	ldr	r2, [r7, #32]
 8004102:	492d      	ldr	r1, [pc, #180]	@ (80041b8 <I2C_RequestMemoryWrite+0x128>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f9bb 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e04c      	b.n	80041ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	6a39      	ldr	r1, [r7, #32]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fa46 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	2b04      	cmp	r3, #4
 8004140:	d107      	bne.n	8004152 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e02b      	b.n	80041ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415c:	893b      	ldrh	r3, [r7, #8]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	e021      	b.n	80041ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004168:	893b      	ldrh	r3, [r7, #8]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b29b      	uxth	r3, r3
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004178:	6a39      	ldr	r1, [r7, #32]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa20 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00d      	beq.n	80041a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b04      	cmp	r3, #4
 800418c:	d107      	bne.n	800419e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e005      	b.n	80041ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a2:	893b      	ldrh	r3, [r7, #8]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	00010002 	.word	0x00010002

080041bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	817b      	strh	r3, [r7, #10]
 80041ce:	460b      	mov	r3, r1
 80041d0:	813b      	strh	r3, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f8c2 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421c:	d103      	bne.n	8004226 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004224:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0aa      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004238:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	4952      	ldr	r1, [pc, #328]	@ (8004388 <I2C_RequestMemoryRead+0x1cc>)
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f91d 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e097      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004268:	6a39      	ldr	r1, [r7, #32]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f9a8 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	2b04      	cmp	r3, #4
 800427c:	d107      	bne.n	800428e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e076      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d105      	bne.n	80042a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004298:	893b      	ldrh	r3, [r7, #8]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	e021      	b.n	80042e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042a4:	893b      	ldrh	r3, [r7, #8]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b4:	6a39      	ldr	r1, [r7, #32]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f982 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d107      	bne.n	80042da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e050      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042de:	893b      	ldrh	r3, [r7, #8]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ea:	6a39      	ldr	r1, [r7, #32]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f967 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d107      	bne.n	8004310 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800430e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e035      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004322:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2200      	movs	r2, #0
 800432c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f82b 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00d      	beq.n	8004358 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800434a:	d103      	bne.n	8004354 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004352:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e013      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004358:	897b      	ldrh	r3, [r7, #10]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	6a3a      	ldr	r2, [r7, #32]
 800436c:	4906      	ldr	r1, [pc, #24]	@ (8004388 <I2C_RequestMemoryRead+0x1cc>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f886 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	00010002 	.word	0x00010002

0800438c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800439c:	e048      	b.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d044      	beq.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fe fc79 	bl	8002c9c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d139      	bne.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	0c1b      	lsrs	r3, r3, #16
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10d      	bne.n	80043e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	e00c      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	43da      	mvns	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4013      	ands	r3, r2
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d116      	bne.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e023      	b.n	8004478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10d      	bne.n	8004456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	43da      	mvns	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	e00c      	b.n	8004470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	43da      	mvns	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	429a      	cmp	r2, r3
 8004474:	d093      	beq.n	800439e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800448e:	e071      	b.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d123      	bne.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f043 0204 	orr.w	r2, r3, #4
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e067      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d041      	beq.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f0:	f7fe fbd4 	bl	8002c9c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d136      	bne.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10c      	bne.n	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e00b      	b.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	43da      	mvns	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e021      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10c      	bne.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	43da      	mvns	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4013      	ands	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e00b      	b.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	43da      	mvns	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f af6d 	bne.w	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045cc:	e034      	b.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f8e3 	bl	800479a <I2C_IsAcknowledgeFailed>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e034      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d028      	beq.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fe fb59 	bl	8002c9c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11d      	bne.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b80      	cmp	r3, #128	@ 0x80
 8004608:	d016      	beq.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	d1c3      	bne.n	80045ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800465c:	e034      	b.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f89b 	bl	800479a <I2C_IsAcknowledgeFailed>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e034      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d028      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fe fb11 	bl	8002c9c <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11d      	bne.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d016      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e007      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d1c3      	bne.n	800465e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ec:	e049      	b.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d119      	bne.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0210 	mvn.w	r2, #16
 8004704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e030      	b.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004730:	f7fe fab4 	bl	8002c9c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	d302      	bcc.n	8004746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d11d      	bne.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b40      	cmp	r3, #64	@ 0x40
 8004752:	d016      	beq.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f043 0220 	orr.w	r2, r3, #32
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e007      	b.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	d1ae      	bne.n	80046ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b0:	d11b      	bne.n	80047ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f043 0204 	orr.w	r2, r3, #4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0cc      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b68      	ldr	r3, [pc, #416]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d90c      	bls.n	8004834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b65      	ldr	r3, [pc, #404]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b63      	ldr	r3, [pc, #396]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0b8      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800484c:	4b59      	ldr	r3, [pc, #356]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a58      	ldr	r2, [pc, #352]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004856:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004864:	4b53      	ldr	r3, [pc, #332]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a52      	ldr	r2, [pc, #328]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800486e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004870:	4b50      	ldr	r3, [pc, #320]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	494d      	ldr	r1, [pc, #308]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d044      	beq.n	8004918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	4b47      	ldr	r3, [pc, #284]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d119      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e07f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b6:	4b3f      	ldr	r3, [pc, #252]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e06f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c6:	4b3b      	ldr	r3, [pc, #236]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e067      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b37      	ldr	r3, [pc, #220]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4934      	ldr	r1, [pc, #208]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e8:	f7fe f9d8 	bl	8002c9c <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fe f9d4 	bl	8002c9c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e04f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b2b      	ldr	r3, [pc, #172]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004918:	4b25      	ldr	r3, [pc, #148]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d20c      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b22      	ldr	r3, [pc, #136]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b20      	ldr	r3, [pc, #128]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e032      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800494c:	4b19      	ldr	r3, [pc, #100]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4916      	ldr	r1, [pc, #88]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496a:	4b12      	ldr	r3, [pc, #72]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	490e      	ldr	r1, [pc, #56]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800497e:	f000 f841 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 8004982:	4602      	mov	r2, r0
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	490a      	ldr	r1, [pc, #40]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	5ccb      	ldrb	r3, [r1, r3]
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800499a:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe f938 	bl	8002c14 <HAL_InitTick>

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00
 80049b4:	40023800 	.word	0x40023800
 80049b8:	0800a144 	.word	0x0800a144
 80049bc:	20000014 	.word	0x20000014
 80049c0:	20000020 	.word	0x20000020

080049c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c8:	4b03      	ldr	r3, [pc, #12]	@ (80049d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ca:	681b      	ldr	r3, [r3, #0]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000014 	.word	0x20000014

080049dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049e0:	f7ff fff0 	bl	80049c4 <HAL_RCC_GetHCLKFreq>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	0a9b      	lsrs	r3, r3, #10
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	4903      	ldr	r1, [pc, #12]	@ (8004a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f2:	5ccb      	ldrb	r3, [r1, r3]
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40023800 	.word	0x40023800
 8004a00:	0800a154 	.word	0x0800a154

08004a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a08:	b0ae      	sub	sp, #184	@ 0xb8
 8004a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a2a:	4bcb      	ldr	r3, [pc, #812]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	f200 8206 	bhi.w	8004e44 <HAL_RCC_GetSysClockFreq+0x440>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a75 	.word	0x08004a75
 8004a44:	08004e45 	.word	0x08004e45
 8004a48:	08004e45 	.word	0x08004e45
 8004a4c:	08004e45 	.word	0x08004e45
 8004a50:	08004a7d 	.word	0x08004a7d
 8004a54:	08004e45 	.word	0x08004e45
 8004a58:	08004e45 	.word	0x08004e45
 8004a5c:	08004e45 	.word	0x08004e45
 8004a60:	08004a85 	.word	0x08004a85
 8004a64:	08004e45 	.word	0x08004e45
 8004a68:	08004e45 	.word	0x08004e45
 8004a6c:	08004e45 	.word	0x08004e45
 8004a70:	08004c75 	.word	0x08004c75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4bb9      	ldr	r3, [pc, #740]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x358>)
 8004a76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a7a:	e1e7      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a7c:	4bb8      	ldr	r3, [pc, #736]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a82:	e1e3      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a84:	4bb4      	ldr	r3, [pc, #720]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a90:	4bb1      	ldr	r3, [pc, #708]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d071      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9c:	4bae      	ldr	r3, [pc, #696]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	099b      	lsrs	r3, r3, #6
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aa8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	f04f 0000 	mov.w	r0, #0
 8004aca:	f04f 0100 	mov.w	r1, #0
 8004ace:	0159      	lsls	r1, r3, #5
 8004ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad4:	0150      	lsls	r0, r2, #5
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4621      	mov	r1, r4
 8004adc:	1a51      	subs	r1, r2, r1
 8004ade:	6439      	str	r1, [r7, #64]	@ 0x40
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004af4:	4649      	mov	r1, r9
 8004af6:	018b      	lsls	r3, r1, #6
 8004af8:	4641      	mov	r1, r8
 8004afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004afe:	4641      	mov	r1, r8
 8004b00:	018a      	lsls	r2, r1, #6
 8004b02:	4641      	mov	r1, r8
 8004b04:	1a51      	subs	r1, r2, r1
 8004b06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b08:	4649      	mov	r1, r9
 8004b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	00cb      	lsls	r3, r1, #3
 8004b20:	4641      	mov	r1, r8
 8004b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b26:	4641      	mov	r1, r8
 8004b28:	00ca      	lsls	r2, r1, #3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4622      	mov	r2, r4
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b36:	462b      	mov	r3, r5
 8004b38:	460a      	mov	r2, r1
 8004b3a:	eb42 0303 	adc.w	r3, r2, r3
 8004b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	024b      	lsls	r3, r1, #9
 8004b50:	4621      	mov	r1, r4
 8004b52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b56:	4621      	mov	r1, r4
 8004b58:	024a      	lsls	r2, r1, #9
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b70:	f7fc f8fa 	bl	8000d68 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b7e:	e067      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b80:	4b75      	ldr	r3, [pc, #468]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b8c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	f04f 0000 	mov.w	r0, #0
 8004baa:	f04f 0100 	mov.w	r1, #0
 8004bae:	0159      	lsls	r1, r3, #5
 8004bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb4:	0150      	lsls	r0, r2, #5
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4621      	mov	r1, r4
 8004bbc:	1a51      	subs	r1, r2, r1
 8004bbe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	018b      	lsls	r3, r1, #6
 8004bd8:	4641      	mov	r1, r8
 8004bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bde:	4641      	mov	r1, r8
 8004be0:	018a      	lsls	r2, r1, #6
 8004be2:	4641      	mov	r1, r8
 8004be4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004be8:	4649      	mov	r1, r9
 8004bea:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c02:	4692      	mov	sl, r2
 8004c04:	469b      	mov	fp, r3
 8004c06:	4623      	mov	r3, r4
 8004c08:	eb1a 0303 	adds.w	r3, sl, r3
 8004c0c:	623b      	str	r3, [r7, #32]
 8004c0e:	462b      	mov	r3, r5
 8004c10:	eb4b 0303 	adc.w	r3, fp, r3
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c22:	4629      	mov	r1, r5
 8004c24:	028b      	lsls	r3, r1, #10
 8004c26:	4621      	mov	r1, r4
 8004c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	028a      	lsls	r2, r1, #10
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c38:	2200      	movs	r2, #0
 8004c3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c3c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c42:	f7fc f891 	bl	8000d68 <__aeabi_uldivmod>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c50:	4b41      	ldr	r3, [pc, #260]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c72:	e0eb      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c74:	4b38      	ldr	r3, [pc, #224]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c80:	4b35      	ldr	r3, [pc, #212]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d06b      	beq.n	8004d64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8c:	4b32      	ldr	r3, [pc, #200]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	2200      	movs	r2, #0
 8004c94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ca4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004ca8:	4622      	mov	r2, r4
 8004caa:	462b      	mov	r3, r5
 8004cac:	f04f 0000 	mov.w	r0, #0
 8004cb0:	f04f 0100 	mov.w	r1, #0
 8004cb4:	0159      	lsls	r1, r3, #5
 8004cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cba:	0150      	lsls	r0, r2, #5
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	1a51      	subs	r1, r2, r1
 8004cc4:	61b9      	str	r1, [r7, #24]
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004cda:	4659      	mov	r1, fp
 8004cdc:	018b      	lsls	r3, r1, #6
 8004cde:	4651      	mov	r1, sl
 8004ce0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	018a      	lsls	r2, r1, #6
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ebb2 0801 	subs.w	r8, r2, r1
 8004cee:	4659      	mov	r1, fp
 8004cf0:	eb63 0901 	sbc.w	r9, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d08:	4690      	mov	r8, r2
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	eb18 0303 	adds.w	r3, r8, r3
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	462b      	mov	r3, r5
 8004d16:	eb49 0303 	adc.w	r3, r9, r3
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d28:	4629      	mov	r1, r5
 8004d2a:	024b      	lsls	r3, r1, #9
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d32:	4621      	mov	r1, r4
 8004d34:	024a      	lsls	r2, r1, #9
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d3e:	2200      	movs	r2, #0
 8004d40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d42:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d48:	f7fc f80e 	bl	8000d68 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4613      	mov	r3, r2
 8004d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d56:	e065      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x420>
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	00f42400 	.word	0x00f42400
 8004d60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d64:	4b3d      	ldr	r3, [pc, #244]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x458>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	4611      	mov	r1, r2
 8004d70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d74:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d76:	2300      	movs	r3, #0
 8004d78:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004d7e:	4642      	mov	r2, r8
 8004d80:	464b      	mov	r3, r9
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	0159      	lsls	r1, r3, #5
 8004d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d90:	0150      	lsls	r0, r2, #5
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4641      	mov	r1, r8
 8004d98:	1a51      	subs	r1, r2, r1
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004db0:	4659      	mov	r1, fp
 8004db2:	018b      	lsls	r3, r1, #6
 8004db4:	4651      	mov	r1, sl
 8004db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dba:	4651      	mov	r1, sl
 8004dbc:	018a      	lsls	r2, r1, #6
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	1a54      	subs	r4, r2, r1
 8004dc2:	4659      	mov	r1, fp
 8004dc4:	eb63 0501 	sbc.w	r5, r3, r1
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	00eb      	lsls	r3, r5, #3
 8004dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd6:	00e2      	lsls	r2, r4, #3
 8004dd8:	4614      	mov	r4, r2
 8004dda:	461d      	mov	r5, r3
 8004ddc:	4643      	mov	r3, r8
 8004dde:	18e3      	adds	r3, r4, r3
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	464b      	mov	r3, r9
 8004de4:	eb45 0303 	adc.w	r3, r5, r3
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004df6:	4629      	mov	r1, r5
 8004df8:	028b      	lsls	r3, r1, #10
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e00:	4621      	mov	r1, r4
 8004e02:	028a      	lsls	r2, r1, #10
 8004e04:	4610      	mov	r0, r2
 8004e06:	4619      	mov	r1, r3
 8004e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e10:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e16:	f7fb ffa7 	bl	8000d68 <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4613      	mov	r3, r2
 8004e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e24:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x458>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	0f1b      	lsrs	r3, r3, #28
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e42:	e003      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e44:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	37b8      	adds	r7, #184	@ 0xb8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	00f42400 	.word	0x00f42400

08004e64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e28d      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8083 	beq.w	8004f8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e84:	4b94      	ldr	r3, [pc, #592]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 030c 	and.w	r3, r3, #12
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d019      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e90:	4b91      	ldr	r3, [pc, #580]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e9c:	4b8e      	ldr	r3, [pc, #568]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea8:	d00c      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eaa:	4b8b      	ldr	r3, [pc, #556]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d112      	bne.n	8004edc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb6:	4b88      	ldr	r3, [pc, #544]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ec2:	d10b      	bne.n	8004edc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec4:	4b84      	ldr	r3, [pc, #528]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d05b      	beq.n	8004f88 <HAL_RCC_OscConfig+0x124>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d157      	bne.n	8004f88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e25a      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee4:	d106      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x90>
 8004ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a7b      	ldr	r2, [pc, #492]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e01d      	b.n	8004f30 <HAL_RCC_OscConfig+0xcc>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0xb4>
 8004efe:	4b76      	ldr	r3, [pc, #472]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a75      	ldr	r2, [pc, #468]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b73      	ldr	r3, [pc, #460]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a72      	ldr	r2, [pc, #456]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0xcc>
 8004f18:	4b6f      	ldr	r3, [pc, #444]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	4b6c      	ldr	r3, [pc, #432]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a6b      	ldr	r2, [pc, #428]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d013      	beq.n	8004f60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd feb0 	bl	8002c9c <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fd feac 	bl	8002c9c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	@ 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e21f      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	4b61      	ldr	r3, [pc, #388]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0xdc>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fd fe9c 	bl	8002c9c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fd fe98 	bl	8002c9c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	@ 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e20b      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7a:	4b57      	ldr	r3, [pc, #348]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x104>
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d06f      	beq.n	8005076 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f96:	4b50      	ldr	r3, [pc, #320]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d017      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
        || \
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d105      	bne.n	8004fba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fae:	4b4a      	ldr	r3, [pc, #296]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b47      	ldr	r3, [pc, #284]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d11c      	bne.n	8005000 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fc6:	4b44      	ldr	r3, [pc, #272]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d116      	bne.n	8005000 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd2:	4b41      	ldr	r3, [pc, #260]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_RCC_OscConfig+0x186>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e1d3      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fea:	4b3b      	ldr	r3, [pc, #236]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4937      	ldr	r1, [pc, #220]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	e03a      	b.n	8005076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d020      	beq.n	800504a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005008:	4b34      	ldr	r3, [pc, #208]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fd fe45 	bl	8002c9c <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005016:	f7fd fe41 	bl	8002c9c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e1b4      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005028:	4b2b      	ldr	r3, [pc, #172]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005034:	4b28      	ldr	r3, [pc, #160]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4925      	ldr	r1, [pc, #148]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
 8005048:	e015      	b.n	8005076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504a:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fd fe24 	bl	8002c9c <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005058:	f7fd fe20 	bl	8002c9c <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e193      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506a:	4b1b      	ldr	r3, [pc, #108]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d036      	beq.n	80050f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508a:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <HAL_RCC_OscConfig+0x27c>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fd fe04 	bl	8002c9c <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005098:	f7fd fe00 	bl	8002c9c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e173      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050aa:	4b0b      	ldr	r3, [pc, #44]	@ (80050d8 <HAL_RCC_OscConfig+0x274>)
 80050ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x234>
 80050b6:	e01b      	b.n	80050f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b8:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <HAL_RCC_OscConfig+0x27c>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050be:	f7fd fded 	bl	8002c9c <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	e00e      	b.n	80050e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c6:	f7fd fde9 	bl	8002c9c <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d907      	bls.n	80050e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e15c      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
 80050d8:	40023800 	.word	0x40023800
 80050dc:	42470000 	.word	0x42470000
 80050e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e4:	4b8a      	ldr	r3, [pc, #552]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 80050e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1ea      	bne.n	80050c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8097 	beq.w	800522c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005102:	4b83      	ldr	r3, [pc, #524]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	4b7f      	ldr	r3, [pc, #508]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	4a7e      	ldr	r2, [pc, #504]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800511c:	6413      	str	r3, [r2, #64]	@ 0x40
 800511e:	4b7c      	ldr	r3, [pc, #496]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512e:	4b79      	ldr	r3, [pc, #484]	@ (8005314 <HAL_RCC_OscConfig+0x4b0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d118      	bne.n	800516c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513a:	4b76      	ldr	r3, [pc, #472]	@ (8005314 <HAL_RCC_OscConfig+0x4b0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a75      	ldr	r2, [pc, #468]	@ (8005314 <HAL_RCC_OscConfig+0x4b0>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005146:	f7fd fda9 	bl	8002c9c <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514e:	f7fd fda5 	bl	8002c9c <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e118      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005160:	4b6c      	ldr	r3, [pc, #432]	@ (8005314 <HAL_RCC_OscConfig+0x4b0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d106      	bne.n	8005182 <HAL_RCC_OscConfig+0x31e>
 8005174:	4b66      	ldr	r3, [pc, #408]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005178:	4a65      	ldr	r2, [pc, #404]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005180:	e01c      	b.n	80051bc <HAL_RCC_OscConfig+0x358>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b05      	cmp	r3, #5
 8005188:	d10c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x340>
 800518a:	4b61      	ldr	r3, [pc, #388]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518e:	4a60      	ldr	r2, [pc, #384]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005190:	f043 0304 	orr.w	r3, r3, #4
 8005194:	6713      	str	r3, [r2, #112]	@ 0x70
 8005196:	4b5e      	ldr	r3, [pc, #376]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519a:	4a5d      	ldr	r2, [pc, #372]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a2:	e00b      	b.n	80051bc <HAL_RCC_OscConfig+0x358>
 80051a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	4a59      	ldr	r2, [pc, #356]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b0:	4b57      	ldr	r3, [pc, #348]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b4:	4a56      	ldr	r2, [pc, #344]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 80051b6:	f023 0304 	bic.w	r3, r3, #4
 80051ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fd fd6a 	bl	8002c9c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051cc:	f7fd fd66 	bl	8002c9c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e0d7      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0ee      	beq.n	80051cc <HAL_RCC_OscConfig+0x368>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f0:	f7fd fd54 	bl	8002c9c <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f6:	e00a      	b.n	800520e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fd fd50 	bl	8002c9c <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0c1      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520e:	4b40      	ldr	r3, [pc, #256]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1ee      	bne.n	80051f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d105      	bne.n	800522c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005220:	4b3b      	ldr	r3, [pc, #236]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	4a3a      	ldr	r2, [pc, #232]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800522a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80ad 	beq.w	8005390 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005236:	4b36      	ldr	r3, [pc, #216]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b08      	cmp	r3, #8
 8005240:	d060      	beq.n	8005304 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d145      	bne.n	80052d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524a:	4b33      	ldr	r3, [pc, #204]	@ (8005318 <HAL_RCC_OscConfig+0x4b4>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fd fd24 	bl	8002c9c <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005258:	f7fd fd20 	bl	8002c9c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e093      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526a:	4b29      	ldr	r3, [pc, #164]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69da      	ldr	r2, [r3, #28]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	019b      	lsls	r3, r3, #6
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528c:	085b      	lsrs	r3, r3, #1
 800528e:	3b01      	subs	r3, #1
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a0:	071b      	lsls	r3, r3, #28
 80052a2:	491b      	ldr	r1, [pc, #108]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005318 <HAL_RCC_OscConfig+0x4b4>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fd fcf5 	bl	8002c9c <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b6:	f7fd fcf1 	bl	8002c9c <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e064      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c8:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f0      	beq.n	80052b6 <HAL_RCC_OscConfig+0x452>
 80052d4:	e05c      	b.n	8005390 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d6:	4b10      	ldr	r3, [pc, #64]	@ (8005318 <HAL_RCC_OscConfig+0x4b4>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fd fcde 	bl	8002c9c <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e4:	f7fd fcda 	bl	8002c9c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e04d      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f6:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <HAL_RCC_OscConfig+0x4ac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x480>
 8005302:	e045      	b.n	8005390 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d107      	bne.n	800531c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e040      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
 8005310:	40023800 	.word	0x40023800
 8005314:	40007000 	.word	0x40007000
 8005318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800531c:	4b1f      	ldr	r3, [pc, #124]	@ (800539c <HAL_RCC_OscConfig+0x538>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d030      	beq.n	800538c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005334:	429a      	cmp	r2, r3
 8005336:	d129      	bne.n	800538c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d122      	bne.n	800538c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800534c:	4013      	ands	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005354:	4293      	cmp	r3, r2
 8005356:	d119      	bne.n	800538c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	3b01      	subs	r3, #1
 8005366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d10f      	bne.n	800538c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005378:	429a      	cmp	r2, r3
 800537a:	d107      	bne.n	800538c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40023800 	.word	0x40023800

080053a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e041      	b.n	8005436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fc f9ba 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f000 f95e 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e046      	b.n	80054e6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a23      	ldr	r2, [pc, #140]	@ (80054f4 <HAL_TIM_Base_Start+0xb4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d022      	beq.n	80054b0 <HAL_TIM_Base_Start+0x70>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005472:	d01d      	beq.n	80054b0 <HAL_TIM_Base_Start+0x70>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	@ (80054f8 <HAL_TIM_Base_Start+0xb8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d018      	beq.n	80054b0 <HAL_TIM_Base_Start+0x70>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1e      	ldr	r2, [pc, #120]	@ (80054fc <HAL_TIM_Base_Start+0xbc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <HAL_TIM_Base_Start+0x70>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	@ (8005500 <HAL_TIM_Base_Start+0xc0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_TIM_Base_Start+0x70>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	@ (8005504 <HAL_TIM_Base_Start+0xc4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d009      	beq.n	80054b0 <HAL_TIM_Base_Start+0x70>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a19      	ldr	r2, [pc, #100]	@ (8005508 <HAL_TIM_Base_Start+0xc8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIM_Base_Start+0x70>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a18      	ldr	r2, [pc, #96]	@ (800550c <HAL_TIM_Base_Start+0xcc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d111      	bne.n	80054d4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d010      	beq.n	80054e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0201 	orr.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	e007      	b.n	80054e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40010400 	.word	0x40010400
 8005508:	40014000 	.word	0x40014000
 800550c:	40001800 	.word	0x40001800

08005510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIM_ConfigClockSource+0x1c>
 8005528:	2302      	movs	r3, #2
 800552a:	e0b4      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x186>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800554a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005564:	d03e      	beq.n	80055e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800556a:	f200 8087 	bhi.w	800567c <HAL_TIM_ConfigClockSource+0x16c>
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005572:	f000 8086 	beq.w	8005682 <HAL_TIM_ConfigClockSource+0x172>
 8005576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557a:	d87f      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 800557c:	2b70      	cmp	r3, #112	@ 0x70
 800557e:	d01a      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005580:	2b70      	cmp	r3, #112	@ 0x70
 8005582:	d87b      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 8005584:	2b60      	cmp	r3, #96	@ 0x60
 8005586:	d050      	beq.n	800562a <HAL_TIM_ConfigClockSource+0x11a>
 8005588:	2b60      	cmp	r3, #96	@ 0x60
 800558a:	d877      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 800558c:	2b50      	cmp	r3, #80	@ 0x50
 800558e:	d03c      	beq.n	800560a <HAL_TIM_ConfigClockSource+0xfa>
 8005590:	2b50      	cmp	r3, #80	@ 0x50
 8005592:	d873      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 8005594:	2b40      	cmp	r3, #64	@ 0x40
 8005596:	d058      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x13a>
 8005598:	2b40      	cmp	r3, #64	@ 0x40
 800559a:	d86f      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 800559c:	2b30      	cmp	r3, #48	@ 0x30
 800559e:	d064      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x15a>
 80055a0:	2b30      	cmp	r3, #48	@ 0x30
 80055a2:	d86b      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d060      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x15a>
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	d867      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d05c      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x15a>
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d05a      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x15a>
 80055b4:	e062      	b.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055c6:	f000 f991 	bl	80058ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	609a      	str	r2, [r3, #8]
      break;
 80055e2:	e04f      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055f4:	f000 f97a 	bl	80058ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005606:	609a      	str	r2, [r3, #8]
      break;
 8005608:	e03c      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005616:	461a      	mov	r2, r3
 8005618:	f000 f8ee 	bl	80057f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2150      	movs	r1, #80	@ 0x50
 8005622:	4618      	mov	r0, r3
 8005624:	f000 f947 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8005628:	e02c      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005636:	461a      	mov	r2, r3
 8005638:	f000 f90d 	bl	8005856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2160      	movs	r1, #96	@ 0x60
 8005642:	4618      	mov	r0, r3
 8005644:	f000 f937 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8005648:	e01c      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005656:	461a      	mov	r2, r3
 8005658:	f000 f8ce 	bl	80057f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2140      	movs	r1, #64	@ 0x40
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f927 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8005668:	e00c      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f000 f91e 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 800567a:	e003      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
      break;
 8005680:	e000      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a46      	ldr	r2, [pc, #280]	@ (80057cc <TIM_Base_SetConfig+0x12c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056be:	d00f      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a43      	ldr	r2, [pc, #268]	@ (80057d0 <TIM_Base_SetConfig+0x130>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a42      	ldr	r2, [pc, #264]	@ (80057d4 <TIM_Base_SetConfig+0x134>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a41      	ldr	r2, [pc, #260]	@ (80057d8 <TIM_Base_SetConfig+0x138>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a40      	ldr	r2, [pc, #256]	@ (80057dc <TIM_Base_SetConfig+0x13c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d108      	bne.n	80056f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a35      	ldr	r2, [pc, #212]	@ (80057cc <TIM_Base_SetConfig+0x12c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02b      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005700:	d027      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a32      	ldr	r2, [pc, #200]	@ (80057d0 <TIM_Base_SetConfig+0x130>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d023      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a31      	ldr	r2, [pc, #196]	@ (80057d4 <TIM_Base_SetConfig+0x134>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01f      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a30      	ldr	r2, [pc, #192]	@ (80057d8 <TIM_Base_SetConfig+0x138>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01b      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2f      	ldr	r2, [pc, #188]	@ (80057dc <TIM_Base_SetConfig+0x13c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d017      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2e      	ldr	r2, [pc, #184]	@ (80057e0 <TIM_Base_SetConfig+0x140>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2d      	ldr	r2, [pc, #180]	@ (80057e4 <TIM_Base_SetConfig+0x144>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00f      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2c      	ldr	r2, [pc, #176]	@ (80057e8 <TIM_Base_SetConfig+0x148>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00b      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2b      	ldr	r2, [pc, #172]	@ (80057ec <TIM_Base_SetConfig+0x14c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2a      	ldr	r2, [pc, #168]	@ (80057f0 <TIM_Base_SetConfig+0x150>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a29      	ldr	r2, [pc, #164]	@ (80057f4 <TIM_Base_SetConfig+0x154>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d108      	bne.n	8005764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a10      	ldr	r2, [pc, #64]	@ (80057cc <TIM_Base_SetConfig+0x12c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_Base_SetConfig+0xf8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a12      	ldr	r2, [pc, #72]	@ (80057dc <TIM_Base_SetConfig+0x13c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d103      	bne.n	80057a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d105      	bne.n	80057be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	611a      	str	r2, [r3, #16]
  }
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40010400 	.word	0x40010400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800
 80057ec:	40001800 	.word	0x40001800
 80057f0:	40001c00 	.word	0x40001c00
 80057f4:	40002000 	.word	0x40002000

080057f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 030a 	bic.w	r3, r3, #10
 8005834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f023 0210 	bic.w	r2, r3, #16
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	031b      	lsls	r3, r3, #12
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005892:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f043 0307 	orr.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	431a      	orrs	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005940:	2302      	movs	r3, #2
 8005942:	e05a      	b.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a21      	ldr	r2, [pc, #132]	@ (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005990:	d01d      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a18      	ldr	r2, [pc, #96]	@ (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a17      	ldr	r2, [pc, #92]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a15      	ldr	r2, [pc, #84]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10c      	bne.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40010400 	.word	0x40010400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40001800 	.word	0x40001800

08005a24 <__cvt>:
 8005a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	ec57 6b10 	vmov	r6, r7, d0
 8005a2c:	2f00      	cmp	r7, #0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	4619      	mov	r1, r3
 8005a32:	463b      	mov	r3, r7
 8005a34:	bfbb      	ittet	lt
 8005a36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a3a:	461f      	movlt	r7, r3
 8005a3c:	2300      	movge	r3, #0
 8005a3e:	232d      	movlt	r3, #45	@ 0x2d
 8005a40:	700b      	strb	r3, [r1, #0]
 8005a42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a48:	4691      	mov	r9, r2
 8005a4a:	f023 0820 	bic.w	r8, r3, #32
 8005a4e:	bfbc      	itt	lt
 8005a50:	4632      	movlt	r2, r6
 8005a52:	4616      	movlt	r6, r2
 8005a54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a58:	d005      	beq.n	8005a66 <__cvt+0x42>
 8005a5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a5e:	d100      	bne.n	8005a62 <__cvt+0x3e>
 8005a60:	3401      	adds	r4, #1
 8005a62:	2102      	movs	r1, #2
 8005a64:	e000      	b.n	8005a68 <__cvt+0x44>
 8005a66:	2103      	movs	r1, #3
 8005a68:	ab03      	add	r3, sp, #12
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	ab02      	add	r3, sp, #8
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	ec47 6b10 	vmov	d0, r6, r7
 8005a74:	4653      	mov	r3, sl
 8005a76:	4622      	mov	r2, r4
 8005a78:	f001 f876 	bl	8006b68 <_dtoa_r>
 8005a7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a80:	4605      	mov	r5, r0
 8005a82:	d119      	bne.n	8005ab8 <__cvt+0x94>
 8005a84:	f019 0f01 	tst.w	r9, #1
 8005a88:	d00e      	beq.n	8005aa8 <__cvt+0x84>
 8005a8a:	eb00 0904 	add.w	r9, r0, r4
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2300      	movs	r3, #0
 8005a92:	4630      	mov	r0, r6
 8005a94:	4639      	mov	r1, r7
 8005a96:	f7fb f837 	bl	8000b08 <__aeabi_dcmpeq>
 8005a9a:	b108      	cbz	r0, 8005aa0 <__cvt+0x7c>
 8005a9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005aa0:	2230      	movs	r2, #48	@ 0x30
 8005aa2:	9b03      	ldr	r3, [sp, #12]
 8005aa4:	454b      	cmp	r3, r9
 8005aa6:	d31e      	bcc.n	8005ae6 <__cvt+0xc2>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005aac:	1b5b      	subs	r3, r3, r5
 8005aae:	4628      	mov	r0, r5
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	b004      	add	sp, #16
 8005ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005abc:	eb00 0904 	add.w	r9, r0, r4
 8005ac0:	d1e5      	bne.n	8005a8e <__cvt+0x6a>
 8005ac2:	7803      	ldrb	r3, [r0, #0]
 8005ac4:	2b30      	cmp	r3, #48	@ 0x30
 8005ac6:	d10a      	bne.n	8005ade <__cvt+0xba>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2300      	movs	r3, #0
 8005acc:	4630      	mov	r0, r6
 8005ace:	4639      	mov	r1, r7
 8005ad0:	f7fb f81a 	bl	8000b08 <__aeabi_dcmpeq>
 8005ad4:	b918      	cbnz	r0, 8005ade <__cvt+0xba>
 8005ad6:	f1c4 0401 	rsb	r4, r4, #1
 8005ada:	f8ca 4000 	str.w	r4, [sl]
 8005ade:	f8da 3000 	ldr.w	r3, [sl]
 8005ae2:	4499      	add	r9, r3
 8005ae4:	e7d3      	b.n	8005a8e <__cvt+0x6a>
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	9103      	str	r1, [sp, #12]
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e7d9      	b.n	8005aa2 <__cvt+0x7e>

08005aee <__exponent>:
 8005aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005af0:	2900      	cmp	r1, #0
 8005af2:	bfba      	itte	lt
 8005af4:	4249      	neglt	r1, r1
 8005af6:	232d      	movlt	r3, #45	@ 0x2d
 8005af8:	232b      	movge	r3, #43	@ 0x2b
 8005afa:	2909      	cmp	r1, #9
 8005afc:	7002      	strb	r2, [r0, #0]
 8005afe:	7043      	strb	r3, [r0, #1]
 8005b00:	dd29      	ble.n	8005b56 <__exponent+0x68>
 8005b02:	f10d 0307 	add.w	r3, sp, #7
 8005b06:	461d      	mov	r5, r3
 8005b08:	270a      	movs	r7, #10
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b10:	fb07 1416 	mls	r4, r7, r6, r1
 8005b14:	3430      	adds	r4, #48	@ 0x30
 8005b16:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	2c63      	cmp	r4, #99	@ 0x63
 8005b1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b22:	4631      	mov	r1, r6
 8005b24:	dcf1      	bgt.n	8005b0a <__exponent+0x1c>
 8005b26:	3130      	adds	r1, #48	@ 0x30
 8005b28:	1e94      	subs	r4, r2, #2
 8005b2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b2e:	1c41      	adds	r1, r0, #1
 8005b30:	4623      	mov	r3, r4
 8005b32:	42ab      	cmp	r3, r5
 8005b34:	d30a      	bcc.n	8005b4c <__exponent+0x5e>
 8005b36:	f10d 0309 	add.w	r3, sp, #9
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	42ac      	cmp	r4, r5
 8005b3e:	bf88      	it	hi
 8005b40:	2300      	movhi	r3, #0
 8005b42:	3302      	adds	r3, #2
 8005b44:	4403      	add	r3, r0
 8005b46:	1a18      	subs	r0, r3, r0
 8005b48:	b003      	add	sp, #12
 8005b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b50:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b54:	e7ed      	b.n	8005b32 <__exponent+0x44>
 8005b56:	2330      	movs	r3, #48	@ 0x30
 8005b58:	3130      	adds	r1, #48	@ 0x30
 8005b5a:	7083      	strb	r3, [r0, #2]
 8005b5c:	70c1      	strb	r1, [r0, #3]
 8005b5e:	1d03      	adds	r3, r0, #4
 8005b60:	e7f1      	b.n	8005b46 <__exponent+0x58>
	...

08005b64 <_printf_float>:
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	b08d      	sub	sp, #52	@ 0x34
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b70:	4616      	mov	r6, r2
 8005b72:	461f      	mov	r7, r3
 8005b74:	4605      	mov	r5, r0
 8005b76:	f000 feef 	bl	8006958 <_localeconv_r>
 8005b7a:	6803      	ldr	r3, [r0, #0]
 8005b7c:	9304      	str	r3, [sp, #16]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fa fb96 	bl	80002b0 <strlen>
 8005b84:	2300      	movs	r3, #0
 8005b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b88:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8c:	9005      	str	r0, [sp, #20]
 8005b8e:	3307      	adds	r3, #7
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	f103 0208 	add.w	r2, r3, #8
 8005b98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b9c:	f8d4 b000 	ldr.w	fp, [r4]
 8005ba0:	f8c8 2000 	str.w	r2, [r8]
 8005ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ba8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bac:	9307      	str	r3, [sp, #28]
 8005bae:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bba:	4b9c      	ldr	r3, [pc, #624]	@ (8005e2c <_printf_float+0x2c8>)
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc0:	f7fa ffd4 	bl	8000b6c <__aeabi_dcmpun>
 8005bc4:	bb70      	cbnz	r0, 8005c24 <_printf_float+0xc0>
 8005bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bca:	4b98      	ldr	r3, [pc, #608]	@ (8005e2c <_printf_float+0x2c8>)
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd0:	f7fa ffae 	bl	8000b30 <__aeabi_dcmple>
 8005bd4:	bb30      	cbnz	r0, 8005c24 <_printf_float+0xc0>
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4640      	mov	r0, r8
 8005bdc:	4649      	mov	r1, r9
 8005bde:	f7fa ff9d 	bl	8000b1c <__aeabi_dcmplt>
 8005be2:	b110      	cbz	r0, 8005bea <_printf_float+0x86>
 8005be4:	232d      	movs	r3, #45	@ 0x2d
 8005be6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bea:	4a91      	ldr	r2, [pc, #580]	@ (8005e30 <_printf_float+0x2cc>)
 8005bec:	4b91      	ldr	r3, [pc, #580]	@ (8005e34 <_printf_float+0x2d0>)
 8005bee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bf2:	bf94      	ite	ls
 8005bf4:	4690      	movls	r8, r2
 8005bf6:	4698      	movhi	r8, r3
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	f02b 0304 	bic.w	r3, fp, #4
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	f04f 0900 	mov.w	r9, #0
 8005c06:	9700      	str	r7, [sp, #0]
 8005c08:	4633      	mov	r3, r6
 8005c0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f9d2 	bl	8005fb8 <_printf_common>
 8005c14:	3001      	adds	r0, #1
 8005c16:	f040 808d 	bne.w	8005d34 <_printf_float+0x1d0>
 8005c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1e:	b00d      	add	sp, #52	@ 0x34
 8005c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	f7fa ff9e 	bl	8000b6c <__aeabi_dcmpun>
 8005c30:	b140      	cbz	r0, 8005c44 <_printf_float+0xe0>
 8005c32:	464b      	mov	r3, r9
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bfbc      	itt	lt
 8005c38:	232d      	movlt	r3, #45	@ 0x2d
 8005c3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e38 <_printf_float+0x2d4>)
 8005c40:	4b7e      	ldr	r3, [pc, #504]	@ (8005e3c <_printf_float+0x2d8>)
 8005c42:	e7d4      	b.n	8005bee <_printf_float+0x8a>
 8005c44:	6863      	ldr	r3, [r4, #4]
 8005c46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c4a:	9206      	str	r2, [sp, #24]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	d13b      	bne.n	8005cc8 <_printf_float+0x164>
 8005c50:	2306      	movs	r3, #6
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c58:	2300      	movs	r3, #0
 8005c5a:	6022      	str	r2, [r4, #0]
 8005c5c:	9303      	str	r3, [sp, #12]
 8005c5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c64:	ab09      	add	r3, sp, #36	@ 0x24
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	6861      	ldr	r1, [r4, #4]
 8005c6a:	ec49 8b10 	vmov	d0, r8, r9
 8005c6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c72:	4628      	mov	r0, r5
 8005c74:	f7ff fed6 	bl	8005a24 <__cvt>
 8005c78:	9b06      	ldr	r3, [sp, #24]
 8005c7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c7c:	2b47      	cmp	r3, #71	@ 0x47
 8005c7e:	4680      	mov	r8, r0
 8005c80:	d129      	bne.n	8005cd6 <_printf_float+0x172>
 8005c82:	1cc8      	adds	r0, r1, #3
 8005c84:	db02      	blt.n	8005c8c <_printf_float+0x128>
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	4299      	cmp	r1, r3
 8005c8a:	dd41      	ble.n	8005d10 <_printf_float+0x1ac>
 8005c8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c90:	fa5f fa8a 	uxtb.w	sl, sl
 8005c94:	3901      	subs	r1, #1
 8005c96:	4652      	mov	r2, sl
 8005c98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c9e:	f7ff ff26 	bl	8005aee <__exponent>
 8005ca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ca4:	1813      	adds	r3, r2, r0
 8005ca6:	2a01      	cmp	r2, #1
 8005ca8:	4681      	mov	r9, r0
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	dc02      	bgt.n	8005cb4 <_printf_float+0x150>
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	07d2      	lsls	r2, r2, #31
 8005cb2:	d501      	bpl.n	8005cb8 <_printf_float+0x154>
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	6123      	str	r3, [r4, #16]
 8005cb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0a2      	beq.n	8005c06 <_printf_float+0xa2>
 8005cc0:	232d      	movs	r3, #45	@ 0x2d
 8005cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cc6:	e79e      	b.n	8005c06 <_printf_float+0xa2>
 8005cc8:	9a06      	ldr	r2, [sp, #24]
 8005cca:	2a47      	cmp	r2, #71	@ 0x47
 8005ccc:	d1c2      	bne.n	8005c54 <_printf_float+0xf0>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1c0      	bne.n	8005c54 <_printf_float+0xf0>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e7bd      	b.n	8005c52 <_printf_float+0xee>
 8005cd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cda:	d9db      	bls.n	8005c94 <_printf_float+0x130>
 8005cdc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ce0:	d118      	bne.n	8005d14 <_printf_float+0x1b0>
 8005ce2:	2900      	cmp	r1, #0
 8005ce4:	6863      	ldr	r3, [r4, #4]
 8005ce6:	dd0b      	ble.n	8005d00 <_printf_float+0x19c>
 8005ce8:	6121      	str	r1, [r4, #16]
 8005cea:	b913      	cbnz	r3, 8005cf2 <_printf_float+0x18e>
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	07d0      	lsls	r0, r2, #31
 8005cf0:	d502      	bpl.n	8005cf8 <_printf_float+0x194>
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	440b      	add	r3, r1
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cfa:	f04f 0900 	mov.w	r9, #0
 8005cfe:	e7db      	b.n	8005cb8 <_printf_float+0x154>
 8005d00:	b913      	cbnz	r3, 8005d08 <_printf_float+0x1a4>
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	07d2      	lsls	r2, r2, #31
 8005d06:	d501      	bpl.n	8005d0c <_printf_float+0x1a8>
 8005d08:	3302      	adds	r3, #2
 8005d0a:	e7f4      	b.n	8005cf6 <_printf_float+0x192>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e7f2      	b.n	8005cf6 <_printf_float+0x192>
 8005d10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d16:	4299      	cmp	r1, r3
 8005d18:	db05      	blt.n	8005d26 <_printf_float+0x1c2>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	6121      	str	r1, [r4, #16]
 8005d1e:	07d8      	lsls	r0, r3, #31
 8005d20:	d5ea      	bpl.n	8005cf8 <_printf_float+0x194>
 8005d22:	1c4b      	adds	r3, r1, #1
 8005d24:	e7e7      	b.n	8005cf6 <_printf_float+0x192>
 8005d26:	2900      	cmp	r1, #0
 8005d28:	bfd4      	ite	le
 8005d2a:	f1c1 0202 	rsble	r2, r1, #2
 8005d2e:	2201      	movgt	r2, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	e7e0      	b.n	8005cf6 <_printf_float+0x192>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	055a      	lsls	r2, r3, #21
 8005d38:	d407      	bmi.n	8005d4a <_printf_float+0x1e6>
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	d12b      	bne.n	8005da0 <_printf_float+0x23c>
 8005d48:	e767      	b.n	8005c1a <_printf_float+0xb6>
 8005d4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d4e:	f240 80dd 	bls.w	8005f0c <_printf_float+0x3a8>
 8005d52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d56:	2200      	movs	r2, #0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f7fa fed5 	bl	8000b08 <__aeabi_dcmpeq>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d033      	beq.n	8005dca <_printf_float+0x266>
 8005d62:	4a37      	ldr	r2, [pc, #220]	@ (8005e40 <_printf_float+0x2dc>)
 8005d64:	2301      	movs	r3, #1
 8005d66:	4631      	mov	r1, r6
 8005d68:	4628      	mov	r0, r5
 8005d6a:	47b8      	blx	r7
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	f43f af54 	beq.w	8005c1a <_printf_float+0xb6>
 8005d72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d76:	4543      	cmp	r3, r8
 8005d78:	db02      	blt.n	8005d80 <_printf_float+0x21c>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	07d8      	lsls	r0, r3, #31
 8005d7e:	d50f      	bpl.n	8005da0 <_printf_float+0x23c>
 8005d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d84:	4631      	mov	r1, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	f43f af45 	beq.w	8005c1a <_printf_float+0xb6>
 8005d90:	f04f 0900 	mov.w	r9, #0
 8005d94:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d98:	f104 0a1a 	add.w	sl, r4, #26
 8005d9c:	45c8      	cmp	r8, r9
 8005d9e:	dc09      	bgt.n	8005db4 <_printf_float+0x250>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	079b      	lsls	r3, r3, #30
 8005da4:	f100 8103 	bmi.w	8005fae <_printf_float+0x44a>
 8005da8:	68e0      	ldr	r0, [r4, #12]
 8005daa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dac:	4298      	cmp	r0, r3
 8005dae:	bfb8      	it	lt
 8005db0:	4618      	movlt	r0, r3
 8005db2:	e734      	b.n	8005c1e <_printf_float+0xba>
 8005db4:	2301      	movs	r3, #1
 8005db6:	4652      	mov	r2, sl
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f43f af2b 	beq.w	8005c1a <_printf_float+0xb6>
 8005dc4:	f109 0901 	add.w	r9, r9, #1
 8005dc8:	e7e8      	b.n	8005d9c <_printf_float+0x238>
 8005dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dc39      	bgt.n	8005e44 <_printf_float+0x2e0>
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e40 <_printf_float+0x2dc>)
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	47b8      	blx	r7
 8005dda:	3001      	adds	r0, #1
 8005ddc:	f43f af1d 	beq.w	8005c1a <_printf_float+0xb6>
 8005de0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005de4:	ea59 0303 	orrs.w	r3, r9, r3
 8005de8:	d102      	bne.n	8005df0 <_printf_float+0x28c>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	07d9      	lsls	r1, r3, #31
 8005dee:	d5d7      	bpl.n	8005da0 <_printf_float+0x23c>
 8005df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df4:	4631      	mov	r1, r6
 8005df6:	4628      	mov	r0, r5
 8005df8:	47b8      	blx	r7
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	f43f af0d 	beq.w	8005c1a <_printf_float+0xb6>
 8005e00:	f04f 0a00 	mov.w	sl, #0
 8005e04:	f104 0b1a 	add.w	fp, r4, #26
 8005e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0a:	425b      	negs	r3, r3
 8005e0c:	4553      	cmp	r3, sl
 8005e0e:	dc01      	bgt.n	8005e14 <_printf_float+0x2b0>
 8005e10:	464b      	mov	r3, r9
 8005e12:	e793      	b.n	8005d3c <_printf_float+0x1d8>
 8005e14:	2301      	movs	r3, #1
 8005e16:	465a      	mov	r2, fp
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f aefb 	beq.w	8005c1a <_printf_float+0xb6>
 8005e24:	f10a 0a01 	add.w	sl, sl, #1
 8005e28:	e7ee      	b.n	8005e08 <_printf_float+0x2a4>
 8005e2a:	bf00      	nop
 8005e2c:	7fefffff 	.word	0x7fefffff
 8005e30:	0800a8c8 	.word	0x0800a8c8
 8005e34:	0800a8cc 	.word	0x0800a8cc
 8005e38:	0800a8d0 	.word	0x0800a8d0
 8005e3c:	0800a8d4 	.word	0x0800a8d4
 8005e40:	0800a8d8 	.word	0x0800a8d8
 8005e44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e4a:	4553      	cmp	r3, sl
 8005e4c:	bfa8      	it	ge
 8005e4e:	4653      	movge	r3, sl
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	4699      	mov	r9, r3
 8005e54:	dc36      	bgt.n	8005ec4 <_printf_float+0x360>
 8005e56:	f04f 0b00 	mov.w	fp, #0
 8005e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e5e:	f104 021a 	add.w	r2, r4, #26
 8005e62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e64:	9306      	str	r3, [sp, #24]
 8005e66:	eba3 0309 	sub.w	r3, r3, r9
 8005e6a:	455b      	cmp	r3, fp
 8005e6c:	dc31      	bgt.n	8005ed2 <_printf_float+0x36e>
 8005e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e70:	459a      	cmp	sl, r3
 8005e72:	dc3a      	bgt.n	8005eea <_printf_float+0x386>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07da      	lsls	r2, r3, #31
 8005e78:	d437      	bmi.n	8005eea <_printf_float+0x386>
 8005e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e7c:	ebaa 0903 	sub.w	r9, sl, r3
 8005e80:	9b06      	ldr	r3, [sp, #24]
 8005e82:	ebaa 0303 	sub.w	r3, sl, r3
 8005e86:	4599      	cmp	r9, r3
 8005e88:	bfa8      	it	ge
 8005e8a:	4699      	movge	r9, r3
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	dc33      	bgt.n	8005efa <_printf_float+0x396>
 8005e92:	f04f 0800 	mov.w	r8, #0
 8005e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e9a:	f104 0b1a 	add.w	fp, r4, #26
 8005e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ea4:	eba3 0309 	sub.w	r3, r3, r9
 8005ea8:	4543      	cmp	r3, r8
 8005eaa:	f77f af79 	ble.w	8005da0 <_printf_float+0x23c>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	465a      	mov	r2, fp
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f aeae 	beq.w	8005c1a <_printf_float+0xb6>
 8005ebe:	f108 0801 	add.w	r8, r8, #1
 8005ec2:	e7ec      	b.n	8005e9e <_printf_float+0x33a>
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d1c2      	bne.n	8005e56 <_printf_float+0x2f2>
 8005ed0:	e6a3      	b.n	8005c1a <_printf_float+0xb6>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	9206      	str	r2, [sp, #24]
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	f43f ae9c 	beq.w	8005c1a <_printf_float+0xb6>
 8005ee2:	9a06      	ldr	r2, [sp, #24]
 8005ee4:	f10b 0b01 	add.w	fp, fp, #1
 8005ee8:	e7bb      	b.n	8005e62 <_printf_float+0x2fe>
 8005eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b8      	blx	r7
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d1c0      	bne.n	8005e7a <_printf_float+0x316>
 8005ef8:	e68f      	b.n	8005c1a <_printf_float+0xb6>
 8005efa:	9a06      	ldr	r2, [sp, #24]
 8005efc:	464b      	mov	r3, r9
 8005efe:	4442      	add	r2, r8
 8005f00:	4631      	mov	r1, r6
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b8      	blx	r7
 8005f06:	3001      	adds	r0, #1
 8005f08:	d1c3      	bne.n	8005e92 <_printf_float+0x32e>
 8005f0a:	e686      	b.n	8005c1a <_printf_float+0xb6>
 8005f0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f10:	f1ba 0f01 	cmp.w	sl, #1
 8005f14:	dc01      	bgt.n	8005f1a <_printf_float+0x3b6>
 8005f16:	07db      	lsls	r3, r3, #31
 8005f18:	d536      	bpl.n	8005f88 <_printf_float+0x424>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	4631      	mov	r1, r6
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	f43f ae78 	beq.w	8005c1a <_printf_float+0xb6>
 8005f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f ae70 	beq.w	8005c1a <_printf_float+0xb6>
 8005f3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2300      	movs	r3, #0
 8005f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f46:	f7fa fddf 	bl	8000b08 <__aeabi_dcmpeq>
 8005f4a:	b9c0      	cbnz	r0, 8005f7e <_printf_float+0x41a>
 8005f4c:	4653      	mov	r3, sl
 8005f4e:	f108 0201 	add.w	r2, r8, #1
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d10c      	bne.n	8005f76 <_printf_float+0x412>
 8005f5c:	e65d      	b.n	8005c1a <_printf_float+0xb6>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	465a      	mov	r2, fp
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	f43f ae56 	beq.w	8005c1a <_printf_float+0xb6>
 8005f6e:	f108 0801 	add.w	r8, r8, #1
 8005f72:	45d0      	cmp	r8, sl
 8005f74:	dbf3      	blt.n	8005f5e <_printf_float+0x3fa>
 8005f76:	464b      	mov	r3, r9
 8005f78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f7c:	e6df      	b.n	8005d3e <_printf_float+0x1da>
 8005f7e:	f04f 0800 	mov.w	r8, #0
 8005f82:	f104 0b1a 	add.w	fp, r4, #26
 8005f86:	e7f4      	b.n	8005f72 <_printf_float+0x40e>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4642      	mov	r2, r8
 8005f8c:	e7e1      	b.n	8005f52 <_printf_float+0x3ee>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	464a      	mov	r2, r9
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f ae3e 	beq.w	8005c1a <_printf_float+0xb6>
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	68e3      	ldr	r3, [r4, #12]
 8005fa4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fa6:	1a5b      	subs	r3, r3, r1
 8005fa8:	4543      	cmp	r3, r8
 8005faa:	dcf0      	bgt.n	8005f8e <_printf_float+0x42a>
 8005fac:	e6fc      	b.n	8005da8 <_printf_float+0x244>
 8005fae:	f04f 0800 	mov.w	r8, #0
 8005fb2:	f104 0919 	add.w	r9, r4, #25
 8005fb6:	e7f4      	b.n	8005fa2 <_printf_float+0x43e>

08005fb8 <_printf_common>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	4698      	mov	r8, r3
 8005fc0:	688a      	ldr	r2, [r1, #8]
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bfb8      	it	lt
 8005fcc:	4613      	movlt	r3, r2
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	b10a      	cbz	r2, 8005fde <_printf_common+0x26>
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	0699      	lsls	r1, r3, #26
 8005fe2:	bf42      	ittt	mi
 8005fe4:	6833      	ldrmi	r3, [r6, #0]
 8005fe6:	3302      	addmi	r3, #2
 8005fe8:	6033      	strmi	r3, [r6, #0]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	f015 0506 	ands.w	r5, r5, #6
 8005ff0:	d106      	bne.n	8006000 <_printf_common+0x48>
 8005ff2:	f104 0a19 	add.w	sl, r4, #25
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	6832      	ldr	r2, [r6, #0]
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	dc26      	bgt.n	800604e <_printf_common+0x96>
 8006000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	3b00      	subs	r3, #0
 8006008:	bf18      	it	ne
 800600a:	2301      	movne	r3, #1
 800600c:	0692      	lsls	r2, r2, #26
 800600e:	d42b      	bmi.n	8006068 <_printf_common+0xb0>
 8006010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006014:	4641      	mov	r1, r8
 8006016:	4638      	mov	r0, r7
 8006018:	47c8      	blx	r9
 800601a:	3001      	adds	r0, #1
 800601c:	d01e      	beq.n	800605c <_printf_common+0xa4>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	6922      	ldr	r2, [r4, #16]
 8006022:	f003 0306 	and.w	r3, r3, #6
 8006026:	2b04      	cmp	r3, #4
 8006028:	bf02      	ittt	eq
 800602a:	68e5      	ldreq	r5, [r4, #12]
 800602c:	6833      	ldreq	r3, [r6, #0]
 800602e:	1aed      	subeq	r5, r5, r3
 8006030:	68a3      	ldr	r3, [r4, #8]
 8006032:	bf0c      	ite	eq
 8006034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006038:	2500      	movne	r5, #0
 800603a:	4293      	cmp	r3, r2
 800603c:	bfc4      	itt	gt
 800603e:	1a9b      	subgt	r3, r3, r2
 8006040:	18ed      	addgt	r5, r5, r3
 8006042:	2600      	movs	r6, #0
 8006044:	341a      	adds	r4, #26
 8006046:	42b5      	cmp	r5, r6
 8006048:	d11a      	bne.n	8006080 <_printf_common+0xc8>
 800604a:	2000      	movs	r0, #0
 800604c:	e008      	b.n	8006060 <_printf_common+0xa8>
 800604e:	2301      	movs	r3, #1
 8006050:	4652      	mov	r2, sl
 8006052:	4641      	mov	r1, r8
 8006054:	4638      	mov	r0, r7
 8006056:	47c8      	blx	r9
 8006058:	3001      	adds	r0, #1
 800605a:	d103      	bne.n	8006064 <_printf_common+0xac>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006064:	3501      	adds	r5, #1
 8006066:	e7c6      	b.n	8005ff6 <_printf_common+0x3e>
 8006068:	18e1      	adds	r1, r4, r3
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	2030      	movs	r0, #48	@ 0x30
 800606e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006072:	4422      	add	r2, r4
 8006074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800607c:	3302      	adds	r3, #2
 800607e:	e7c7      	b.n	8006010 <_printf_common+0x58>
 8006080:	2301      	movs	r3, #1
 8006082:	4622      	mov	r2, r4
 8006084:	4641      	mov	r1, r8
 8006086:	4638      	mov	r0, r7
 8006088:	47c8      	blx	r9
 800608a:	3001      	adds	r0, #1
 800608c:	d0e6      	beq.n	800605c <_printf_common+0xa4>
 800608e:	3601      	adds	r6, #1
 8006090:	e7d9      	b.n	8006046 <_printf_common+0x8e>
	...

08006094 <_printf_i>:
 8006094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	7e0f      	ldrb	r7, [r1, #24]
 800609a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800609c:	2f78      	cmp	r7, #120	@ 0x78
 800609e:	4691      	mov	r9, r2
 80060a0:	4680      	mov	r8, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	469a      	mov	sl, r3
 80060a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060aa:	d807      	bhi.n	80060bc <_printf_i+0x28>
 80060ac:	2f62      	cmp	r7, #98	@ 0x62
 80060ae:	d80a      	bhi.n	80060c6 <_printf_i+0x32>
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	f000 80d2 	beq.w	800625a <_printf_i+0x1c6>
 80060b6:	2f58      	cmp	r7, #88	@ 0x58
 80060b8:	f000 80b9 	beq.w	800622e <_printf_i+0x19a>
 80060bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060c4:	e03a      	b.n	800613c <_printf_i+0xa8>
 80060c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ca:	2b15      	cmp	r3, #21
 80060cc:	d8f6      	bhi.n	80060bc <_printf_i+0x28>
 80060ce:	a101      	add	r1, pc, #4	@ (adr r1, 80060d4 <_printf_i+0x40>)
 80060d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	08006141 	.word	0x08006141
 80060dc:	080060bd 	.word	0x080060bd
 80060e0:	080060bd 	.word	0x080060bd
 80060e4:	080060bd 	.word	0x080060bd
 80060e8:	080060bd 	.word	0x080060bd
 80060ec:	08006141 	.word	0x08006141
 80060f0:	080060bd 	.word	0x080060bd
 80060f4:	080060bd 	.word	0x080060bd
 80060f8:	080060bd 	.word	0x080060bd
 80060fc:	080060bd 	.word	0x080060bd
 8006100:	08006241 	.word	0x08006241
 8006104:	0800616b 	.word	0x0800616b
 8006108:	080061fb 	.word	0x080061fb
 800610c:	080060bd 	.word	0x080060bd
 8006110:	080060bd 	.word	0x080060bd
 8006114:	08006263 	.word	0x08006263
 8006118:	080060bd 	.word	0x080060bd
 800611c:	0800616b 	.word	0x0800616b
 8006120:	080060bd 	.word	0x080060bd
 8006124:	080060bd 	.word	0x080060bd
 8006128:	08006203 	.word	0x08006203
 800612c:	6833      	ldr	r3, [r6, #0]
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6032      	str	r2, [r6, #0]
 8006134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800613c:	2301      	movs	r3, #1
 800613e:	e09d      	b.n	800627c <_printf_i+0x1e8>
 8006140:	6833      	ldr	r3, [r6, #0]
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	6031      	str	r1, [r6, #0]
 8006148:	0606      	lsls	r6, r0, #24
 800614a:	d501      	bpl.n	8006150 <_printf_i+0xbc>
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	e003      	b.n	8006158 <_printf_i+0xc4>
 8006150:	0645      	lsls	r5, r0, #25
 8006152:	d5fb      	bpl.n	800614c <_printf_i+0xb8>
 8006154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006158:	2d00      	cmp	r5, #0
 800615a:	da03      	bge.n	8006164 <_printf_i+0xd0>
 800615c:	232d      	movs	r3, #45	@ 0x2d
 800615e:	426d      	negs	r5, r5
 8006160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006164:	4859      	ldr	r0, [pc, #356]	@ (80062cc <_printf_i+0x238>)
 8006166:	230a      	movs	r3, #10
 8006168:	e011      	b.n	800618e <_printf_i+0xfa>
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	0608      	lsls	r0, r1, #24
 8006170:	f853 5b04 	ldr.w	r5, [r3], #4
 8006174:	d402      	bmi.n	800617c <_printf_i+0xe8>
 8006176:	0649      	lsls	r1, r1, #25
 8006178:	bf48      	it	mi
 800617a:	b2ad      	uxthmi	r5, r5
 800617c:	2f6f      	cmp	r7, #111	@ 0x6f
 800617e:	4853      	ldr	r0, [pc, #332]	@ (80062cc <_printf_i+0x238>)
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	bf14      	ite	ne
 8006184:	230a      	movne	r3, #10
 8006186:	2308      	moveq	r3, #8
 8006188:	2100      	movs	r1, #0
 800618a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800618e:	6866      	ldr	r6, [r4, #4]
 8006190:	60a6      	str	r6, [r4, #8]
 8006192:	2e00      	cmp	r6, #0
 8006194:	bfa2      	ittt	ge
 8006196:	6821      	ldrge	r1, [r4, #0]
 8006198:	f021 0104 	bicge.w	r1, r1, #4
 800619c:	6021      	strge	r1, [r4, #0]
 800619e:	b90d      	cbnz	r5, 80061a4 <_printf_i+0x110>
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	d04b      	beq.n	800623c <_printf_i+0x1a8>
 80061a4:	4616      	mov	r6, r2
 80061a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061aa:	fb03 5711 	mls	r7, r3, r1, r5
 80061ae:	5dc7      	ldrb	r7, [r0, r7]
 80061b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061b4:	462f      	mov	r7, r5
 80061b6:	42bb      	cmp	r3, r7
 80061b8:	460d      	mov	r5, r1
 80061ba:	d9f4      	bls.n	80061a6 <_printf_i+0x112>
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d10b      	bne.n	80061d8 <_printf_i+0x144>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07df      	lsls	r7, r3, #31
 80061c4:	d508      	bpl.n	80061d8 <_printf_i+0x144>
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	6861      	ldr	r1, [r4, #4]
 80061ca:	4299      	cmp	r1, r3
 80061cc:	bfde      	ittt	le
 80061ce:	2330      	movle	r3, #48	@ 0x30
 80061d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d8:	1b92      	subs	r2, r2, r6
 80061da:	6122      	str	r2, [r4, #16]
 80061dc:	f8cd a000 	str.w	sl, [sp]
 80061e0:	464b      	mov	r3, r9
 80061e2:	aa03      	add	r2, sp, #12
 80061e4:	4621      	mov	r1, r4
 80061e6:	4640      	mov	r0, r8
 80061e8:	f7ff fee6 	bl	8005fb8 <_printf_common>
 80061ec:	3001      	adds	r0, #1
 80061ee:	d14a      	bne.n	8006286 <_printf_i+0x1f2>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	b004      	add	sp, #16
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	f043 0320 	orr.w	r3, r3, #32
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	4833      	ldr	r0, [pc, #204]	@ (80062d0 <_printf_i+0x23c>)
 8006204:	2778      	movs	r7, #120	@ 0x78
 8006206:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	6831      	ldr	r1, [r6, #0]
 800620e:	061f      	lsls	r7, r3, #24
 8006210:	f851 5b04 	ldr.w	r5, [r1], #4
 8006214:	d402      	bmi.n	800621c <_printf_i+0x188>
 8006216:	065f      	lsls	r7, r3, #25
 8006218:	bf48      	it	mi
 800621a:	b2ad      	uxthmi	r5, r5
 800621c:	6031      	str	r1, [r6, #0]
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	bf44      	itt	mi
 8006222:	f043 0320 	orrmi.w	r3, r3, #32
 8006226:	6023      	strmi	r3, [r4, #0]
 8006228:	b11d      	cbz	r5, 8006232 <_printf_i+0x19e>
 800622a:	2310      	movs	r3, #16
 800622c:	e7ac      	b.n	8006188 <_printf_i+0xf4>
 800622e:	4827      	ldr	r0, [pc, #156]	@ (80062cc <_printf_i+0x238>)
 8006230:	e7e9      	b.n	8006206 <_printf_i+0x172>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	f023 0320 	bic.w	r3, r3, #32
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	e7f6      	b.n	800622a <_printf_i+0x196>
 800623c:	4616      	mov	r6, r2
 800623e:	e7bd      	b.n	80061bc <_printf_i+0x128>
 8006240:	6833      	ldr	r3, [r6, #0]
 8006242:	6825      	ldr	r5, [r4, #0]
 8006244:	6961      	ldr	r1, [r4, #20]
 8006246:	1d18      	adds	r0, r3, #4
 8006248:	6030      	str	r0, [r6, #0]
 800624a:	062e      	lsls	r6, r5, #24
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	d501      	bpl.n	8006254 <_printf_i+0x1c0>
 8006250:	6019      	str	r1, [r3, #0]
 8006252:	e002      	b.n	800625a <_printf_i+0x1c6>
 8006254:	0668      	lsls	r0, r5, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0x1bc>
 8006258:	8019      	strh	r1, [r3, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	4616      	mov	r6, r2
 8006260:	e7bc      	b.n	80061dc <_printf_i+0x148>
 8006262:	6833      	ldr	r3, [r6, #0]
 8006264:	1d1a      	adds	r2, r3, #4
 8006266:	6032      	str	r2, [r6, #0]
 8006268:	681e      	ldr	r6, [r3, #0]
 800626a:	6862      	ldr	r2, [r4, #4]
 800626c:	2100      	movs	r1, #0
 800626e:	4630      	mov	r0, r6
 8006270:	f7f9 ffce 	bl	8000210 <memchr>
 8006274:	b108      	cbz	r0, 800627a <_printf_i+0x1e6>
 8006276:	1b80      	subs	r0, r0, r6
 8006278:	6060      	str	r0, [r4, #4]
 800627a:	6863      	ldr	r3, [r4, #4]
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	2300      	movs	r3, #0
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006284:	e7aa      	b.n	80061dc <_printf_i+0x148>
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d0ad      	beq.n	80061f0 <_printf_i+0x15c>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	079b      	lsls	r3, r3, #30
 8006298:	d413      	bmi.n	80062c2 <_printf_i+0x22e>
 800629a:	68e0      	ldr	r0, [r4, #12]
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	4298      	cmp	r0, r3
 80062a0:	bfb8      	it	lt
 80062a2:	4618      	movlt	r0, r3
 80062a4:	e7a6      	b.n	80061f4 <_printf_i+0x160>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4632      	mov	r2, r6
 80062aa:	4649      	mov	r1, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	47d0      	blx	sl
 80062b0:	3001      	adds	r0, #1
 80062b2:	d09d      	beq.n	80061f0 <_printf_i+0x15c>
 80062b4:	3501      	adds	r5, #1
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	9903      	ldr	r1, [sp, #12]
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	42ab      	cmp	r3, r5
 80062be:	dcf2      	bgt.n	80062a6 <_printf_i+0x212>
 80062c0:	e7eb      	b.n	800629a <_printf_i+0x206>
 80062c2:	2500      	movs	r5, #0
 80062c4:	f104 0619 	add.w	r6, r4, #25
 80062c8:	e7f5      	b.n	80062b6 <_printf_i+0x222>
 80062ca:	bf00      	nop
 80062cc:	0800a8da 	.word	0x0800a8da
 80062d0:	0800a8eb 	.word	0x0800a8eb

080062d4 <_scanf_float>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	b087      	sub	sp, #28
 80062da:	4617      	mov	r7, r2
 80062dc:	9303      	str	r3, [sp, #12]
 80062de:	688b      	ldr	r3, [r1, #8]
 80062e0:	1e5a      	subs	r2, r3, #1
 80062e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80062e6:	bf81      	itttt	hi
 80062e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80062ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80062f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80062f4:	608b      	strhi	r3, [r1, #8]
 80062f6:	680b      	ldr	r3, [r1, #0]
 80062f8:	460a      	mov	r2, r1
 80062fa:	f04f 0500 	mov.w	r5, #0
 80062fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006302:	f842 3b1c 	str.w	r3, [r2], #28
 8006306:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800630a:	4680      	mov	r8, r0
 800630c:	460c      	mov	r4, r1
 800630e:	bf98      	it	ls
 8006310:	f04f 0b00 	movls.w	fp, #0
 8006314:	9201      	str	r2, [sp, #4]
 8006316:	4616      	mov	r6, r2
 8006318:	46aa      	mov	sl, r5
 800631a:	46a9      	mov	r9, r5
 800631c:	9502      	str	r5, [sp, #8]
 800631e:	68a2      	ldr	r2, [r4, #8]
 8006320:	b152      	cbz	r2, 8006338 <_scanf_float+0x64>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b4e      	cmp	r3, #78	@ 0x4e
 8006328:	d864      	bhi.n	80063f4 <_scanf_float+0x120>
 800632a:	2b40      	cmp	r3, #64	@ 0x40
 800632c:	d83c      	bhi.n	80063a8 <_scanf_float+0xd4>
 800632e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006332:	b2c8      	uxtb	r0, r1
 8006334:	280e      	cmp	r0, #14
 8006336:	d93a      	bls.n	80063ae <_scanf_float+0xda>
 8006338:	f1b9 0f00 	cmp.w	r9, #0
 800633c:	d003      	beq.n	8006346 <_scanf_float+0x72>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800634a:	f1ba 0f01 	cmp.w	sl, #1
 800634e:	f200 8117 	bhi.w	8006580 <_scanf_float+0x2ac>
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	429e      	cmp	r6, r3
 8006356:	f200 8108 	bhi.w	800656a <_scanf_float+0x296>
 800635a:	2001      	movs	r0, #1
 800635c:	b007      	add	sp, #28
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006366:	2a0d      	cmp	r2, #13
 8006368:	d8e6      	bhi.n	8006338 <_scanf_float+0x64>
 800636a:	a101      	add	r1, pc, #4	@ (adr r1, 8006370 <_scanf_float+0x9c>)
 800636c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006370:	080064b7 	.word	0x080064b7
 8006374:	08006339 	.word	0x08006339
 8006378:	08006339 	.word	0x08006339
 800637c:	08006339 	.word	0x08006339
 8006380:	08006517 	.word	0x08006517
 8006384:	080064ef 	.word	0x080064ef
 8006388:	08006339 	.word	0x08006339
 800638c:	08006339 	.word	0x08006339
 8006390:	080064c5 	.word	0x080064c5
 8006394:	08006339 	.word	0x08006339
 8006398:	08006339 	.word	0x08006339
 800639c:	08006339 	.word	0x08006339
 80063a0:	08006339 	.word	0x08006339
 80063a4:	0800647d 	.word	0x0800647d
 80063a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80063ac:	e7db      	b.n	8006366 <_scanf_float+0x92>
 80063ae:	290e      	cmp	r1, #14
 80063b0:	d8c2      	bhi.n	8006338 <_scanf_float+0x64>
 80063b2:	a001      	add	r0, pc, #4	@ (adr r0, 80063b8 <_scanf_float+0xe4>)
 80063b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80063b8:	0800646d 	.word	0x0800646d
 80063bc:	08006339 	.word	0x08006339
 80063c0:	0800646d 	.word	0x0800646d
 80063c4:	08006503 	.word	0x08006503
 80063c8:	08006339 	.word	0x08006339
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006453 	.word	0x08006453
 80063d4:	08006453 	.word	0x08006453
 80063d8:	08006453 	.word	0x08006453
 80063dc:	08006453 	.word	0x08006453
 80063e0:	08006453 	.word	0x08006453
 80063e4:	08006453 	.word	0x08006453
 80063e8:	08006453 	.word	0x08006453
 80063ec:	08006453 	.word	0x08006453
 80063f0:	08006453 	.word	0x08006453
 80063f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80063f6:	d809      	bhi.n	800640c <_scanf_float+0x138>
 80063f8:	2b60      	cmp	r3, #96	@ 0x60
 80063fa:	d8b2      	bhi.n	8006362 <_scanf_float+0x8e>
 80063fc:	2b54      	cmp	r3, #84	@ 0x54
 80063fe:	d07b      	beq.n	80064f8 <_scanf_float+0x224>
 8006400:	2b59      	cmp	r3, #89	@ 0x59
 8006402:	d199      	bne.n	8006338 <_scanf_float+0x64>
 8006404:	2d07      	cmp	r5, #7
 8006406:	d197      	bne.n	8006338 <_scanf_float+0x64>
 8006408:	2508      	movs	r5, #8
 800640a:	e02c      	b.n	8006466 <_scanf_float+0x192>
 800640c:	2b74      	cmp	r3, #116	@ 0x74
 800640e:	d073      	beq.n	80064f8 <_scanf_float+0x224>
 8006410:	2b79      	cmp	r3, #121	@ 0x79
 8006412:	e7f6      	b.n	8006402 <_scanf_float+0x12e>
 8006414:	6821      	ldr	r1, [r4, #0]
 8006416:	05c8      	lsls	r0, r1, #23
 8006418:	d51b      	bpl.n	8006452 <_scanf_float+0x17e>
 800641a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800641e:	6021      	str	r1, [r4, #0]
 8006420:	f109 0901 	add.w	r9, r9, #1
 8006424:	f1bb 0f00 	cmp.w	fp, #0
 8006428:	d003      	beq.n	8006432 <_scanf_float+0x15e>
 800642a:	3201      	adds	r2, #1
 800642c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006430:	60a2      	str	r2, [r4, #8]
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	3b01      	subs	r3, #1
 8006436:	60a3      	str	r3, [r4, #8]
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	3301      	adds	r3, #1
 800643c:	6123      	str	r3, [r4, #16]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3b01      	subs	r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	607b      	str	r3, [r7, #4]
 8006446:	f340 8087 	ble.w	8006558 <_scanf_float+0x284>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	e765      	b.n	800631e <_scanf_float+0x4a>
 8006452:	eb1a 0105 	adds.w	r1, sl, r5
 8006456:	f47f af6f 	bne.w	8006338 <_scanf_float+0x64>
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006460:	6022      	str	r2, [r4, #0]
 8006462:	460d      	mov	r5, r1
 8006464:	468a      	mov	sl, r1
 8006466:	f806 3b01 	strb.w	r3, [r6], #1
 800646a:	e7e2      	b.n	8006432 <_scanf_float+0x15e>
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	0610      	lsls	r0, r2, #24
 8006470:	f57f af62 	bpl.w	8006338 <_scanf_float+0x64>
 8006474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006478:	6022      	str	r2, [r4, #0]
 800647a:	e7f4      	b.n	8006466 <_scanf_float+0x192>
 800647c:	f1ba 0f00 	cmp.w	sl, #0
 8006480:	d10e      	bne.n	80064a0 <_scanf_float+0x1cc>
 8006482:	f1b9 0f00 	cmp.w	r9, #0
 8006486:	d10e      	bne.n	80064a6 <_scanf_float+0x1d2>
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800648e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006492:	d108      	bne.n	80064a6 <_scanf_float+0x1d2>
 8006494:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006498:	6022      	str	r2, [r4, #0]
 800649a:	f04f 0a01 	mov.w	sl, #1
 800649e:	e7e2      	b.n	8006466 <_scanf_float+0x192>
 80064a0:	f1ba 0f02 	cmp.w	sl, #2
 80064a4:	d055      	beq.n	8006552 <_scanf_float+0x27e>
 80064a6:	2d01      	cmp	r5, #1
 80064a8:	d002      	beq.n	80064b0 <_scanf_float+0x1dc>
 80064aa:	2d04      	cmp	r5, #4
 80064ac:	f47f af44 	bne.w	8006338 <_scanf_float+0x64>
 80064b0:	3501      	adds	r5, #1
 80064b2:	b2ed      	uxtb	r5, r5
 80064b4:	e7d7      	b.n	8006466 <_scanf_float+0x192>
 80064b6:	f1ba 0f01 	cmp.w	sl, #1
 80064ba:	f47f af3d 	bne.w	8006338 <_scanf_float+0x64>
 80064be:	f04f 0a02 	mov.w	sl, #2
 80064c2:	e7d0      	b.n	8006466 <_scanf_float+0x192>
 80064c4:	b97d      	cbnz	r5, 80064e6 <_scanf_float+0x212>
 80064c6:	f1b9 0f00 	cmp.w	r9, #0
 80064ca:	f47f af38 	bne.w	800633e <_scanf_float+0x6a>
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80064d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80064d8:	f040 8108 	bne.w	80066ec <_scanf_float+0x418>
 80064dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80064e0:	6022      	str	r2, [r4, #0]
 80064e2:	2501      	movs	r5, #1
 80064e4:	e7bf      	b.n	8006466 <_scanf_float+0x192>
 80064e6:	2d03      	cmp	r5, #3
 80064e8:	d0e2      	beq.n	80064b0 <_scanf_float+0x1dc>
 80064ea:	2d05      	cmp	r5, #5
 80064ec:	e7de      	b.n	80064ac <_scanf_float+0x1d8>
 80064ee:	2d02      	cmp	r5, #2
 80064f0:	f47f af22 	bne.w	8006338 <_scanf_float+0x64>
 80064f4:	2503      	movs	r5, #3
 80064f6:	e7b6      	b.n	8006466 <_scanf_float+0x192>
 80064f8:	2d06      	cmp	r5, #6
 80064fa:	f47f af1d 	bne.w	8006338 <_scanf_float+0x64>
 80064fe:	2507      	movs	r5, #7
 8006500:	e7b1      	b.n	8006466 <_scanf_float+0x192>
 8006502:	6822      	ldr	r2, [r4, #0]
 8006504:	0591      	lsls	r1, r2, #22
 8006506:	f57f af17 	bpl.w	8006338 <_scanf_float+0x64>
 800650a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800650e:	6022      	str	r2, [r4, #0]
 8006510:	f8cd 9008 	str.w	r9, [sp, #8]
 8006514:	e7a7      	b.n	8006466 <_scanf_float+0x192>
 8006516:	6822      	ldr	r2, [r4, #0]
 8006518:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800651c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006520:	d006      	beq.n	8006530 <_scanf_float+0x25c>
 8006522:	0550      	lsls	r0, r2, #21
 8006524:	f57f af08 	bpl.w	8006338 <_scanf_float+0x64>
 8006528:	f1b9 0f00 	cmp.w	r9, #0
 800652c:	f000 80de 	beq.w	80066ec <_scanf_float+0x418>
 8006530:	0591      	lsls	r1, r2, #22
 8006532:	bf58      	it	pl
 8006534:	9902      	ldrpl	r1, [sp, #8]
 8006536:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800653a:	bf58      	it	pl
 800653c:	eba9 0101 	subpl.w	r1, r9, r1
 8006540:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006544:	bf58      	it	pl
 8006546:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800654a:	6022      	str	r2, [r4, #0]
 800654c:	f04f 0900 	mov.w	r9, #0
 8006550:	e789      	b.n	8006466 <_scanf_float+0x192>
 8006552:	f04f 0a03 	mov.w	sl, #3
 8006556:	e786      	b.n	8006466 <_scanf_float+0x192>
 8006558:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800655c:	4639      	mov	r1, r7
 800655e:	4640      	mov	r0, r8
 8006560:	4798      	blx	r3
 8006562:	2800      	cmp	r0, #0
 8006564:	f43f aedb 	beq.w	800631e <_scanf_float+0x4a>
 8006568:	e6e6      	b.n	8006338 <_scanf_float+0x64>
 800656a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800656e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006572:	463a      	mov	r2, r7
 8006574:	4640      	mov	r0, r8
 8006576:	4798      	blx	r3
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	3b01      	subs	r3, #1
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	e6e8      	b.n	8006352 <_scanf_float+0x7e>
 8006580:	1e6b      	subs	r3, r5, #1
 8006582:	2b06      	cmp	r3, #6
 8006584:	d824      	bhi.n	80065d0 <_scanf_float+0x2fc>
 8006586:	2d02      	cmp	r5, #2
 8006588:	d836      	bhi.n	80065f8 <_scanf_float+0x324>
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	429e      	cmp	r6, r3
 800658e:	f67f aee4 	bls.w	800635a <_scanf_float+0x86>
 8006592:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006596:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800659a:	463a      	mov	r2, r7
 800659c:	4640      	mov	r0, r8
 800659e:	4798      	blx	r3
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	6123      	str	r3, [r4, #16]
 80065a6:	e7f0      	b.n	800658a <_scanf_float+0x2b6>
 80065a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80065b0:	463a      	mov	r2, r7
 80065b2:	4640      	mov	r0, r8
 80065b4:	4798      	blx	r3
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	6123      	str	r3, [r4, #16]
 80065bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065c0:	fa5f fa8a 	uxtb.w	sl, sl
 80065c4:	f1ba 0f02 	cmp.w	sl, #2
 80065c8:	d1ee      	bne.n	80065a8 <_scanf_float+0x2d4>
 80065ca:	3d03      	subs	r5, #3
 80065cc:	b2ed      	uxtb	r5, r5
 80065ce:	1b76      	subs	r6, r6, r5
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	05da      	lsls	r2, r3, #23
 80065d4:	d530      	bpl.n	8006638 <_scanf_float+0x364>
 80065d6:	055b      	lsls	r3, r3, #21
 80065d8:	d511      	bpl.n	80065fe <_scanf_float+0x32a>
 80065da:	9b01      	ldr	r3, [sp, #4]
 80065dc:	429e      	cmp	r6, r3
 80065de:	f67f aebc 	bls.w	800635a <_scanf_float+0x86>
 80065e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065ea:	463a      	mov	r2, r7
 80065ec:	4640      	mov	r0, r8
 80065ee:	4798      	blx	r3
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	6123      	str	r3, [r4, #16]
 80065f6:	e7f0      	b.n	80065da <_scanf_float+0x306>
 80065f8:	46aa      	mov	sl, r5
 80065fa:	46b3      	mov	fp, r6
 80065fc:	e7de      	b.n	80065bc <_scanf_float+0x2e8>
 80065fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	2965      	cmp	r1, #101	@ 0x65
 8006606:	f103 33ff 	add.w	r3, r3, #4294967295
 800660a:	f106 35ff 	add.w	r5, r6, #4294967295
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	d00c      	beq.n	800662c <_scanf_float+0x358>
 8006612:	2945      	cmp	r1, #69	@ 0x45
 8006614:	d00a      	beq.n	800662c <_scanf_float+0x358>
 8006616:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800661a:	463a      	mov	r2, r7
 800661c:	4640      	mov	r0, r8
 800661e:	4798      	blx	r3
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006626:	3b01      	subs	r3, #1
 8006628:	1eb5      	subs	r5, r6, #2
 800662a:	6123      	str	r3, [r4, #16]
 800662c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006630:	463a      	mov	r2, r7
 8006632:	4640      	mov	r0, r8
 8006634:	4798      	blx	r3
 8006636:	462e      	mov	r6, r5
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	f012 0210 	ands.w	r2, r2, #16
 800663e:	d001      	beq.n	8006644 <_scanf_float+0x370>
 8006640:	2000      	movs	r0, #0
 8006642:	e68b      	b.n	800635c <_scanf_float+0x88>
 8006644:	7032      	strb	r2, [r6, #0]
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800664c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006650:	d11c      	bne.n	800668c <_scanf_float+0x3b8>
 8006652:	9b02      	ldr	r3, [sp, #8]
 8006654:	454b      	cmp	r3, r9
 8006656:	eba3 0209 	sub.w	r2, r3, r9
 800665a:	d123      	bne.n	80066a4 <_scanf_float+0x3d0>
 800665c:	9901      	ldr	r1, [sp, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	4640      	mov	r0, r8
 8006662:	f002 fbf9 	bl	8008e58 <_strtod_r>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	6821      	ldr	r1, [r4, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f011 0f02 	tst.w	r1, #2
 8006670:	ec57 6b10 	vmov	r6, r7, d0
 8006674:	f103 0204 	add.w	r2, r3, #4
 8006678:	d01f      	beq.n	80066ba <_scanf_float+0x3e6>
 800667a:	9903      	ldr	r1, [sp, #12]
 800667c:	600a      	str	r2, [r1, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	e9c3 6700 	strd	r6, r7, [r3]
 8006684:	68e3      	ldr	r3, [r4, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	60e3      	str	r3, [r4, #12]
 800668a:	e7d9      	b.n	8006640 <_scanf_float+0x36c>
 800668c:	9b04      	ldr	r3, [sp, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0e4      	beq.n	800665c <_scanf_float+0x388>
 8006692:	9905      	ldr	r1, [sp, #20]
 8006694:	230a      	movs	r3, #10
 8006696:	3101      	adds	r1, #1
 8006698:	4640      	mov	r0, r8
 800669a:	f002 fc5d 	bl	8008f58 <_strtol_r>
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	9e05      	ldr	r6, [sp, #20]
 80066a2:	1ac2      	subs	r2, r0, r3
 80066a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80066a8:	429e      	cmp	r6, r3
 80066aa:	bf28      	it	cs
 80066ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80066b0:	4910      	ldr	r1, [pc, #64]	@ (80066f4 <_scanf_float+0x420>)
 80066b2:	4630      	mov	r0, r6
 80066b4:	f000 f8e4 	bl	8006880 <siprintf>
 80066b8:	e7d0      	b.n	800665c <_scanf_float+0x388>
 80066ba:	f011 0f04 	tst.w	r1, #4
 80066be:	9903      	ldr	r1, [sp, #12]
 80066c0:	600a      	str	r2, [r1, #0]
 80066c2:	d1dc      	bne.n	800667e <_scanf_float+0x3aa>
 80066c4:	681d      	ldr	r5, [r3, #0]
 80066c6:	4632      	mov	r2, r6
 80066c8:	463b      	mov	r3, r7
 80066ca:	4630      	mov	r0, r6
 80066cc:	4639      	mov	r1, r7
 80066ce:	f7fa fa4d 	bl	8000b6c <__aeabi_dcmpun>
 80066d2:	b128      	cbz	r0, 80066e0 <_scanf_float+0x40c>
 80066d4:	4808      	ldr	r0, [pc, #32]	@ (80066f8 <_scanf_float+0x424>)
 80066d6:	f000 f9b7 	bl	8006a48 <nanf>
 80066da:	ed85 0a00 	vstr	s0, [r5]
 80066de:	e7d1      	b.n	8006684 <_scanf_float+0x3b0>
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	f7fa faa0 	bl	8000c28 <__aeabi_d2f>
 80066e8:	6028      	str	r0, [r5, #0]
 80066ea:	e7cb      	b.n	8006684 <_scanf_float+0x3b0>
 80066ec:	f04f 0900 	mov.w	r9, #0
 80066f0:	e629      	b.n	8006346 <_scanf_float+0x72>
 80066f2:	bf00      	nop
 80066f4:	0800a8fc 	.word	0x0800a8fc
 80066f8:	0800ac95 	.word	0x0800ac95

080066fc <std>:
 80066fc:	2300      	movs	r3, #0
 80066fe:	b510      	push	{r4, lr}
 8006700:	4604      	mov	r4, r0
 8006702:	e9c0 3300 	strd	r3, r3, [r0]
 8006706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800670a:	6083      	str	r3, [r0, #8]
 800670c:	8181      	strh	r1, [r0, #12]
 800670e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006710:	81c2      	strh	r2, [r0, #14]
 8006712:	6183      	str	r3, [r0, #24]
 8006714:	4619      	mov	r1, r3
 8006716:	2208      	movs	r2, #8
 8006718:	305c      	adds	r0, #92	@ 0x5c
 800671a:	f000 f914 	bl	8006946 <memset>
 800671e:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <std+0x58>)
 8006720:	6263      	str	r3, [r4, #36]	@ 0x24
 8006722:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <std+0x5c>)
 8006724:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006726:	4b0d      	ldr	r3, [pc, #52]	@ (800675c <std+0x60>)
 8006728:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800672a:	4b0d      	ldr	r3, [pc, #52]	@ (8006760 <std+0x64>)
 800672c:	6323      	str	r3, [r4, #48]	@ 0x30
 800672e:	4b0d      	ldr	r3, [pc, #52]	@ (8006764 <std+0x68>)
 8006730:	6224      	str	r4, [r4, #32]
 8006732:	429c      	cmp	r4, r3
 8006734:	d006      	beq.n	8006744 <std+0x48>
 8006736:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800673a:	4294      	cmp	r4, r2
 800673c:	d002      	beq.n	8006744 <std+0x48>
 800673e:	33d0      	adds	r3, #208	@ 0xd0
 8006740:	429c      	cmp	r4, r3
 8006742:	d105      	bne.n	8006750 <std+0x54>
 8006744:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800674c:	f000 b978 	b.w	8006a40 <__retarget_lock_init_recursive>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	bf00      	nop
 8006754:	080068c1 	.word	0x080068c1
 8006758:	080068e3 	.word	0x080068e3
 800675c:	0800691b 	.word	0x0800691b
 8006760:	0800693f 	.word	0x0800693f
 8006764:	20000718 	.word	0x20000718

08006768 <stdio_exit_handler>:
 8006768:	4a02      	ldr	r2, [pc, #8]	@ (8006774 <stdio_exit_handler+0xc>)
 800676a:	4903      	ldr	r1, [pc, #12]	@ (8006778 <stdio_exit_handler+0x10>)
 800676c:	4803      	ldr	r0, [pc, #12]	@ (800677c <stdio_exit_handler+0x14>)
 800676e:	f000 b869 	b.w	8006844 <_fwalk_sglue>
 8006772:	bf00      	nop
 8006774:	20000028 	.word	0x20000028
 8006778:	08009315 	.word	0x08009315
 800677c:	20000038 	.word	0x20000038

08006780 <cleanup_stdio>:
 8006780:	6841      	ldr	r1, [r0, #4]
 8006782:	4b0c      	ldr	r3, [pc, #48]	@ (80067b4 <cleanup_stdio+0x34>)
 8006784:	4299      	cmp	r1, r3
 8006786:	b510      	push	{r4, lr}
 8006788:	4604      	mov	r4, r0
 800678a:	d001      	beq.n	8006790 <cleanup_stdio+0x10>
 800678c:	f002 fdc2 	bl	8009314 <_fflush_r>
 8006790:	68a1      	ldr	r1, [r4, #8]
 8006792:	4b09      	ldr	r3, [pc, #36]	@ (80067b8 <cleanup_stdio+0x38>)
 8006794:	4299      	cmp	r1, r3
 8006796:	d002      	beq.n	800679e <cleanup_stdio+0x1e>
 8006798:	4620      	mov	r0, r4
 800679a:	f002 fdbb 	bl	8009314 <_fflush_r>
 800679e:	68e1      	ldr	r1, [r4, #12]
 80067a0:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <cleanup_stdio+0x3c>)
 80067a2:	4299      	cmp	r1, r3
 80067a4:	d004      	beq.n	80067b0 <cleanup_stdio+0x30>
 80067a6:	4620      	mov	r0, r4
 80067a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ac:	f002 bdb2 	b.w	8009314 <_fflush_r>
 80067b0:	bd10      	pop	{r4, pc}
 80067b2:	bf00      	nop
 80067b4:	20000718 	.word	0x20000718
 80067b8:	20000780 	.word	0x20000780
 80067bc:	200007e8 	.word	0x200007e8

080067c0 <global_stdio_init.part.0>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4b0b      	ldr	r3, [pc, #44]	@ (80067f0 <global_stdio_init.part.0+0x30>)
 80067c4:	4c0b      	ldr	r4, [pc, #44]	@ (80067f4 <global_stdio_init.part.0+0x34>)
 80067c6:	4a0c      	ldr	r2, [pc, #48]	@ (80067f8 <global_stdio_init.part.0+0x38>)
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	4620      	mov	r0, r4
 80067cc:	2200      	movs	r2, #0
 80067ce:	2104      	movs	r1, #4
 80067d0:	f7ff ff94 	bl	80066fc <std>
 80067d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067d8:	2201      	movs	r2, #1
 80067da:	2109      	movs	r1, #9
 80067dc:	f7ff ff8e 	bl	80066fc <std>
 80067e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067e4:	2202      	movs	r2, #2
 80067e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ea:	2112      	movs	r1, #18
 80067ec:	f7ff bf86 	b.w	80066fc <std>
 80067f0:	20000850 	.word	0x20000850
 80067f4:	20000718 	.word	0x20000718
 80067f8:	08006769 	.word	0x08006769

080067fc <__sfp_lock_acquire>:
 80067fc:	4801      	ldr	r0, [pc, #4]	@ (8006804 <__sfp_lock_acquire+0x8>)
 80067fe:	f000 b920 	b.w	8006a42 <__retarget_lock_acquire_recursive>
 8006802:	bf00      	nop
 8006804:	20000859 	.word	0x20000859

08006808 <__sfp_lock_release>:
 8006808:	4801      	ldr	r0, [pc, #4]	@ (8006810 <__sfp_lock_release+0x8>)
 800680a:	f000 b91b 	b.w	8006a44 <__retarget_lock_release_recursive>
 800680e:	bf00      	nop
 8006810:	20000859 	.word	0x20000859

08006814 <__sinit>:
 8006814:	b510      	push	{r4, lr}
 8006816:	4604      	mov	r4, r0
 8006818:	f7ff fff0 	bl	80067fc <__sfp_lock_acquire>
 800681c:	6a23      	ldr	r3, [r4, #32]
 800681e:	b11b      	cbz	r3, 8006828 <__sinit+0x14>
 8006820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006824:	f7ff bff0 	b.w	8006808 <__sfp_lock_release>
 8006828:	4b04      	ldr	r3, [pc, #16]	@ (800683c <__sinit+0x28>)
 800682a:	6223      	str	r3, [r4, #32]
 800682c:	4b04      	ldr	r3, [pc, #16]	@ (8006840 <__sinit+0x2c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1f5      	bne.n	8006820 <__sinit+0xc>
 8006834:	f7ff ffc4 	bl	80067c0 <global_stdio_init.part.0>
 8006838:	e7f2      	b.n	8006820 <__sinit+0xc>
 800683a:	bf00      	nop
 800683c:	08006781 	.word	0x08006781
 8006840:	20000850 	.word	0x20000850

08006844 <_fwalk_sglue>:
 8006844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006848:	4607      	mov	r7, r0
 800684a:	4688      	mov	r8, r1
 800684c:	4614      	mov	r4, r2
 800684e:	2600      	movs	r6, #0
 8006850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006854:	f1b9 0901 	subs.w	r9, r9, #1
 8006858:	d505      	bpl.n	8006866 <_fwalk_sglue+0x22>
 800685a:	6824      	ldr	r4, [r4, #0]
 800685c:	2c00      	cmp	r4, #0
 800685e:	d1f7      	bne.n	8006850 <_fwalk_sglue+0xc>
 8006860:	4630      	mov	r0, r6
 8006862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d907      	bls.n	800687c <_fwalk_sglue+0x38>
 800686c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006870:	3301      	adds	r3, #1
 8006872:	d003      	beq.n	800687c <_fwalk_sglue+0x38>
 8006874:	4629      	mov	r1, r5
 8006876:	4638      	mov	r0, r7
 8006878:	47c0      	blx	r8
 800687a:	4306      	orrs	r6, r0
 800687c:	3568      	adds	r5, #104	@ 0x68
 800687e:	e7e9      	b.n	8006854 <_fwalk_sglue+0x10>

08006880 <siprintf>:
 8006880:	b40e      	push	{r1, r2, r3}
 8006882:	b500      	push	{lr}
 8006884:	b09c      	sub	sp, #112	@ 0x70
 8006886:	ab1d      	add	r3, sp, #116	@ 0x74
 8006888:	9002      	str	r0, [sp, #8]
 800688a:	9006      	str	r0, [sp, #24]
 800688c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006890:	4809      	ldr	r0, [pc, #36]	@ (80068b8 <siprintf+0x38>)
 8006892:	9107      	str	r1, [sp, #28]
 8006894:	9104      	str	r1, [sp, #16]
 8006896:	4909      	ldr	r1, [pc, #36]	@ (80068bc <siprintf+0x3c>)
 8006898:	f853 2b04 	ldr.w	r2, [r3], #4
 800689c:	9105      	str	r1, [sp, #20]
 800689e:	6800      	ldr	r0, [r0, #0]
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	a902      	add	r1, sp, #8
 80068a4:	f002 fbb6 	bl	8009014 <_svfiprintf_r>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	b01c      	add	sp, #112	@ 0x70
 80068b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068b4:	b003      	add	sp, #12
 80068b6:	4770      	bx	lr
 80068b8:	20000034 	.word	0x20000034
 80068bc:	ffff0208 	.word	0xffff0208

080068c0 <__sread>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	460c      	mov	r4, r1
 80068c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c8:	f000 f86c 	bl	80069a4 <_read_r>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	bfab      	itete	ge
 80068d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068d2:	89a3      	ldrhlt	r3, [r4, #12]
 80068d4:	181b      	addge	r3, r3, r0
 80068d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068da:	bfac      	ite	ge
 80068dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068de:	81a3      	strhlt	r3, [r4, #12]
 80068e0:	bd10      	pop	{r4, pc}

080068e2 <__swrite>:
 80068e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e6:	461f      	mov	r7, r3
 80068e8:	898b      	ldrh	r3, [r1, #12]
 80068ea:	05db      	lsls	r3, r3, #23
 80068ec:	4605      	mov	r5, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	4616      	mov	r6, r2
 80068f2:	d505      	bpl.n	8006900 <__swrite+0x1e>
 80068f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f8:	2302      	movs	r3, #2
 80068fa:	2200      	movs	r2, #0
 80068fc:	f000 f840 	bl	8006980 <_lseek_r>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	4632      	mov	r2, r6
 800690e:	463b      	mov	r3, r7
 8006910:	4628      	mov	r0, r5
 8006912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006916:	f000 b857 	b.w	80069c8 <_write_r>

0800691a <__sseek>:
 800691a:	b510      	push	{r4, lr}
 800691c:	460c      	mov	r4, r1
 800691e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006922:	f000 f82d 	bl	8006980 <_lseek_r>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	bf15      	itete	ne
 800692c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800692e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006936:	81a3      	strheq	r3, [r4, #12]
 8006938:	bf18      	it	ne
 800693a:	81a3      	strhne	r3, [r4, #12]
 800693c:	bd10      	pop	{r4, pc}

0800693e <__sclose>:
 800693e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006942:	f000 b80d 	b.w	8006960 <_close_r>

08006946 <memset>:
 8006946:	4402      	add	r2, r0
 8006948:	4603      	mov	r3, r0
 800694a:	4293      	cmp	r3, r2
 800694c:	d100      	bne.n	8006950 <memset+0xa>
 800694e:	4770      	bx	lr
 8006950:	f803 1b01 	strb.w	r1, [r3], #1
 8006954:	e7f9      	b.n	800694a <memset+0x4>
	...

08006958 <_localeconv_r>:
 8006958:	4800      	ldr	r0, [pc, #0]	@ (800695c <_localeconv_r+0x4>)
 800695a:	4770      	bx	lr
 800695c:	20000174 	.word	0x20000174

08006960 <_close_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d06      	ldr	r5, [pc, #24]	@ (800697c <_close_r+0x1c>)
 8006964:	2300      	movs	r3, #0
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	602b      	str	r3, [r5, #0]
 800696c:	f7fa ff95 	bl	800189a <_close>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_close_r+0x1a>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	b103      	cbz	r3, 800697a <_close_r+0x1a>
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	20000854 	.word	0x20000854

08006980 <_lseek_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4d07      	ldr	r5, [pc, #28]	@ (80069a0 <_lseek_r+0x20>)
 8006984:	4604      	mov	r4, r0
 8006986:	4608      	mov	r0, r1
 8006988:	4611      	mov	r1, r2
 800698a:	2200      	movs	r2, #0
 800698c:	602a      	str	r2, [r5, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	f7fa ffaa 	bl	80018e8 <_lseek>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_lseek_r+0x1e>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_lseek_r+0x1e>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	20000854 	.word	0x20000854

080069a4 <_read_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4d07      	ldr	r5, [pc, #28]	@ (80069c4 <_read_r+0x20>)
 80069a8:	4604      	mov	r4, r0
 80069aa:	4608      	mov	r0, r1
 80069ac:	4611      	mov	r1, r2
 80069ae:	2200      	movs	r2, #0
 80069b0:	602a      	str	r2, [r5, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f7fa ff38 	bl	8001828 <_read>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_read_r+0x1e>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_read_r+0x1e>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20000854 	.word	0x20000854

080069c8 <_write_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d07      	ldr	r5, [pc, #28]	@ (80069e8 <_write_r+0x20>)
 80069cc:	4604      	mov	r4, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	602a      	str	r2, [r5, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fa ff43 	bl	8001862 <_write>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_write_r+0x1e>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_write_r+0x1e>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20000854 	.word	0x20000854

080069ec <__errno>:
 80069ec:	4b01      	ldr	r3, [pc, #4]	@ (80069f4 <__errno+0x8>)
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000034 	.word	0x20000034

080069f8 <__libc_init_array>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006a30 <__libc_init_array+0x38>)
 80069fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006a34 <__libc_init_array+0x3c>)
 80069fe:	1b64      	subs	r4, r4, r5
 8006a00:	10a4      	asrs	r4, r4, #2
 8006a02:	2600      	movs	r6, #0
 8006a04:	42a6      	cmp	r6, r4
 8006a06:	d109      	bne.n	8006a1c <__libc_init_array+0x24>
 8006a08:	4d0b      	ldr	r5, [pc, #44]	@ (8006a38 <__libc_init_array+0x40>)
 8006a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8006a3c <__libc_init_array+0x44>)
 8006a0c:	f003 fb72 	bl	800a0f4 <_init>
 8006a10:	1b64      	subs	r4, r4, r5
 8006a12:	10a4      	asrs	r4, r4, #2
 8006a14:	2600      	movs	r6, #0
 8006a16:	42a6      	cmp	r6, r4
 8006a18:	d105      	bne.n	8006a26 <__libc_init_array+0x2e>
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a20:	4798      	blx	r3
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7ee      	b.n	8006a04 <__libc_init_array+0xc>
 8006a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2a:	4798      	blx	r3
 8006a2c:	3601      	adds	r6, #1
 8006a2e:	e7f2      	b.n	8006a16 <__libc_init_array+0x1e>
 8006a30:	0800ad00 	.word	0x0800ad00
 8006a34:	0800ad00 	.word	0x0800ad00
 8006a38:	0800ad00 	.word	0x0800ad00
 8006a3c:	0800ad04 	.word	0x0800ad04

08006a40 <__retarget_lock_init_recursive>:
 8006a40:	4770      	bx	lr

08006a42 <__retarget_lock_acquire_recursive>:
 8006a42:	4770      	bx	lr

08006a44 <__retarget_lock_release_recursive>:
 8006a44:	4770      	bx	lr
	...

08006a48 <nanf>:
 8006a48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006a50 <nanf+0x8>
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	7fc00000 	.word	0x7fc00000

08006a54 <quorem>:
 8006a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	6903      	ldr	r3, [r0, #16]
 8006a5a:	690c      	ldr	r4, [r1, #16]
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	4607      	mov	r7, r0
 8006a60:	db7e      	blt.n	8006b60 <quorem+0x10c>
 8006a62:	3c01      	subs	r4, #1
 8006a64:	f101 0814 	add.w	r8, r1, #20
 8006a68:	00a3      	lsls	r3, r4, #2
 8006a6a:	f100 0514 	add.w	r5, r0, #20
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	429a      	cmp	r2, r3
 8006a82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a86:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a8a:	d32e      	bcc.n	8006aea <quorem+0x96>
 8006a8c:	f04f 0a00 	mov.w	sl, #0
 8006a90:	46c4      	mov	ip, r8
 8006a92:	46ae      	mov	lr, r5
 8006a94:	46d3      	mov	fp, sl
 8006a96:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a9a:	b298      	uxth	r0, r3
 8006a9c:	fb06 a000 	mla	r0, r6, r0, sl
 8006aa0:	0c02      	lsrs	r2, r0, #16
 8006aa2:	0c1b      	lsrs	r3, r3, #16
 8006aa4:	fb06 2303 	mla	r3, r6, r3, r2
 8006aa8:	f8de 2000 	ldr.w	r2, [lr]
 8006aac:	b280      	uxth	r0, r0
 8006aae:	b292      	uxth	r2, r2
 8006ab0:	1a12      	subs	r2, r2, r0
 8006ab2:	445a      	add	r2, fp
 8006ab4:	f8de 0000 	ldr.w	r0, [lr]
 8006ab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ac2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ac6:	b292      	uxth	r2, r2
 8006ac8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006acc:	45e1      	cmp	r9, ip
 8006ace:	f84e 2b04 	str.w	r2, [lr], #4
 8006ad2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ad6:	d2de      	bcs.n	8006a96 <quorem+0x42>
 8006ad8:	9b00      	ldr	r3, [sp, #0]
 8006ada:	58eb      	ldr	r3, [r5, r3]
 8006adc:	b92b      	cbnz	r3, 8006aea <quorem+0x96>
 8006ade:	9b01      	ldr	r3, [sp, #4]
 8006ae0:	3b04      	subs	r3, #4
 8006ae2:	429d      	cmp	r5, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	d32f      	bcc.n	8006b48 <quorem+0xf4>
 8006ae8:	613c      	str	r4, [r7, #16]
 8006aea:	4638      	mov	r0, r7
 8006aec:	f001 f9c4 	bl	8007e78 <__mcmp>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	db25      	blt.n	8006b40 <quorem+0xec>
 8006af4:	4629      	mov	r1, r5
 8006af6:	2000      	movs	r0, #0
 8006af8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006afc:	f8d1 c000 	ldr.w	ip, [r1]
 8006b00:	fa1f fe82 	uxth.w	lr, r2
 8006b04:	fa1f f38c 	uxth.w	r3, ip
 8006b08:	eba3 030e 	sub.w	r3, r3, lr
 8006b0c:	4403      	add	r3, r0
 8006b0e:	0c12      	lsrs	r2, r2, #16
 8006b10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b1e:	45c1      	cmp	r9, r8
 8006b20:	f841 3b04 	str.w	r3, [r1], #4
 8006b24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b28:	d2e6      	bcs.n	8006af8 <quorem+0xa4>
 8006b2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b32:	b922      	cbnz	r2, 8006b3e <quorem+0xea>
 8006b34:	3b04      	subs	r3, #4
 8006b36:	429d      	cmp	r5, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	d30b      	bcc.n	8006b54 <quorem+0x100>
 8006b3c:	613c      	str	r4, [r7, #16]
 8006b3e:	3601      	adds	r6, #1
 8006b40:	4630      	mov	r0, r6
 8006b42:	b003      	add	sp, #12
 8006b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	3b04      	subs	r3, #4
 8006b4c:	2a00      	cmp	r2, #0
 8006b4e:	d1cb      	bne.n	8006ae8 <quorem+0x94>
 8006b50:	3c01      	subs	r4, #1
 8006b52:	e7c6      	b.n	8006ae2 <quorem+0x8e>
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	3b04      	subs	r3, #4
 8006b58:	2a00      	cmp	r2, #0
 8006b5a:	d1ef      	bne.n	8006b3c <quorem+0xe8>
 8006b5c:	3c01      	subs	r4, #1
 8006b5e:	e7ea      	b.n	8006b36 <quorem+0xe2>
 8006b60:	2000      	movs	r0, #0
 8006b62:	e7ee      	b.n	8006b42 <quorem+0xee>
 8006b64:	0000      	movs	r0, r0
	...

08006b68 <_dtoa_r>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	69c7      	ldr	r7, [r0, #28]
 8006b6e:	b099      	sub	sp, #100	@ 0x64
 8006b70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b74:	ec55 4b10 	vmov	r4, r5, d0
 8006b78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006b7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b7c:	4683      	mov	fp, r0
 8006b7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b82:	b97f      	cbnz	r7, 8006ba4 <_dtoa_r+0x3c>
 8006b84:	2010      	movs	r0, #16
 8006b86:	f000 fdfd 	bl	8007784 <malloc>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006b90:	b920      	cbnz	r0, 8006b9c <_dtoa_r+0x34>
 8006b92:	4ba7      	ldr	r3, [pc, #668]	@ (8006e30 <_dtoa_r+0x2c8>)
 8006b94:	21ef      	movs	r1, #239	@ 0xef
 8006b96:	48a7      	ldr	r0, [pc, #668]	@ (8006e34 <_dtoa_r+0x2cc>)
 8006b98:	f002 fc36 	bl	8009408 <__assert_func>
 8006b9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ba0:	6007      	str	r7, [r0, #0]
 8006ba2:	60c7      	str	r7, [r0, #12]
 8006ba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ba8:	6819      	ldr	r1, [r3, #0]
 8006baa:	b159      	cbz	r1, 8006bc4 <_dtoa_r+0x5c>
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	604a      	str	r2, [r1, #4]
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	4093      	lsls	r3, r2
 8006bb4:	608b      	str	r3, [r1, #8]
 8006bb6:	4658      	mov	r0, fp
 8006bb8:	f000 feda 	bl	8007970 <_Bfree>
 8006bbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	1e2b      	subs	r3, r5, #0
 8006bc6:	bfb9      	ittee	lt
 8006bc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006bcc:	9303      	strlt	r3, [sp, #12]
 8006bce:	2300      	movge	r3, #0
 8006bd0:	6033      	strge	r3, [r6, #0]
 8006bd2:	9f03      	ldr	r7, [sp, #12]
 8006bd4:	4b98      	ldr	r3, [pc, #608]	@ (8006e38 <_dtoa_r+0x2d0>)
 8006bd6:	bfbc      	itt	lt
 8006bd8:	2201      	movlt	r2, #1
 8006bda:	6032      	strlt	r2, [r6, #0]
 8006bdc:	43bb      	bics	r3, r7
 8006bde:	d112      	bne.n	8006c06 <_dtoa_r+0x9e>
 8006be0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006be2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bec:	4323      	orrs	r3, r4
 8006bee:	f000 854d 	beq.w	800768c <_dtoa_r+0xb24>
 8006bf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006e4c <_dtoa_r+0x2e4>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 854f 	beq.w	800769c <_dtoa_r+0xb34>
 8006bfe:	f10a 0303 	add.w	r3, sl, #3
 8006c02:	f000 bd49 	b.w	8007698 <_dtoa_r+0xb30>
 8006c06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	ec51 0b17 	vmov	r0, r1, d7
 8006c10:	2300      	movs	r3, #0
 8006c12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006c16:	f7f9 ff77 	bl	8000b08 <__aeabi_dcmpeq>
 8006c1a:	4680      	mov	r8, r0
 8006c1c:	b158      	cbz	r0, 8006c36 <_dtoa_r+0xce>
 8006c1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c20:	2301      	movs	r3, #1
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c26:	b113      	cbz	r3, 8006c2e <_dtoa_r+0xc6>
 8006c28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c2a:	4b84      	ldr	r3, [pc, #528]	@ (8006e3c <_dtoa_r+0x2d4>)
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006e50 <_dtoa_r+0x2e8>
 8006c32:	f000 bd33 	b.w	800769c <_dtoa_r+0xb34>
 8006c36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006c3a:	aa16      	add	r2, sp, #88	@ 0x58
 8006c3c:	a917      	add	r1, sp, #92	@ 0x5c
 8006c3e:	4658      	mov	r0, fp
 8006c40:	f001 fa3a 	bl	80080b8 <__d2b>
 8006c44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006c48:	4681      	mov	r9, r0
 8006c4a:	2e00      	cmp	r6, #0
 8006c4c:	d077      	beq.n	8006d3e <_dtoa_r+0x1d6>
 8006c4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c68:	4619      	mov	r1, r3
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	4b74      	ldr	r3, [pc, #464]	@ (8006e40 <_dtoa_r+0x2d8>)
 8006c6e:	f7f9 fb2b 	bl	80002c8 <__aeabi_dsub>
 8006c72:	a369      	add	r3, pc, #420	@ (adr r3, 8006e18 <_dtoa_r+0x2b0>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f7f9 fcde 	bl	8000638 <__aeabi_dmul>
 8006c7c:	a368      	add	r3, pc, #416	@ (adr r3, 8006e20 <_dtoa_r+0x2b8>)
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	f7f9 fb23 	bl	80002cc <__adddf3>
 8006c86:	4604      	mov	r4, r0
 8006c88:	4630      	mov	r0, r6
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	f7f9 fc6a 	bl	8000564 <__aeabi_i2d>
 8006c90:	a365      	add	r3, pc, #404	@ (adr r3, 8006e28 <_dtoa_r+0x2c0>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	f7f9 fccf 	bl	8000638 <__aeabi_dmul>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 fb13 	bl	80002cc <__adddf3>
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	460d      	mov	r5, r1
 8006caa:	f7f9 ff75 	bl	8000b98 <__aeabi_d2iz>
 8006cae:	2200      	movs	r2, #0
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	f7f9 ff30 	bl	8000b1c <__aeabi_dcmplt>
 8006cbc:	b140      	cbz	r0, 8006cd0 <_dtoa_r+0x168>
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f7f9 fc50 	bl	8000564 <__aeabi_i2d>
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	f7f9 ff1e 	bl	8000b08 <__aeabi_dcmpeq>
 8006ccc:	b900      	cbnz	r0, 8006cd0 <_dtoa_r+0x168>
 8006cce:	3f01      	subs	r7, #1
 8006cd0:	2f16      	cmp	r7, #22
 8006cd2:	d851      	bhi.n	8006d78 <_dtoa_r+0x210>
 8006cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8006e44 <_dtoa_r+0x2dc>)
 8006cd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ce2:	f7f9 ff1b 	bl	8000b1c <__aeabi_dcmplt>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d048      	beq.n	8006d7c <_dtoa_r+0x214>
 8006cea:	3f01      	subs	r7, #1
 8006cec:	2300      	movs	r3, #0
 8006cee:	9312      	str	r3, [sp, #72]	@ 0x48
 8006cf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006cf2:	1b9b      	subs	r3, r3, r6
 8006cf4:	1e5a      	subs	r2, r3, #1
 8006cf6:	bf44      	itt	mi
 8006cf8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006cfc:	2300      	movmi	r3, #0
 8006cfe:	9208      	str	r2, [sp, #32]
 8006d00:	bf54      	ite	pl
 8006d02:	f04f 0800 	movpl.w	r8, #0
 8006d06:	9308      	strmi	r3, [sp, #32]
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	db39      	blt.n	8006d80 <_dtoa_r+0x218>
 8006d0c:	9b08      	ldr	r3, [sp, #32]
 8006d0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006d10:	443b      	add	r3, r7
 8006d12:	9308      	str	r3, [sp, #32]
 8006d14:	2300      	movs	r3, #0
 8006d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d1a:	2b09      	cmp	r3, #9
 8006d1c:	d864      	bhi.n	8006de8 <_dtoa_r+0x280>
 8006d1e:	2b05      	cmp	r3, #5
 8006d20:	bfc4      	itt	gt
 8006d22:	3b04      	subgt	r3, #4
 8006d24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d28:	f1a3 0302 	sub.w	r3, r3, #2
 8006d2c:	bfcc      	ite	gt
 8006d2e:	2400      	movgt	r4, #0
 8006d30:	2401      	movle	r4, #1
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d863      	bhi.n	8006dfe <_dtoa_r+0x296>
 8006d36:	e8df f003 	tbb	[pc, r3]
 8006d3a:	372a      	.short	0x372a
 8006d3c:	5535      	.short	0x5535
 8006d3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006d42:	441e      	add	r6, r3
 8006d44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	bfc1      	itttt	gt
 8006d4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d50:	409f      	lslgt	r7, r3
 8006d52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d5a:	bfd6      	itet	le
 8006d5c:	f1c3 0320 	rsble	r3, r3, #32
 8006d60:	ea47 0003 	orrgt.w	r0, r7, r3
 8006d64:	fa04 f003 	lslle.w	r0, r4, r3
 8006d68:	f7f9 fbec 	bl	8000544 <__aeabi_ui2d>
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d72:	3e01      	subs	r6, #1
 8006d74:	9214      	str	r2, [sp, #80]	@ 0x50
 8006d76:	e777      	b.n	8006c68 <_dtoa_r+0x100>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e7b8      	b.n	8006cee <_dtoa_r+0x186>
 8006d7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006d7e:	e7b7      	b.n	8006cf0 <_dtoa_r+0x188>
 8006d80:	427b      	negs	r3, r7
 8006d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d84:	2300      	movs	r3, #0
 8006d86:	eba8 0807 	sub.w	r8, r8, r7
 8006d8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d8c:	e7c4      	b.n	8006d18 <_dtoa_r+0x1b0>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc35      	bgt.n	8006e04 <_dtoa_r+0x29c>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	9307      	str	r3, [sp, #28]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006da2:	e00b      	b.n	8006dbc <_dtoa_r+0x254>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e7f3      	b.n	8006d90 <_dtoa_r+0x228>
 8006da8:	2300      	movs	r3, #0
 8006daa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dae:	18fb      	adds	r3, r7, r3
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	9307      	str	r3, [sp, #28]
 8006db8:	bfb8      	it	lt
 8006dba:	2301      	movlt	r3, #1
 8006dbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	f102 0514 	add.w	r5, r2, #20
 8006dc8:	429d      	cmp	r5, r3
 8006dca:	d91f      	bls.n	8006e0c <_dtoa_r+0x2a4>
 8006dcc:	6041      	str	r1, [r0, #4]
 8006dce:	4658      	mov	r0, fp
 8006dd0:	f000 fd8e 	bl	80078f0 <_Balloc>
 8006dd4:	4682      	mov	sl, r0
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d13c      	bne.n	8006e54 <_dtoa_r+0x2ec>
 8006dda:	4b1b      	ldr	r3, [pc, #108]	@ (8006e48 <_dtoa_r+0x2e0>)
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f240 11af 	movw	r1, #431	@ 0x1af
 8006de2:	e6d8      	b.n	8006b96 <_dtoa_r+0x2e>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e7e0      	b.n	8006daa <_dtoa_r+0x242>
 8006de8:	2401      	movs	r4, #1
 8006dea:	2300      	movs	r3, #0
 8006dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006df0:	f04f 33ff 	mov.w	r3, #4294967295
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	9307      	str	r3, [sp, #28]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2312      	movs	r3, #18
 8006dfc:	e7d0      	b.n	8006da0 <_dtoa_r+0x238>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e02:	e7f5      	b.n	8006df0 <_dtoa_r+0x288>
 8006e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	9307      	str	r3, [sp, #28]
 8006e0a:	e7d7      	b.n	8006dbc <_dtoa_r+0x254>
 8006e0c:	3101      	adds	r1, #1
 8006e0e:	0052      	lsls	r2, r2, #1
 8006e10:	e7d8      	b.n	8006dc4 <_dtoa_r+0x25c>
 8006e12:	bf00      	nop
 8006e14:	f3af 8000 	nop.w
 8006e18:	636f4361 	.word	0x636f4361
 8006e1c:	3fd287a7 	.word	0x3fd287a7
 8006e20:	8b60c8b3 	.word	0x8b60c8b3
 8006e24:	3fc68a28 	.word	0x3fc68a28
 8006e28:	509f79fb 	.word	0x509f79fb
 8006e2c:	3fd34413 	.word	0x3fd34413
 8006e30:	0800a90e 	.word	0x0800a90e
 8006e34:	0800a925 	.word	0x0800a925
 8006e38:	7ff00000 	.word	0x7ff00000
 8006e3c:	0800a8d9 	.word	0x0800a8d9
 8006e40:	3ff80000 	.word	0x3ff80000
 8006e44:	0800aa20 	.word	0x0800aa20
 8006e48:	0800a97d 	.word	0x0800a97d
 8006e4c:	0800a90a 	.word	0x0800a90a
 8006e50:	0800a8d8 	.word	0x0800a8d8
 8006e54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e58:	6018      	str	r0, [r3, #0]
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	2b0e      	cmp	r3, #14
 8006e5e:	f200 80a4 	bhi.w	8006faa <_dtoa_r+0x442>
 8006e62:	2c00      	cmp	r4, #0
 8006e64:	f000 80a1 	beq.w	8006faa <_dtoa_r+0x442>
 8006e68:	2f00      	cmp	r7, #0
 8006e6a:	dd33      	ble.n	8006ed4 <_dtoa_r+0x36c>
 8006e6c:	4bad      	ldr	r3, [pc, #692]	@ (8007124 <_dtoa_r+0x5bc>)
 8006e6e:	f007 020f 	and.w	r2, r7, #15
 8006e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e76:	ed93 7b00 	vldr	d7, [r3]
 8006e7a:	05f8      	lsls	r0, r7, #23
 8006e7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e84:	d516      	bpl.n	8006eb4 <_dtoa_r+0x34c>
 8006e86:	4ba8      	ldr	r3, [pc, #672]	@ (8007128 <_dtoa_r+0x5c0>)
 8006e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e90:	f7f9 fcfc 	bl	800088c <__aeabi_ddiv>
 8006e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e98:	f004 040f 	and.w	r4, r4, #15
 8006e9c:	2603      	movs	r6, #3
 8006e9e:	4da2      	ldr	r5, [pc, #648]	@ (8007128 <_dtoa_r+0x5c0>)
 8006ea0:	b954      	cbnz	r4, 8006eb8 <_dtoa_r+0x350>
 8006ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eaa:	f7f9 fcef 	bl	800088c <__aeabi_ddiv>
 8006eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb2:	e028      	b.n	8006f06 <_dtoa_r+0x39e>
 8006eb4:	2602      	movs	r6, #2
 8006eb6:	e7f2      	b.n	8006e9e <_dtoa_r+0x336>
 8006eb8:	07e1      	lsls	r1, r4, #31
 8006eba:	d508      	bpl.n	8006ece <_dtoa_r+0x366>
 8006ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ec0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ec4:	f7f9 fbb8 	bl	8000638 <__aeabi_dmul>
 8006ec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ecc:	3601      	adds	r6, #1
 8006ece:	1064      	asrs	r4, r4, #1
 8006ed0:	3508      	adds	r5, #8
 8006ed2:	e7e5      	b.n	8006ea0 <_dtoa_r+0x338>
 8006ed4:	f000 80d2 	beq.w	800707c <_dtoa_r+0x514>
 8006ed8:	427c      	negs	r4, r7
 8006eda:	4b92      	ldr	r3, [pc, #584]	@ (8007124 <_dtoa_r+0x5bc>)
 8006edc:	4d92      	ldr	r5, [pc, #584]	@ (8007128 <_dtoa_r+0x5c0>)
 8006ede:	f004 020f 	and.w	r2, r4, #15
 8006ee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eee:	f7f9 fba3 	bl	8000638 <__aeabi_dmul>
 8006ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef6:	1124      	asrs	r4, r4, #4
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2602      	movs	r6, #2
 8006efc:	2c00      	cmp	r4, #0
 8006efe:	f040 80b2 	bne.w	8007066 <_dtoa_r+0x4fe>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1d3      	bne.n	8006eae <_dtoa_r+0x346>
 8006f06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80b7 	beq.w	8007080 <_dtoa_r+0x518>
 8006f12:	4b86      	ldr	r3, [pc, #536]	@ (800712c <_dtoa_r+0x5c4>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 fdff 	bl	8000b1c <__aeabi_dcmplt>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f000 80ae 	beq.w	8007080 <_dtoa_r+0x518>
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 80aa 	beq.w	8007080 <_dtoa_r+0x518>
 8006f2c:	9b00      	ldr	r3, [sp, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	dd37      	ble.n	8006fa2 <_dtoa_r+0x43a>
 8006f32:	1e7b      	subs	r3, r7, #1
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	4620      	mov	r0, r4
 8006f38:	4b7d      	ldr	r3, [pc, #500]	@ (8007130 <_dtoa_r+0x5c8>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	f7f9 fb7b 	bl	8000638 <__aeabi_dmul>
 8006f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f46:	9c00      	ldr	r4, [sp, #0]
 8006f48:	3601      	adds	r6, #1
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7f9 fb0a 	bl	8000564 <__aeabi_i2d>
 8006f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f54:	f7f9 fb70 	bl	8000638 <__aeabi_dmul>
 8006f58:	4b76      	ldr	r3, [pc, #472]	@ (8007134 <_dtoa_r+0x5cc>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f7f9 f9b6 	bl	80002cc <__adddf3>
 8006f60:	4605      	mov	r5, r0
 8006f62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f66:	2c00      	cmp	r4, #0
 8006f68:	f040 808d 	bne.w	8007086 <_dtoa_r+0x51e>
 8006f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f70:	4b71      	ldr	r3, [pc, #452]	@ (8007138 <_dtoa_r+0x5d0>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	f7f9 f9a8 	bl	80002c8 <__aeabi_dsub>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4633      	mov	r3, r6
 8006f84:	f7f9 fde8 	bl	8000b58 <__aeabi_dcmpgt>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	f040 828b 	bne.w	80074a4 <_dtoa_r+0x93c>
 8006f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f92:	462a      	mov	r2, r5
 8006f94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f98:	f7f9 fdc0 	bl	8000b1c <__aeabi_dcmplt>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f040 8128 	bne.w	80071f2 <_dtoa_r+0x68a>
 8006fa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006fa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006faa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f2c0 815a 	blt.w	8007266 <_dtoa_r+0x6fe>
 8006fb2:	2f0e      	cmp	r7, #14
 8006fb4:	f300 8157 	bgt.w	8007266 <_dtoa_r+0x6fe>
 8006fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8007124 <_dtoa_r+0x5bc>)
 8006fba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fbe:	ed93 7b00 	vldr	d7, [r3]
 8006fc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	ed8d 7b00 	vstr	d7, [sp]
 8006fca:	da03      	bge.n	8006fd4 <_dtoa_r+0x46c>
 8006fcc:	9b07      	ldr	r3, [sp, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f340 8101 	ble.w	80071d6 <_dtoa_r+0x66e>
 8006fd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006fd8:	4656      	mov	r6, sl
 8006fda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 fc53 	bl	800088c <__aeabi_ddiv>
 8006fe6:	f7f9 fdd7 	bl	8000b98 <__aeabi_d2iz>
 8006fea:	4680      	mov	r8, r0
 8006fec:	f7f9 faba 	bl	8000564 <__aeabi_i2d>
 8006ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ff4:	f7f9 fb20 	bl	8000638 <__aeabi_dmul>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007004:	f7f9 f960 	bl	80002c8 <__aeabi_dsub>
 8007008:	f806 4b01 	strb.w	r4, [r6], #1
 800700c:	9d07      	ldr	r5, [sp, #28]
 800700e:	eba6 040a 	sub.w	r4, r6, sl
 8007012:	42a5      	cmp	r5, r4
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	f040 8117 	bne.w	800724a <_dtoa_r+0x6e2>
 800701c:	f7f9 f956 	bl	80002cc <__adddf3>
 8007020:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007024:	4604      	mov	r4, r0
 8007026:	460d      	mov	r5, r1
 8007028:	f7f9 fd96 	bl	8000b58 <__aeabi_dcmpgt>
 800702c:	2800      	cmp	r0, #0
 800702e:	f040 80f9 	bne.w	8007224 <_dtoa_r+0x6bc>
 8007032:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007036:	4620      	mov	r0, r4
 8007038:	4629      	mov	r1, r5
 800703a:	f7f9 fd65 	bl	8000b08 <__aeabi_dcmpeq>
 800703e:	b118      	cbz	r0, 8007048 <_dtoa_r+0x4e0>
 8007040:	f018 0f01 	tst.w	r8, #1
 8007044:	f040 80ee 	bne.w	8007224 <_dtoa_r+0x6bc>
 8007048:	4649      	mov	r1, r9
 800704a:	4658      	mov	r0, fp
 800704c:	f000 fc90 	bl	8007970 <_Bfree>
 8007050:	2300      	movs	r3, #0
 8007052:	7033      	strb	r3, [r6, #0]
 8007054:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007056:	3701      	adds	r7, #1
 8007058:	601f      	str	r7, [r3, #0]
 800705a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 831d 	beq.w	800769c <_dtoa_r+0xb34>
 8007062:	601e      	str	r6, [r3, #0]
 8007064:	e31a      	b.n	800769c <_dtoa_r+0xb34>
 8007066:	07e2      	lsls	r2, r4, #31
 8007068:	d505      	bpl.n	8007076 <_dtoa_r+0x50e>
 800706a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800706e:	f7f9 fae3 	bl	8000638 <__aeabi_dmul>
 8007072:	3601      	adds	r6, #1
 8007074:	2301      	movs	r3, #1
 8007076:	1064      	asrs	r4, r4, #1
 8007078:	3508      	adds	r5, #8
 800707a:	e73f      	b.n	8006efc <_dtoa_r+0x394>
 800707c:	2602      	movs	r6, #2
 800707e:	e742      	b.n	8006f06 <_dtoa_r+0x39e>
 8007080:	9c07      	ldr	r4, [sp, #28]
 8007082:	9704      	str	r7, [sp, #16]
 8007084:	e761      	b.n	8006f4a <_dtoa_r+0x3e2>
 8007086:	4b27      	ldr	r3, [pc, #156]	@ (8007124 <_dtoa_r+0x5bc>)
 8007088:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800708a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800708e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007092:	4454      	add	r4, sl
 8007094:	2900      	cmp	r1, #0
 8007096:	d053      	beq.n	8007140 <_dtoa_r+0x5d8>
 8007098:	4928      	ldr	r1, [pc, #160]	@ (800713c <_dtoa_r+0x5d4>)
 800709a:	2000      	movs	r0, #0
 800709c:	f7f9 fbf6 	bl	800088c <__aeabi_ddiv>
 80070a0:	4633      	mov	r3, r6
 80070a2:	462a      	mov	r2, r5
 80070a4:	f7f9 f910 	bl	80002c8 <__aeabi_dsub>
 80070a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070ac:	4656      	mov	r6, sl
 80070ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070b2:	f7f9 fd71 	bl	8000b98 <__aeabi_d2iz>
 80070b6:	4605      	mov	r5, r0
 80070b8:	f7f9 fa54 	bl	8000564 <__aeabi_i2d>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c4:	f7f9 f900 	bl	80002c8 <__aeabi_dsub>
 80070c8:	3530      	adds	r5, #48	@ 0x30
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070d2:	f806 5b01 	strb.w	r5, [r6], #1
 80070d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070da:	f7f9 fd1f 	bl	8000b1c <__aeabi_dcmplt>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d171      	bne.n	80071c6 <_dtoa_r+0x65e>
 80070e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070e6:	4911      	ldr	r1, [pc, #68]	@ (800712c <_dtoa_r+0x5c4>)
 80070e8:	2000      	movs	r0, #0
 80070ea:	f7f9 f8ed 	bl	80002c8 <__aeabi_dsub>
 80070ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070f2:	f7f9 fd13 	bl	8000b1c <__aeabi_dcmplt>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f040 8095 	bne.w	8007226 <_dtoa_r+0x6be>
 80070fc:	42a6      	cmp	r6, r4
 80070fe:	f43f af50 	beq.w	8006fa2 <_dtoa_r+0x43a>
 8007102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007106:	4b0a      	ldr	r3, [pc, #40]	@ (8007130 <_dtoa_r+0x5c8>)
 8007108:	2200      	movs	r2, #0
 800710a:	f7f9 fa95 	bl	8000638 <__aeabi_dmul>
 800710e:	4b08      	ldr	r3, [pc, #32]	@ (8007130 <_dtoa_r+0x5c8>)
 8007110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007114:	2200      	movs	r2, #0
 8007116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800711a:	f7f9 fa8d 	bl	8000638 <__aeabi_dmul>
 800711e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007122:	e7c4      	b.n	80070ae <_dtoa_r+0x546>
 8007124:	0800aa20 	.word	0x0800aa20
 8007128:	0800a9f8 	.word	0x0800a9f8
 800712c:	3ff00000 	.word	0x3ff00000
 8007130:	40240000 	.word	0x40240000
 8007134:	401c0000 	.word	0x401c0000
 8007138:	40140000 	.word	0x40140000
 800713c:	3fe00000 	.word	0x3fe00000
 8007140:	4631      	mov	r1, r6
 8007142:	4628      	mov	r0, r5
 8007144:	f7f9 fa78 	bl	8000638 <__aeabi_dmul>
 8007148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800714c:	9415      	str	r4, [sp, #84]	@ 0x54
 800714e:	4656      	mov	r6, sl
 8007150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007154:	f7f9 fd20 	bl	8000b98 <__aeabi_d2iz>
 8007158:	4605      	mov	r5, r0
 800715a:	f7f9 fa03 	bl	8000564 <__aeabi_i2d>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007166:	f7f9 f8af 	bl	80002c8 <__aeabi_dsub>
 800716a:	3530      	adds	r5, #48	@ 0x30
 800716c:	f806 5b01 	strb.w	r5, [r6], #1
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	42a6      	cmp	r6, r4
 8007176:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	d124      	bne.n	80071ca <_dtoa_r+0x662>
 8007180:	4bac      	ldr	r3, [pc, #688]	@ (8007434 <_dtoa_r+0x8cc>)
 8007182:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007186:	f7f9 f8a1 	bl	80002cc <__adddf3>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007192:	f7f9 fce1 	bl	8000b58 <__aeabi_dcmpgt>
 8007196:	2800      	cmp	r0, #0
 8007198:	d145      	bne.n	8007226 <_dtoa_r+0x6be>
 800719a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800719e:	49a5      	ldr	r1, [pc, #660]	@ (8007434 <_dtoa_r+0x8cc>)
 80071a0:	2000      	movs	r0, #0
 80071a2:	f7f9 f891 	bl	80002c8 <__aeabi_dsub>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ae:	f7f9 fcb5 	bl	8000b1c <__aeabi_dcmplt>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	f43f aef5 	beq.w	8006fa2 <_dtoa_r+0x43a>
 80071b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80071ba:	1e73      	subs	r3, r6, #1
 80071bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80071be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071c2:	2b30      	cmp	r3, #48	@ 0x30
 80071c4:	d0f8      	beq.n	80071b8 <_dtoa_r+0x650>
 80071c6:	9f04      	ldr	r7, [sp, #16]
 80071c8:	e73e      	b.n	8007048 <_dtoa_r+0x4e0>
 80071ca:	4b9b      	ldr	r3, [pc, #620]	@ (8007438 <_dtoa_r+0x8d0>)
 80071cc:	f7f9 fa34 	bl	8000638 <__aeabi_dmul>
 80071d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d4:	e7bc      	b.n	8007150 <_dtoa_r+0x5e8>
 80071d6:	d10c      	bne.n	80071f2 <_dtoa_r+0x68a>
 80071d8:	4b98      	ldr	r3, [pc, #608]	@ (800743c <_dtoa_r+0x8d4>)
 80071da:	2200      	movs	r2, #0
 80071dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071e0:	f7f9 fa2a 	bl	8000638 <__aeabi_dmul>
 80071e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071e8:	f7f9 fcac 	bl	8000b44 <__aeabi_dcmpge>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f000 8157 	beq.w	80074a0 <_dtoa_r+0x938>
 80071f2:	2400      	movs	r4, #0
 80071f4:	4625      	mov	r5, r4
 80071f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071f8:	43db      	mvns	r3, r3
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	4656      	mov	r6, sl
 80071fe:	2700      	movs	r7, #0
 8007200:	4621      	mov	r1, r4
 8007202:	4658      	mov	r0, fp
 8007204:	f000 fbb4 	bl	8007970 <_Bfree>
 8007208:	2d00      	cmp	r5, #0
 800720a:	d0dc      	beq.n	80071c6 <_dtoa_r+0x65e>
 800720c:	b12f      	cbz	r7, 800721a <_dtoa_r+0x6b2>
 800720e:	42af      	cmp	r7, r5
 8007210:	d003      	beq.n	800721a <_dtoa_r+0x6b2>
 8007212:	4639      	mov	r1, r7
 8007214:	4658      	mov	r0, fp
 8007216:	f000 fbab 	bl	8007970 <_Bfree>
 800721a:	4629      	mov	r1, r5
 800721c:	4658      	mov	r0, fp
 800721e:	f000 fba7 	bl	8007970 <_Bfree>
 8007222:	e7d0      	b.n	80071c6 <_dtoa_r+0x65e>
 8007224:	9704      	str	r7, [sp, #16]
 8007226:	4633      	mov	r3, r6
 8007228:	461e      	mov	r6, r3
 800722a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800722e:	2a39      	cmp	r2, #57	@ 0x39
 8007230:	d107      	bne.n	8007242 <_dtoa_r+0x6da>
 8007232:	459a      	cmp	sl, r3
 8007234:	d1f8      	bne.n	8007228 <_dtoa_r+0x6c0>
 8007236:	9a04      	ldr	r2, [sp, #16]
 8007238:	3201      	adds	r2, #1
 800723a:	9204      	str	r2, [sp, #16]
 800723c:	2230      	movs	r2, #48	@ 0x30
 800723e:	f88a 2000 	strb.w	r2, [sl]
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	3201      	adds	r2, #1
 8007246:	701a      	strb	r2, [r3, #0]
 8007248:	e7bd      	b.n	80071c6 <_dtoa_r+0x65e>
 800724a:	4b7b      	ldr	r3, [pc, #492]	@ (8007438 <_dtoa_r+0x8d0>)
 800724c:	2200      	movs	r2, #0
 800724e:	f7f9 f9f3 	bl	8000638 <__aeabi_dmul>
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	4604      	mov	r4, r0
 8007258:	460d      	mov	r5, r1
 800725a:	f7f9 fc55 	bl	8000b08 <__aeabi_dcmpeq>
 800725e:	2800      	cmp	r0, #0
 8007260:	f43f aebb 	beq.w	8006fda <_dtoa_r+0x472>
 8007264:	e6f0      	b.n	8007048 <_dtoa_r+0x4e0>
 8007266:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007268:	2a00      	cmp	r2, #0
 800726a:	f000 80db 	beq.w	8007424 <_dtoa_r+0x8bc>
 800726e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007270:	2a01      	cmp	r2, #1
 8007272:	f300 80bf 	bgt.w	80073f4 <_dtoa_r+0x88c>
 8007276:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007278:	2a00      	cmp	r2, #0
 800727a:	f000 80b7 	beq.w	80073ec <_dtoa_r+0x884>
 800727e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007282:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007284:	4646      	mov	r6, r8
 8007286:	9a08      	ldr	r2, [sp, #32]
 8007288:	2101      	movs	r1, #1
 800728a:	441a      	add	r2, r3
 800728c:	4658      	mov	r0, fp
 800728e:	4498      	add	r8, r3
 8007290:	9208      	str	r2, [sp, #32]
 8007292:	f000 fc6b 	bl	8007b6c <__i2b>
 8007296:	4605      	mov	r5, r0
 8007298:	b15e      	cbz	r6, 80072b2 <_dtoa_r+0x74a>
 800729a:	9b08      	ldr	r3, [sp, #32]
 800729c:	2b00      	cmp	r3, #0
 800729e:	dd08      	ble.n	80072b2 <_dtoa_r+0x74a>
 80072a0:	42b3      	cmp	r3, r6
 80072a2:	9a08      	ldr	r2, [sp, #32]
 80072a4:	bfa8      	it	ge
 80072a6:	4633      	movge	r3, r6
 80072a8:	eba8 0803 	sub.w	r8, r8, r3
 80072ac:	1af6      	subs	r6, r6, r3
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	9308      	str	r3, [sp, #32]
 80072b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072b4:	b1f3      	cbz	r3, 80072f4 <_dtoa_r+0x78c>
 80072b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 80b7 	beq.w	800742c <_dtoa_r+0x8c4>
 80072be:	b18c      	cbz	r4, 80072e4 <_dtoa_r+0x77c>
 80072c0:	4629      	mov	r1, r5
 80072c2:	4622      	mov	r2, r4
 80072c4:	4658      	mov	r0, fp
 80072c6:	f000 fd11 	bl	8007cec <__pow5mult>
 80072ca:	464a      	mov	r2, r9
 80072cc:	4601      	mov	r1, r0
 80072ce:	4605      	mov	r5, r0
 80072d0:	4658      	mov	r0, fp
 80072d2:	f000 fc61 	bl	8007b98 <__multiply>
 80072d6:	4649      	mov	r1, r9
 80072d8:	9004      	str	r0, [sp, #16]
 80072da:	4658      	mov	r0, fp
 80072dc:	f000 fb48 	bl	8007970 <_Bfree>
 80072e0:	9b04      	ldr	r3, [sp, #16]
 80072e2:	4699      	mov	r9, r3
 80072e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072e6:	1b1a      	subs	r2, r3, r4
 80072e8:	d004      	beq.n	80072f4 <_dtoa_r+0x78c>
 80072ea:	4649      	mov	r1, r9
 80072ec:	4658      	mov	r0, fp
 80072ee:	f000 fcfd 	bl	8007cec <__pow5mult>
 80072f2:	4681      	mov	r9, r0
 80072f4:	2101      	movs	r1, #1
 80072f6:	4658      	mov	r0, fp
 80072f8:	f000 fc38 	bl	8007b6c <__i2b>
 80072fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072fe:	4604      	mov	r4, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 81cf 	beq.w	80076a4 <_dtoa_r+0xb3c>
 8007306:	461a      	mov	r2, r3
 8007308:	4601      	mov	r1, r0
 800730a:	4658      	mov	r0, fp
 800730c:	f000 fcee 	bl	8007cec <__pow5mult>
 8007310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007312:	2b01      	cmp	r3, #1
 8007314:	4604      	mov	r4, r0
 8007316:	f300 8095 	bgt.w	8007444 <_dtoa_r+0x8dc>
 800731a:	9b02      	ldr	r3, [sp, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f040 8087 	bne.w	8007430 <_dtoa_r+0x8c8>
 8007322:	9b03      	ldr	r3, [sp, #12]
 8007324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007328:	2b00      	cmp	r3, #0
 800732a:	f040 8089 	bne.w	8007440 <_dtoa_r+0x8d8>
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007334:	0d1b      	lsrs	r3, r3, #20
 8007336:	051b      	lsls	r3, r3, #20
 8007338:	b12b      	cbz	r3, 8007346 <_dtoa_r+0x7de>
 800733a:	9b08      	ldr	r3, [sp, #32]
 800733c:	3301      	adds	r3, #1
 800733e:	9308      	str	r3, [sp, #32]
 8007340:	f108 0801 	add.w	r8, r8, #1
 8007344:	2301      	movs	r3, #1
 8007346:	930a      	str	r3, [sp, #40]	@ 0x28
 8007348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 81b0 	beq.w	80076b0 <_dtoa_r+0xb48>
 8007350:	6923      	ldr	r3, [r4, #16]
 8007352:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007356:	6918      	ldr	r0, [r3, #16]
 8007358:	f000 fbbc 	bl	8007ad4 <__hi0bits>
 800735c:	f1c0 0020 	rsb	r0, r0, #32
 8007360:	9b08      	ldr	r3, [sp, #32]
 8007362:	4418      	add	r0, r3
 8007364:	f010 001f 	ands.w	r0, r0, #31
 8007368:	d077      	beq.n	800745a <_dtoa_r+0x8f2>
 800736a:	f1c0 0320 	rsb	r3, r0, #32
 800736e:	2b04      	cmp	r3, #4
 8007370:	dd6b      	ble.n	800744a <_dtoa_r+0x8e2>
 8007372:	9b08      	ldr	r3, [sp, #32]
 8007374:	f1c0 001c 	rsb	r0, r0, #28
 8007378:	4403      	add	r3, r0
 800737a:	4480      	add	r8, r0
 800737c:	4406      	add	r6, r0
 800737e:	9308      	str	r3, [sp, #32]
 8007380:	f1b8 0f00 	cmp.w	r8, #0
 8007384:	dd05      	ble.n	8007392 <_dtoa_r+0x82a>
 8007386:	4649      	mov	r1, r9
 8007388:	4642      	mov	r2, r8
 800738a:	4658      	mov	r0, fp
 800738c:	f000 fd08 	bl	8007da0 <__lshift>
 8007390:	4681      	mov	r9, r0
 8007392:	9b08      	ldr	r3, [sp, #32]
 8007394:	2b00      	cmp	r3, #0
 8007396:	dd05      	ble.n	80073a4 <_dtoa_r+0x83c>
 8007398:	4621      	mov	r1, r4
 800739a:	461a      	mov	r2, r3
 800739c:	4658      	mov	r0, fp
 800739e:	f000 fcff 	bl	8007da0 <__lshift>
 80073a2:	4604      	mov	r4, r0
 80073a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d059      	beq.n	800745e <_dtoa_r+0x8f6>
 80073aa:	4621      	mov	r1, r4
 80073ac:	4648      	mov	r0, r9
 80073ae:	f000 fd63 	bl	8007e78 <__mcmp>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	da53      	bge.n	800745e <_dtoa_r+0x8f6>
 80073b6:	1e7b      	subs	r3, r7, #1
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	4649      	mov	r1, r9
 80073bc:	2300      	movs	r3, #0
 80073be:	220a      	movs	r2, #10
 80073c0:	4658      	mov	r0, fp
 80073c2:	f000 faf7 	bl	80079b4 <__multadd>
 80073c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c8:	4681      	mov	r9, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8172 	beq.w	80076b4 <_dtoa_r+0xb4c>
 80073d0:	2300      	movs	r3, #0
 80073d2:	4629      	mov	r1, r5
 80073d4:	220a      	movs	r2, #10
 80073d6:	4658      	mov	r0, fp
 80073d8:	f000 faec 	bl	80079b4 <__multadd>
 80073dc:	9b00      	ldr	r3, [sp, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	4605      	mov	r5, r0
 80073e2:	dc67      	bgt.n	80074b4 <_dtoa_r+0x94c>
 80073e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	dc41      	bgt.n	800746e <_dtoa_r+0x906>
 80073ea:	e063      	b.n	80074b4 <_dtoa_r+0x94c>
 80073ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80073f2:	e746      	b.n	8007282 <_dtoa_r+0x71a>
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	1e5c      	subs	r4, r3, #1
 80073f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073fa:	42a3      	cmp	r3, r4
 80073fc:	bfbf      	itttt	lt
 80073fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007400:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007402:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007404:	1ae3      	sublt	r3, r4, r3
 8007406:	bfb4      	ite	lt
 8007408:	18d2      	addlt	r2, r2, r3
 800740a:	1b1c      	subge	r4, r3, r4
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	bfbc      	itt	lt
 8007410:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007412:	2400      	movlt	r4, #0
 8007414:	2b00      	cmp	r3, #0
 8007416:	bfb5      	itete	lt
 8007418:	eba8 0603 	sublt.w	r6, r8, r3
 800741c:	9b07      	ldrge	r3, [sp, #28]
 800741e:	2300      	movlt	r3, #0
 8007420:	4646      	movge	r6, r8
 8007422:	e730      	b.n	8007286 <_dtoa_r+0x71e>
 8007424:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007426:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007428:	4646      	mov	r6, r8
 800742a:	e735      	b.n	8007298 <_dtoa_r+0x730>
 800742c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800742e:	e75c      	b.n	80072ea <_dtoa_r+0x782>
 8007430:	2300      	movs	r3, #0
 8007432:	e788      	b.n	8007346 <_dtoa_r+0x7de>
 8007434:	3fe00000 	.word	0x3fe00000
 8007438:	40240000 	.word	0x40240000
 800743c:	40140000 	.word	0x40140000
 8007440:	9b02      	ldr	r3, [sp, #8]
 8007442:	e780      	b.n	8007346 <_dtoa_r+0x7de>
 8007444:	2300      	movs	r3, #0
 8007446:	930a      	str	r3, [sp, #40]	@ 0x28
 8007448:	e782      	b.n	8007350 <_dtoa_r+0x7e8>
 800744a:	d099      	beq.n	8007380 <_dtoa_r+0x818>
 800744c:	9a08      	ldr	r2, [sp, #32]
 800744e:	331c      	adds	r3, #28
 8007450:	441a      	add	r2, r3
 8007452:	4498      	add	r8, r3
 8007454:	441e      	add	r6, r3
 8007456:	9208      	str	r2, [sp, #32]
 8007458:	e792      	b.n	8007380 <_dtoa_r+0x818>
 800745a:	4603      	mov	r3, r0
 800745c:	e7f6      	b.n	800744c <_dtoa_r+0x8e4>
 800745e:	9b07      	ldr	r3, [sp, #28]
 8007460:	9704      	str	r7, [sp, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	dc20      	bgt.n	80074a8 <_dtoa_r+0x940>
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800746a:	2b02      	cmp	r3, #2
 800746c:	dd1e      	ble.n	80074ac <_dtoa_r+0x944>
 800746e:	9b00      	ldr	r3, [sp, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f47f aec0 	bne.w	80071f6 <_dtoa_r+0x68e>
 8007476:	4621      	mov	r1, r4
 8007478:	2205      	movs	r2, #5
 800747a:	4658      	mov	r0, fp
 800747c:	f000 fa9a 	bl	80079b4 <__multadd>
 8007480:	4601      	mov	r1, r0
 8007482:	4604      	mov	r4, r0
 8007484:	4648      	mov	r0, r9
 8007486:	f000 fcf7 	bl	8007e78 <__mcmp>
 800748a:	2800      	cmp	r0, #0
 800748c:	f77f aeb3 	ble.w	80071f6 <_dtoa_r+0x68e>
 8007490:	4656      	mov	r6, sl
 8007492:	2331      	movs	r3, #49	@ 0x31
 8007494:	f806 3b01 	strb.w	r3, [r6], #1
 8007498:	9b04      	ldr	r3, [sp, #16]
 800749a:	3301      	adds	r3, #1
 800749c:	9304      	str	r3, [sp, #16]
 800749e:	e6ae      	b.n	80071fe <_dtoa_r+0x696>
 80074a0:	9c07      	ldr	r4, [sp, #28]
 80074a2:	9704      	str	r7, [sp, #16]
 80074a4:	4625      	mov	r5, r4
 80074a6:	e7f3      	b.n	8007490 <_dtoa_r+0x928>
 80074a8:	9b07      	ldr	r3, [sp, #28]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 8104 	beq.w	80076bc <_dtoa_r+0xb54>
 80074b4:	2e00      	cmp	r6, #0
 80074b6:	dd05      	ble.n	80074c4 <_dtoa_r+0x95c>
 80074b8:	4629      	mov	r1, r5
 80074ba:	4632      	mov	r2, r6
 80074bc:	4658      	mov	r0, fp
 80074be:	f000 fc6f 	bl	8007da0 <__lshift>
 80074c2:	4605      	mov	r5, r0
 80074c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d05a      	beq.n	8007580 <_dtoa_r+0xa18>
 80074ca:	6869      	ldr	r1, [r5, #4]
 80074cc:	4658      	mov	r0, fp
 80074ce:	f000 fa0f 	bl	80078f0 <_Balloc>
 80074d2:	4606      	mov	r6, r0
 80074d4:	b928      	cbnz	r0, 80074e2 <_dtoa_r+0x97a>
 80074d6:	4b84      	ldr	r3, [pc, #528]	@ (80076e8 <_dtoa_r+0xb80>)
 80074d8:	4602      	mov	r2, r0
 80074da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80074de:	f7ff bb5a 	b.w	8006b96 <_dtoa_r+0x2e>
 80074e2:	692a      	ldr	r2, [r5, #16]
 80074e4:	3202      	adds	r2, #2
 80074e6:	0092      	lsls	r2, r2, #2
 80074e8:	f105 010c 	add.w	r1, r5, #12
 80074ec:	300c      	adds	r0, #12
 80074ee:	f001 ff75 	bl	80093dc <memcpy>
 80074f2:	2201      	movs	r2, #1
 80074f4:	4631      	mov	r1, r6
 80074f6:	4658      	mov	r0, fp
 80074f8:	f000 fc52 	bl	8007da0 <__lshift>
 80074fc:	f10a 0301 	add.w	r3, sl, #1
 8007500:	9307      	str	r3, [sp, #28]
 8007502:	9b00      	ldr	r3, [sp, #0]
 8007504:	4453      	add	r3, sl
 8007506:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	462f      	mov	r7, r5
 8007510:	930a      	str	r3, [sp, #40]	@ 0x28
 8007512:	4605      	mov	r5, r0
 8007514:	9b07      	ldr	r3, [sp, #28]
 8007516:	4621      	mov	r1, r4
 8007518:	3b01      	subs	r3, #1
 800751a:	4648      	mov	r0, r9
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	f7ff fa99 	bl	8006a54 <quorem>
 8007522:	4639      	mov	r1, r7
 8007524:	9002      	str	r0, [sp, #8]
 8007526:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800752a:	4648      	mov	r0, r9
 800752c:	f000 fca4 	bl	8007e78 <__mcmp>
 8007530:	462a      	mov	r2, r5
 8007532:	9008      	str	r0, [sp, #32]
 8007534:	4621      	mov	r1, r4
 8007536:	4658      	mov	r0, fp
 8007538:	f000 fcba 	bl	8007eb0 <__mdiff>
 800753c:	68c2      	ldr	r2, [r0, #12]
 800753e:	4606      	mov	r6, r0
 8007540:	bb02      	cbnz	r2, 8007584 <_dtoa_r+0xa1c>
 8007542:	4601      	mov	r1, r0
 8007544:	4648      	mov	r0, r9
 8007546:	f000 fc97 	bl	8007e78 <__mcmp>
 800754a:	4602      	mov	r2, r0
 800754c:	4631      	mov	r1, r6
 800754e:	4658      	mov	r0, fp
 8007550:	920e      	str	r2, [sp, #56]	@ 0x38
 8007552:	f000 fa0d 	bl	8007970 <_Bfree>
 8007556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007558:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800755a:	9e07      	ldr	r6, [sp, #28]
 800755c:	ea43 0102 	orr.w	r1, r3, r2
 8007560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007562:	4319      	orrs	r1, r3
 8007564:	d110      	bne.n	8007588 <_dtoa_r+0xa20>
 8007566:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800756a:	d029      	beq.n	80075c0 <_dtoa_r+0xa58>
 800756c:	9b08      	ldr	r3, [sp, #32]
 800756e:	2b00      	cmp	r3, #0
 8007570:	dd02      	ble.n	8007578 <_dtoa_r+0xa10>
 8007572:	9b02      	ldr	r3, [sp, #8]
 8007574:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007578:	9b00      	ldr	r3, [sp, #0]
 800757a:	f883 8000 	strb.w	r8, [r3]
 800757e:	e63f      	b.n	8007200 <_dtoa_r+0x698>
 8007580:	4628      	mov	r0, r5
 8007582:	e7bb      	b.n	80074fc <_dtoa_r+0x994>
 8007584:	2201      	movs	r2, #1
 8007586:	e7e1      	b.n	800754c <_dtoa_r+0x9e4>
 8007588:	9b08      	ldr	r3, [sp, #32]
 800758a:	2b00      	cmp	r3, #0
 800758c:	db04      	blt.n	8007598 <_dtoa_r+0xa30>
 800758e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007590:	430b      	orrs	r3, r1
 8007592:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007594:	430b      	orrs	r3, r1
 8007596:	d120      	bne.n	80075da <_dtoa_r+0xa72>
 8007598:	2a00      	cmp	r2, #0
 800759a:	dded      	ble.n	8007578 <_dtoa_r+0xa10>
 800759c:	4649      	mov	r1, r9
 800759e:	2201      	movs	r2, #1
 80075a0:	4658      	mov	r0, fp
 80075a2:	f000 fbfd 	bl	8007da0 <__lshift>
 80075a6:	4621      	mov	r1, r4
 80075a8:	4681      	mov	r9, r0
 80075aa:	f000 fc65 	bl	8007e78 <__mcmp>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	dc03      	bgt.n	80075ba <_dtoa_r+0xa52>
 80075b2:	d1e1      	bne.n	8007578 <_dtoa_r+0xa10>
 80075b4:	f018 0f01 	tst.w	r8, #1
 80075b8:	d0de      	beq.n	8007578 <_dtoa_r+0xa10>
 80075ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075be:	d1d8      	bne.n	8007572 <_dtoa_r+0xa0a>
 80075c0:	9a00      	ldr	r2, [sp, #0]
 80075c2:	2339      	movs	r3, #57	@ 0x39
 80075c4:	7013      	strb	r3, [r2, #0]
 80075c6:	4633      	mov	r3, r6
 80075c8:	461e      	mov	r6, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80075d0:	2a39      	cmp	r2, #57	@ 0x39
 80075d2:	d052      	beq.n	800767a <_dtoa_r+0xb12>
 80075d4:	3201      	adds	r2, #1
 80075d6:	701a      	strb	r2, [r3, #0]
 80075d8:	e612      	b.n	8007200 <_dtoa_r+0x698>
 80075da:	2a00      	cmp	r2, #0
 80075dc:	dd07      	ble.n	80075ee <_dtoa_r+0xa86>
 80075de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075e2:	d0ed      	beq.n	80075c0 <_dtoa_r+0xa58>
 80075e4:	9a00      	ldr	r2, [sp, #0]
 80075e6:	f108 0301 	add.w	r3, r8, #1
 80075ea:	7013      	strb	r3, [r2, #0]
 80075ec:	e608      	b.n	8007200 <_dtoa_r+0x698>
 80075ee:	9b07      	ldr	r3, [sp, #28]
 80075f0:	9a07      	ldr	r2, [sp, #28]
 80075f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80075f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d028      	beq.n	800764e <_dtoa_r+0xae6>
 80075fc:	4649      	mov	r1, r9
 80075fe:	2300      	movs	r3, #0
 8007600:	220a      	movs	r2, #10
 8007602:	4658      	mov	r0, fp
 8007604:	f000 f9d6 	bl	80079b4 <__multadd>
 8007608:	42af      	cmp	r7, r5
 800760a:	4681      	mov	r9, r0
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	f04f 020a 	mov.w	r2, #10
 8007614:	4639      	mov	r1, r7
 8007616:	4658      	mov	r0, fp
 8007618:	d107      	bne.n	800762a <_dtoa_r+0xac2>
 800761a:	f000 f9cb 	bl	80079b4 <__multadd>
 800761e:	4607      	mov	r7, r0
 8007620:	4605      	mov	r5, r0
 8007622:	9b07      	ldr	r3, [sp, #28]
 8007624:	3301      	adds	r3, #1
 8007626:	9307      	str	r3, [sp, #28]
 8007628:	e774      	b.n	8007514 <_dtoa_r+0x9ac>
 800762a:	f000 f9c3 	bl	80079b4 <__multadd>
 800762e:	4629      	mov	r1, r5
 8007630:	4607      	mov	r7, r0
 8007632:	2300      	movs	r3, #0
 8007634:	220a      	movs	r2, #10
 8007636:	4658      	mov	r0, fp
 8007638:	f000 f9bc 	bl	80079b4 <__multadd>
 800763c:	4605      	mov	r5, r0
 800763e:	e7f0      	b.n	8007622 <_dtoa_r+0xaba>
 8007640:	9b00      	ldr	r3, [sp, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfcc      	ite	gt
 8007646:	461e      	movgt	r6, r3
 8007648:	2601      	movle	r6, #1
 800764a:	4456      	add	r6, sl
 800764c:	2700      	movs	r7, #0
 800764e:	4649      	mov	r1, r9
 8007650:	2201      	movs	r2, #1
 8007652:	4658      	mov	r0, fp
 8007654:	f000 fba4 	bl	8007da0 <__lshift>
 8007658:	4621      	mov	r1, r4
 800765a:	4681      	mov	r9, r0
 800765c:	f000 fc0c 	bl	8007e78 <__mcmp>
 8007660:	2800      	cmp	r0, #0
 8007662:	dcb0      	bgt.n	80075c6 <_dtoa_r+0xa5e>
 8007664:	d102      	bne.n	800766c <_dtoa_r+0xb04>
 8007666:	f018 0f01 	tst.w	r8, #1
 800766a:	d1ac      	bne.n	80075c6 <_dtoa_r+0xa5e>
 800766c:	4633      	mov	r3, r6
 800766e:	461e      	mov	r6, r3
 8007670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007674:	2a30      	cmp	r2, #48	@ 0x30
 8007676:	d0fa      	beq.n	800766e <_dtoa_r+0xb06>
 8007678:	e5c2      	b.n	8007200 <_dtoa_r+0x698>
 800767a:	459a      	cmp	sl, r3
 800767c:	d1a4      	bne.n	80075c8 <_dtoa_r+0xa60>
 800767e:	9b04      	ldr	r3, [sp, #16]
 8007680:	3301      	adds	r3, #1
 8007682:	9304      	str	r3, [sp, #16]
 8007684:	2331      	movs	r3, #49	@ 0x31
 8007686:	f88a 3000 	strb.w	r3, [sl]
 800768a:	e5b9      	b.n	8007200 <_dtoa_r+0x698>
 800768c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800768e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80076ec <_dtoa_r+0xb84>
 8007692:	b11b      	cbz	r3, 800769c <_dtoa_r+0xb34>
 8007694:	f10a 0308 	add.w	r3, sl, #8
 8007698:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	4650      	mov	r0, sl
 800769e:	b019      	add	sp, #100	@ 0x64
 80076a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	f77f ae37 	ble.w	800731a <_dtoa_r+0x7b2>
 80076ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80076b0:	2001      	movs	r0, #1
 80076b2:	e655      	b.n	8007360 <_dtoa_r+0x7f8>
 80076b4:	9b00      	ldr	r3, [sp, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f77f aed6 	ble.w	8007468 <_dtoa_r+0x900>
 80076bc:	4656      	mov	r6, sl
 80076be:	4621      	mov	r1, r4
 80076c0:	4648      	mov	r0, r9
 80076c2:	f7ff f9c7 	bl	8006a54 <quorem>
 80076c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076ca:	f806 8b01 	strb.w	r8, [r6], #1
 80076ce:	9b00      	ldr	r3, [sp, #0]
 80076d0:	eba6 020a 	sub.w	r2, r6, sl
 80076d4:	4293      	cmp	r3, r2
 80076d6:	ddb3      	ble.n	8007640 <_dtoa_r+0xad8>
 80076d8:	4649      	mov	r1, r9
 80076da:	2300      	movs	r3, #0
 80076dc:	220a      	movs	r2, #10
 80076de:	4658      	mov	r0, fp
 80076e0:	f000 f968 	bl	80079b4 <__multadd>
 80076e4:	4681      	mov	r9, r0
 80076e6:	e7ea      	b.n	80076be <_dtoa_r+0xb56>
 80076e8:	0800a97d 	.word	0x0800a97d
 80076ec:	0800a901 	.word	0x0800a901

080076f0 <_free_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4605      	mov	r5, r0
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d041      	beq.n	800777c <_free_r+0x8c>
 80076f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076fc:	1f0c      	subs	r4, r1, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bfb8      	it	lt
 8007702:	18e4      	addlt	r4, r4, r3
 8007704:	f000 f8e8 	bl	80078d8 <__malloc_lock>
 8007708:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <_free_r+0x90>)
 800770a:	6813      	ldr	r3, [r2, #0]
 800770c:	b933      	cbnz	r3, 800771c <_free_r+0x2c>
 800770e:	6063      	str	r3, [r4, #4]
 8007710:	6014      	str	r4, [r2, #0]
 8007712:	4628      	mov	r0, r5
 8007714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007718:	f000 b8e4 	b.w	80078e4 <__malloc_unlock>
 800771c:	42a3      	cmp	r3, r4
 800771e:	d908      	bls.n	8007732 <_free_r+0x42>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	1821      	adds	r1, r4, r0
 8007724:	428b      	cmp	r3, r1
 8007726:	bf01      	itttt	eq
 8007728:	6819      	ldreq	r1, [r3, #0]
 800772a:	685b      	ldreq	r3, [r3, #4]
 800772c:	1809      	addeq	r1, r1, r0
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	e7ed      	b.n	800770e <_free_r+0x1e>
 8007732:	461a      	mov	r2, r3
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b10b      	cbz	r3, 800773c <_free_r+0x4c>
 8007738:	42a3      	cmp	r3, r4
 800773a:	d9fa      	bls.n	8007732 <_free_r+0x42>
 800773c:	6811      	ldr	r1, [r2, #0]
 800773e:	1850      	adds	r0, r2, r1
 8007740:	42a0      	cmp	r0, r4
 8007742:	d10b      	bne.n	800775c <_free_r+0x6c>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	4401      	add	r1, r0
 8007748:	1850      	adds	r0, r2, r1
 800774a:	4283      	cmp	r3, r0
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	d1e0      	bne.n	8007712 <_free_r+0x22>
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	6053      	str	r3, [r2, #4]
 8007756:	4408      	add	r0, r1
 8007758:	6010      	str	r0, [r2, #0]
 800775a:	e7da      	b.n	8007712 <_free_r+0x22>
 800775c:	d902      	bls.n	8007764 <_free_r+0x74>
 800775e:	230c      	movs	r3, #12
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	e7d6      	b.n	8007712 <_free_r+0x22>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	1821      	adds	r1, r4, r0
 8007768:	428b      	cmp	r3, r1
 800776a:	bf04      	itt	eq
 800776c:	6819      	ldreq	r1, [r3, #0]
 800776e:	685b      	ldreq	r3, [r3, #4]
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	bf04      	itt	eq
 8007774:	1809      	addeq	r1, r1, r0
 8007776:	6021      	streq	r1, [r4, #0]
 8007778:	6054      	str	r4, [r2, #4]
 800777a:	e7ca      	b.n	8007712 <_free_r+0x22>
 800777c:	bd38      	pop	{r3, r4, r5, pc}
 800777e:	bf00      	nop
 8007780:	20000860 	.word	0x20000860

08007784 <malloc>:
 8007784:	4b02      	ldr	r3, [pc, #8]	@ (8007790 <malloc+0xc>)
 8007786:	4601      	mov	r1, r0
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	f000 b825 	b.w	80077d8 <_malloc_r>
 800778e:	bf00      	nop
 8007790:	20000034 	.word	0x20000034

08007794 <sbrk_aligned>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	4e0f      	ldr	r6, [pc, #60]	@ (80077d4 <sbrk_aligned+0x40>)
 8007798:	460c      	mov	r4, r1
 800779a:	6831      	ldr	r1, [r6, #0]
 800779c:	4605      	mov	r5, r0
 800779e:	b911      	cbnz	r1, 80077a6 <sbrk_aligned+0x12>
 80077a0:	f001 fe0c 	bl	80093bc <_sbrk_r>
 80077a4:	6030      	str	r0, [r6, #0]
 80077a6:	4621      	mov	r1, r4
 80077a8:	4628      	mov	r0, r5
 80077aa:	f001 fe07 	bl	80093bc <_sbrk_r>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	d103      	bne.n	80077ba <sbrk_aligned+0x26>
 80077b2:	f04f 34ff 	mov.w	r4, #4294967295
 80077b6:	4620      	mov	r0, r4
 80077b8:	bd70      	pop	{r4, r5, r6, pc}
 80077ba:	1cc4      	adds	r4, r0, #3
 80077bc:	f024 0403 	bic.w	r4, r4, #3
 80077c0:	42a0      	cmp	r0, r4
 80077c2:	d0f8      	beq.n	80077b6 <sbrk_aligned+0x22>
 80077c4:	1a21      	subs	r1, r4, r0
 80077c6:	4628      	mov	r0, r5
 80077c8:	f001 fdf8 	bl	80093bc <_sbrk_r>
 80077cc:	3001      	adds	r0, #1
 80077ce:	d1f2      	bne.n	80077b6 <sbrk_aligned+0x22>
 80077d0:	e7ef      	b.n	80077b2 <sbrk_aligned+0x1e>
 80077d2:	bf00      	nop
 80077d4:	2000085c 	.word	0x2000085c

080077d8 <_malloc_r>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	1ccd      	adds	r5, r1, #3
 80077de:	f025 0503 	bic.w	r5, r5, #3
 80077e2:	3508      	adds	r5, #8
 80077e4:	2d0c      	cmp	r5, #12
 80077e6:	bf38      	it	cc
 80077e8:	250c      	movcc	r5, #12
 80077ea:	2d00      	cmp	r5, #0
 80077ec:	4606      	mov	r6, r0
 80077ee:	db01      	blt.n	80077f4 <_malloc_r+0x1c>
 80077f0:	42a9      	cmp	r1, r5
 80077f2:	d904      	bls.n	80077fe <_malloc_r+0x26>
 80077f4:	230c      	movs	r3, #12
 80077f6:	6033      	str	r3, [r6, #0]
 80077f8:	2000      	movs	r0, #0
 80077fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078d4 <_malloc_r+0xfc>
 8007802:	f000 f869 	bl	80078d8 <__malloc_lock>
 8007806:	f8d8 3000 	ldr.w	r3, [r8]
 800780a:	461c      	mov	r4, r3
 800780c:	bb44      	cbnz	r4, 8007860 <_malloc_r+0x88>
 800780e:	4629      	mov	r1, r5
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff ffbf 	bl	8007794 <sbrk_aligned>
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	4604      	mov	r4, r0
 800781a:	d158      	bne.n	80078ce <_malloc_r+0xf6>
 800781c:	f8d8 4000 	ldr.w	r4, [r8]
 8007820:	4627      	mov	r7, r4
 8007822:	2f00      	cmp	r7, #0
 8007824:	d143      	bne.n	80078ae <_malloc_r+0xd6>
 8007826:	2c00      	cmp	r4, #0
 8007828:	d04b      	beq.n	80078c2 <_malloc_r+0xea>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	4639      	mov	r1, r7
 800782e:	4630      	mov	r0, r6
 8007830:	eb04 0903 	add.w	r9, r4, r3
 8007834:	f001 fdc2 	bl	80093bc <_sbrk_r>
 8007838:	4581      	cmp	r9, r0
 800783a:	d142      	bne.n	80078c2 <_malloc_r+0xea>
 800783c:	6821      	ldr	r1, [r4, #0]
 800783e:	1a6d      	subs	r5, r5, r1
 8007840:	4629      	mov	r1, r5
 8007842:	4630      	mov	r0, r6
 8007844:	f7ff ffa6 	bl	8007794 <sbrk_aligned>
 8007848:	3001      	adds	r0, #1
 800784a:	d03a      	beq.n	80078c2 <_malloc_r+0xea>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	442b      	add	r3, r5
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	f8d8 3000 	ldr.w	r3, [r8]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	bb62      	cbnz	r2, 80078b4 <_malloc_r+0xdc>
 800785a:	f8c8 7000 	str.w	r7, [r8]
 800785e:	e00f      	b.n	8007880 <_malloc_r+0xa8>
 8007860:	6822      	ldr	r2, [r4, #0]
 8007862:	1b52      	subs	r2, r2, r5
 8007864:	d420      	bmi.n	80078a8 <_malloc_r+0xd0>
 8007866:	2a0b      	cmp	r2, #11
 8007868:	d917      	bls.n	800789a <_malloc_r+0xc2>
 800786a:	1961      	adds	r1, r4, r5
 800786c:	42a3      	cmp	r3, r4
 800786e:	6025      	str	r5, [r4, #0]
 8007870:	bf18      	it	ne
 8007872:	6059      	strne	r1, [r3, #4]
 8007874:	6863      	ldr	r3, [r4, #4]
 8007876:	bf08      	it	eq
 8007878:	f8c8 1000 	streq.w	r1, [r8]
 800787c:	5162      	str	r2, [r4, r5]
 800787e:	604b      	str	r3, [r1, #4]
 8007880:	4630      	mov	r0, r6
 8007882:	f000 f82f 	bl	80078e4 <__malloc_unlock>
 8007886:	f104 000b 	add.w	r0, r4, #11
 800788a:	1d23      	adds	r3, r4, #4
 800788c:	f020 0007 	bic.w	r0, r0, #7
 8007890:	1ac2      	subs	r2, r0, r3
 8007892:	bf1c      	itt	ne
 8007894:	1a1b      	subne	r3, r3, r0
 8007896:	50a3      	strne	r3, [r4, r2]
 8007898:	e7af      	b.n	80077fa <_malloc_r+0x22>
 800789a:	6862      	ldr	r2, [r4, #4]
 800789c:	42a3      	cmp	r3, r4
 800789e:	bf0c      	ite	eq
 80078a0:	f8c8 2000 	streq.w	r2, [r8]
 80078a4:	605a      	strne	r2, [r3, #4]
 80078a6:	e7eb      	b.n	8007880 <_malloc_r+0xa8>
 80078a8:	4623      	mov	r3, r4
 80078aa:	6864      	ldr	r4, [r4, #4]
 80078ac:	e7ae      	b.n	800780c <_malloc_r+0x34>
 80078ae:	463c      	mov	r4, r7
 80078b0:	687f      	ldr	r7, [r7, #4]
 80078b2:	e7b6      	b.n	8007822 <_malloc_r+0x4a>
 80078b4:	461a      	mov	r2, r3
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	d1fb      	bne.n	80078b4 <_malloc_r+0xdc>
 80078bc:	2300      	movs	r3, #0
 80078be:	6053      	str	r3, [r2, #4]
 80078c0:	e7de      	b.n	8007880 <_malloc_r+0xa8>
 80078c2:	230c      	movs	r3, #12
 80078c4:	6033      	str	r3, [r6, #0]
 80078c6:	4630      	mov	r0, r6
 80078c8:	f000 f80c 	bl	80078e4 <__malloc_unlock>
 80078cc:	e794      	b.n	80077f8 <_malloc_r+0x20>
 80078ce:	6005      	str	r5, [r0, #0]
 80078d0:	e7d6      	b.n	8007880 <_malloc_r+0xa8>
 80078d2:	bf00      	nop
 80078d4:	20000860 	.word	0x20000860

080078d8 <__malloc_lock>:
 80078d8:	4801      	ldr	r0, [pc, #4]	@ (80078e0 <__malloc_lock+0x8>)
 80078da:	f7ff b8b2 	b.w	8006a42 <__retarget_lock_acquire_recursive>
 80078de:	bf00      	nop
 80078e0:	20000858 	.word	0x20000858

080078e4 <__malloc_unlock>:
 80078e4:	4801      	ldr	r0, [pc, #4]	@ (80078ec <__malloc_unlock+0x8>)
 80078e6:	f7ff b8ad 	b.w	8006a44 <__retarget_lock_release_recursive>
 80078ea:	bf00      	nop
 80078ec:	20000858 	.word	0x20000858

080078f0 <_Balloc>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	69c6      	ldr	r6, [r0, #28]
 80078f4:	4604      	mov	r4, r0
 80078f6:	460d      	mov	r5, r1
 80078f8:	b976      	cbnz	r6, 8007918 <_Balloc+0x28>
 80078fa:	2010      	movs	r0, #16
 80078fc:	f7ff ff42 	bl	8007784 <malloc>
 8007900:	4602      	mov	r2, r0
 8007902:	61e0      	str	r0, [r4, #28]
 8007904:	b920      	cbnz	r0, 8007910 <_Balloc+0x20>
 8007906:	4b18      	ldr	r3, [pc, #96]	@ (8007968 <_Balloc+0x78>)
 8007908:	4818      	ldr	r0, [pc, #96]	@ (800796c <_Balloc+0x7c>)
 800790a:	216b      	movs	r1, #107	@ 0x6b
 800790c:	f001 fd7c 	bl	8009408 <__assert_func>
 8007910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007914:	6006      	str	r6, [r0, #0]
 8007916:	60c6      	str	r6, [r0, #12]
 8007918:	69e6      	ldr	r6, [r4, #28]
 800791a:	68f3      	ldr	r3, [r6, #12]
 800791c:	b183      	cbz	r3, 8007940 <_Balloc+0x50>
 800791e:	69e3      	ldr	r3, [r4, #28]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007926:	b9b8      	cbnz	r0, 8007958 <_Balloc+0x68>
 8007928:	2101      	movs	r1, #1
 800792a:	fa01 f605 	lsl.w	r6, r1, r5
 800792e:	1d72      	adds	r2, r6, #5
 8007930:	0092      	lsls	r2, r2, #2
 8007932:	4620      	mov	r0, r4
 8007934:	f001 fd86 	bl	8009444 <_calloc_r>
 8007938:	b160      	cbz	r0, 8007954 <_Balloc+0x64>
 800793a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800793e:	e00e      	b.n	800795e <_Balloc+0x6e>
 8007940:	2221      	movs	r2, #33	@ 0x21
 8007942:	2104      	movs	r1, #4
 8007944:	4620      	mov	r0, r4
 8007946:	f001 fd7d 	bl	8009444 <_calloc_r>
 800794a:	69e3      	ldr	r3, [r4, #28]
 800794c:	60f0      	str	r0, [r6, #12]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e4      	bne.n	800791e <_Balloc+0x2e>
 8007954:	2000      	movs	r0, #0
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	6802      	ldr	r2, [r0, #0]
 800795a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800795e:	2300      	movs	r3, #0
 8007960:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007964:	e7f7      	b.n	8007956 <_Balloc+0x66>
 8007966:	bf00      	nop
 8007968:	0800a90e 	.word	0x0800a90e
 800796c:	0800a98e 	.word	0x0800a98e

08007970 <_Bfree>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	69c6      	ldr	r6, [r0, #28]
 8007974:	4605      	mov	r5, r0
 8007976:	460c      	mov	r4, r1
 8007978:	b976      	cbnz	r6, 8007998 <_Bfree+0x28>
 800797a:	2010      	movs	r0, #16
 800797c:	f7ff ff02 	bl	8007784 <malloc>
 8007980:	4602      	mov	r2, r0
 8007982:	61e8      	str	r0, [r5, #28]
 8007984:	b920      	cbnz	r0, 8007990 <_Bfree+0x20>
 8007986:	4b09      	ldr	r3, [pc, #36]	@ (80079ac <_Bfree+0x3c>)
 8007988:	4809      	ldr	r0, [pc, #36]	@ (80079b0 <_Bfree+0x40>)
 800798a:	218f      	movs	r1, #143	@ 0x8f
 800798c:	f001 fd3c 	bl	8009408 <__assert_func>
 8007990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007994:	6006      	str	r6, [r0, #0]
 8007996:	60c6      	str	r6, [r0, #12]
 8007998:	b13c      	cbz	r4, 80079aa <_Bfree+0x3a>
 800799a:	69eb      	ldr	r3, [r5, #28]
 800799c:	6862      	ldr	r2, [r4, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079a4:	6021      	str	r1, [r4, #0]
 80079a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	0800a90e 	.word	0x0800a90e
 80079b0:	0800a98e 	.word	0x0800a98e

080079b4 <__multadd>:
 80079b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	690d      	ldr	r5, [r1, #16]
 80079ba:	4607      	mov	r7, r0
 80079bc:	460c      	mov	r4, r1
 80079be:	461e      	mov	r6, r3
 80079c0:	f101 0c14 	add.w	ip, r1, #20
 80079c4:	2000      	movs	r0, #0
 80079c6:	f8dc 3000 	ldr.w	r3, [ip]
 80079ca:	b299      	uxth	r1, r3
 80079cc:	fb02 6101 	mla	r1, r2, r1, r6
 80079d0:	0c1e      	lsrs	r6, r3, #16
 80079d2:	0c0b      	lsrs	r3, r1, #16
 80079d4:	fb02 3306 	mla	r3, r2, r6, r3
 80079d8:	b289      	uxth	r1, r1
 80079da:	3001      	adds	r0, #1
 80079dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079e0:	4285      	cmp	r5, r0
 80079e2:	f84c 1b04 	str.w	r1, [ip], #4
 80079e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ea:	dcec      	bgt.n	80079c6 <__multadd+0x12>
 80079ec:	b30e      	cbz	r6, 8007a32 <__multadd+0x7e>
 80079ee:	68a3      	ldr	r3, [r4, #8]
 80079f0:	42ab      	cmp	r3, r5
 80079f2:	dc19      	bgt.n	8007a28 <__multadd+0x74>
 80079f4:	6861      	ldr	r1, [r4, #4]
 80079f6:	4638      	mov	r0, r7
 80079f8:	3101      	adds	r1, #1
 80079fa:	f7ff ff79 	bl	80078f0 <_Balloc>
 80079fe:	4680      	mov	r8, r0
 8007a00:	b928      	cbnz	r0, 8007a0e <__multadd+0x5a>
 8007a02:	4602      	mov	r2, r0
 8007a04:	4b0c      	ldr	r3, [pc, #48]	@ (8007a38 <__multadd+0x84>)
 8007a06:	480d      	ldr	r0, [pc, #52]	@ (8007a3c <__multadd+0x88>)
 8007a08:	21ba      	movs	r1, #186	@ 0xba
 8007a0a:	f001 fcfd 	bl	8009408 <__assert_func>
 8007a0e:	6922      	ldr	r2, [r4, #16]
 8007a10:	3202      	adds	r2, #2
 8007a12:	f104 010c 	add.w	r1, r4, #12
 8007a16:	0092      	lsls	r2, r2, #2
 8007a18:	300c      	adds	r0, #12
 8007a1a:	f001 fcdf 	bl	80093dc <memcpy>
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7ff ffa5 	bl	8007970 <_Bfree>
 8007a26:	4644      	mov	r4, r8
 8007a28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	615e      	str	r6, [r3, #20]
 8007a30:	6125      	str	r5, [r4, #16]
 8007a32:	4620      	mov	r0, r4
 8007a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a38:	0800a97d 	.word	0x0800a97d
 8007a3c:	0800a98e 	.word	0x0800a98e

08007a40 <__s2b>:
 8007a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a44:	460c      	mov	r4, r1
 8007a46:	4615      	mov	r5, r2
 8007a48:	461f      	mov	r7, r3
 8007a4a:	2209      	movs	r2, #9
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	4606      	mov	r6, r0
 8007a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a54:	2100      	movs	r1, #0
 8007a56:	2201      	movs	r2, #1
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	db09      	blt.n	8007a70 <__s2b+0x30>
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7ff ff47 	bl	80078f0 <_Balloc>
 8007a62:	b940      	cbnz	r0, 8007a76 <__s2b+0x36>
 8007a64:	4602      	mov	r2, r0
 8007a66:	4b19      	ldr	r3, [pc, #100]	@ (8007acc <__s2b+0x8c>)
 8007a68:	4819      	ldr	r0, [pc, #100]	@ (8007ad0 <__s2b+0x90>)
 8007a6a:	21d3      	movs	r1, #211	@ 0xd3
 8007a6c:	f001 fccc 	bl	8009408 <__assert_func>
 8007a70:	0052      	lsls	r2, r2, #1
 8007a72:	3101      	adds	r1, #1
 8007a74:	e7f0      	b.n	8007a58 <__s2b+0x18>
 8007a76:	9b08      	ldr	r3, [sp, #32]
 8007a78:	6143      	str	r3, [r0, #20]
 8007a7a:	2d09      	cmp	r5, #9
 8007a7c:	f04f 0301 	mov.w	r3, #1
 8007a80:	6103      	str	r3, [r0, #16]
 8007a82:	dd16      	ble.n	8007ab2 <__s2b+0x72>
 8007a84:	f104 0909 	add.w	r9, r4, #9
 8007a88:	46c8      	mov	r8, r9
 8007a8a:	442c      	add	r4, r5
 8007a8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a90:	4601      	mov	r1, r0
 8007a92:	3b30      	subs	r3, #48	@ 0x30
 8007a94:	220a      	movs	r2, #10
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7ff ff8c 	bl	80079b4 <__multadd>
 8007a9c:	45a0      	cmp	r8, r4
 8007a9e:	d1f5      	bne.n	8007a8c <__s2b+0x4c>
 8007aa0:	f1a5 0408 	sub.w	r4, r5, #8
 8007aa4:	444c      	add	r4, r9
 8007aa6:	1b2d      	subs	r5, r5, r4
 8007aa8:	1963      	adds	r3, r4, r5
 8007aaa:	42bb      	cmp	r3, r7
 8007aac:	db04      	blt.n	8007ab8 <__s2b+0x78>
 8007aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab2:	340a      	adds	r4, #10
 8007ab4:	2509      	movs	r5, #9
 8007ab6:	e7f6      	b.n	8007aa6 <__s2b+0x66>
 8007ab8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007abc:	4601      	mov	r1, r0
 8007abe:	3b30      	subs	r3, #48	@ 0x30
 8007ac0:	220a      	movs	r2, #10
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f7ff ff76 	bl	80079b4 <__multadd>
 8007ac8:	e7ee      	b.n	8007aa8 <__s2b+0x68>
 8007aca:	bf00      	nop
 8007acc:	0800a97d 	.word	0x0800a97d
 8007ad0:	0800a98e 	.word	0x0800a98e

08007ad4 <__hi0bits>:
 8007ad4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ad8:	4603      	mov	r3, r0
 8007ada:	bf36      	itet	cc
 8007adc:	0403      	lslcc	r3, r0, #16
 8007ade:	2000      	movcs	r0, #0
 8007ae0:	2010      	movcc	r0, #16
 8007ae2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ae6:	bf3c      	itt	cc
 8007ae8:	021b      	lslcc	r3, r3, #8
 8007aea:	3008      	addcc	r0, #8
 8007aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007af0:	bf3c      	itt	cc
 8007af2:	011b      	lslcc	r3, r3, #4
 8007af4:	3004      	addcc	r0, #4
 8007af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007afa:	bf3c      	itt	cc
 8007afc:	009b      	lslcc	r3, r3, #2
 8007afe:	3002      	addcc	r0, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	db05      	blt.n	8007b10 <__hi0bits+0x3c>
 8007b04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b08:	f100 0001 	add.w	r0, r0, #1
 8007b0c:	bf08      	it	eq
 8007b0e:	2020      	moveq	r0, #32
 8007b10:	4770      	bx	lr

08007b12 <__lo0bits>:
 8007b12:	6803      	ldr	r3, [r0, #0]
 8007b14:	4602      	mov	r2, r0
 8007b16:	f013 0007 	ands.w	r0, r3, #7
 8007b1a:	d00b      	beq.n	8007b34 <__lo0bits+0x22>
 8007b1c:	07d9      	lsls	r1, r3, #31
 8007b1e:	d421      	bmi.n	8007b64 <__lo0bits+0x52>
 8007b20:	0798      	lsls	r0, r3, #30
 8007b22:	bf49      	itett	mi
 8007b24:	085b      	lsrmi	r3, r3, #1
 8007b26:	089b      	lsrpl	r3, r3, #2
 8007b28:	2001      	movmi	r0, #1
 8007b2a:	6013      	strmi	r3, [r2, #0]
 8007b2c:	bf5c      	itt	pl
 8007b2e:	6013      	strpl	r3, [r2, #0]
 8007b30:	2002      	movpl	r0, #2
 8007b32:	4770      	bx	lr
 8007b34:	b299      	uxth	r1, r3
 8007b36:	b909      	cbnz	r1, 8007b3c <__lo0bits+0x2a>
 8007b38:	0c1b      	lsrs	r3, r3, #16
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	b2d9      	uxtb	r1, r3
 8007b3e:	b909      	cbnz	r1, 8007b44 <__lo0bits+0x32>
 8007b40:	3008      	adds	r0, #8
 8007b42:	0a1b      	lsrs	r3, r3, #8
 8007b44:	0719      	lsls	r1, r3, #28
 8007b46:	bf04      	itt	eq
 8007b48:	091b      	lsreq	r3, r3, #4
 8007b4a:	3004      	addeq	r0, #4
 8007b4c:	0799      	lsls	r1, r3, #30
 8007b4e:	bf04      	itt	eq
 8007b50:	089b      	lsreq	r3, r3, #2
 8007b52:	3002      	addeq	r0, #2
 8007b54:	07d9      	lsls	r1, r3, #31
 8007b56:	d403      	bmi.n	8007b60 <__lo0bits+0x4e>
 8007b58:	085b      	lsrs	r3, r3, #1
 8007b5a:	f100 0001 	add.w	r0, r0, #1
 8007b5e:	d003      	beq.n	8007b68 <__lo0bits+0x56>
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	4770      	bx	lr
 8007b64:	2000      	movs	r0, #0
 8007b66:	4770      	bx	lr
 8007b68:	2020      	movs	r0, #32
 8007b6a:	4770      	bx	lr

08007b6c <__i2b>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	460c      	mov	r4, r1
 8007b70:	2101      	movs	r1, #1
 8007b72:	f7ff febd 	bl	80078f0 <_Balloc>
 8007b76:	4602      	mov	r2, r0
 8007b78:	b928      	cbnz	r0, 8007b86 <__i2b+0x1a>
 8007b7a:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <__i2b+0x24>)
 8007b7c:	4805      	ldr	r0, [pc, #20]	@ (8007b94 <__i2b+0x28>)
 8007b7e:	f240 1145 	movw	r1, #325	@ 0x145
 8007b82:	f001 fc41 	bl	8009408 <__assert_func>
 8007b86:	2301      	movs	r3, #1
 8007b88:	6144      	str	r4, [r0, #20]
 8007b8a:	6103      	str	r3, [r0, #16]
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	bf00      	nop
 8007b90:	0800a97d 	.word	0x0800a97d
 8007b94:	0800a98e 	.word	0x0800a98e

08007b98 <__multiply>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	690a      	ldr	r2, [r1, #16]
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	bfa8      	it	ge
 8007ba6:	4623      	movge	r3, r4
 8007ba8:	460f      	mov	r7, r1
 8007baa:	bfa4      	itt	ge
 8007bac:	460c      	movge	r4, r1
 8007bae:	461f      	movge	r7, r3
 8007bb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007bb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007bb8:	68a3      	ldr	r3, [r4, #8]
 8007bba:	6861      	ldr	r1, [r4, #4]
 8007bbc:	eb0a 0609 	add.w	r6, sl, r9
 8007bc0:	42b3      	cmp	r3, r6
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	bfb8      	it	lt
 8007bc6:	3101      	addlt	r1, #1
 8007bc8:	f7ff fe92 	bl	80078f0 <_Balloc>
 8007bcc:	b930      	cbnz	r0, 8007bdc <__multiply+0x44>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	4b44      	ldr	r3, [pc, #272]	@ (8007ce4 <__multiply+0x14c>)
 8007bd2:	4845      	ldr	r0, [pc, #276]	@ (8007ce8 <__multiply+0x150>)
 8007bd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007bd8:	f001 fc16 	bl	8009408 <__assert_func>
 8007bdc:	f100 0514 	add.w	r5, r0, #20
 8007be0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007be4:	462b      	mov	r3, r5
 8007be6:	2200      	movs	r2, #0
 8007be8:	4543      	cmp	r3, r8
 8007bea:	d321      	bcc.n	8007c30 <__multiply+0x98>
 8007bec:	f107 0114 	add.w	r1, r7, #20
 8007bf0:	f104 0214 	add.w	r2, r4, #20
 8007bf4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007bf8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007bfc:	9302      	str	r3, [sp, #8]
 8007bfe:	1b13      	subs	r3, r2, r4
 8007c00:	3b15      	subs	r3, #21
 8007c02:	f023 0303 	bic.w	r3, r3, #3
 8007c06:	3304      	adds	r3, #4
 8007c08:	f104 0715 	add.w	r7, r4, #21
 8007c0c:	42ba      	cmp	r2, r7
 8007c0e:	bf38      	it	cc
 8007c10:	2304      	movcc	r3, #4
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	9b02      	ldr	r3, [sp, #8]
 8007c16:	9103      	str	r1, [sp, #12]
 8007c18:	428b      	cmp	r3, r1
 8007c1a:	d80c      	bhi.n	8007c36 <__multiply+0x9e>
 8007c1c:	2e00      	cmp	r6, #0
 8007c1e:	dd03      	ble.n	8007c28 <__multiply+0x90>
 8007c20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d05b      	beq.n	8007ce0 <__multiply+0x148>
 8007c28:	6106      	str	r6, [r0, #16]
 8007c2a:	b005      	add	sp, #20
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	f843 2b04 	str.w	r2, [r3], #4
 8007c34:	e7d8      	b.n	8007be8 <__multiply+0x50>
 8007c36:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c3a:	f1ba 0f00 	cmp.w	sl, #0
 8007c3e:	d024      	beq.n	8007c8a <__multiply+0xf2>
 8007c40:	f104 0e14 	add.w	lr, r4, #20
 8007c44:	46a9      	mov	r9, r5
 8007c46:	f04f 0c00 	mov.w	ip, #0
 8007c4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c4e:	f8d9 3000 	ldr.w	r3, [r9]
 8007c52:	fa1f fb87 	uxth.w	fp, r7
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007c60:	f8d9 7000 	ldr.w	r7, [r9]
 8007c64:	4463      	add	r3, ip
 8007c66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c6a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007c6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c78:	4572      	cmp	r2, lr
 8007c7a:	f849 3b04 	str.w	r3, [r9], #4
 8007c7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c82:	d8e2      	bhi.n	8007c4a <__multiply+0xb2>
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	f845 c003 	str.w	ip, [r5, r3]
 8007c8a:	9b03      	ldr	r3, [sp, #12]
 8007c8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c90:	3104      	adds	r1, #4
 8007c92:	f1b9 0f00 	cmp.w	r9, #0
 8007c96:	d021      	beq.n	8007cdc <__multiply+0x144>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	f104 0c14 	add.w	ip, r4, #20
 8007c9e:	46ae      	mov	lr, r5
 8007ca0:	f04f 0a00 	mov.w	sl, #0
 8007ca4:	f8bc b000 	ldrh.w	fp, [ip]
 8007ca8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007cac:	fb09 770b 	mla	r7, r9, fp, r7
 8007cb0:	4457      	add	r7, sl
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cb8:	f84e 3b04 	str.w	r3, [lr], #4
 8007cbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cc4:	f8be 3000 	ldrh.w	r3, [lr]
 8007cc8:	fb09 330a 	mla	r3, r9, sl, r3
 8007ccc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007cd0:	4562      	cmp	r2, ip
 8007cd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cd6:	d8e5      	bhi.n	8007ca4 <__multiply+0x10c>
 8007cd8:	9f01      	ldr	r7, [sp, #4]
 8007cda:	51eb      	str	r3, [r5, r7]
 8007cdc:	3504      	adds	r5, #4
 8007cde:	e799      	b.n	8007c14 <__multiply+0x7c>
 8007ce0:	3e01      	subs	r6, #1
 8007ce2:	e79b      	b.n	8007c1c <__multiply+0x84>
 8007ce4:	0800a97d 	.word	0x0800a97d
 8007ce8:	0800a98e 	.word	0x0800a98e

08007cec <__pow5mult>:
 8007cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf0:	4615      	mov	r5, r2
 8007cf2:	f012 0203 	ands.w	r2, r2, #3
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	460e      	mov	r6, r1
 8007cfa:	d007      	beq.n	8007d0c <__pow5mult+0x20>
 8007cfc:	4c25      	ldr	r4, [pc, #148]	@ (8007d94 <__pow5mult+0xa8>)
 8007cfe:	3a01      	subs	r2, #1
 8007d00:	2300      	movs	r3, #0
 8007d02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d06:	f7ff fe55 	bl	80079b4 <__multadd>
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	10ad      	asrs	r5, r5, #2
 8007d0e:	d03d      	beq.n	8007d8c <__pow5mult+0xa0>
 8007d10:	69fc      	ldr	r4, [r7, #28]
 8007d12:	b97c      	cbnz	r4, 8007d34 <__pow5mult+0x48>
 8007d14:	2010      	movs	r0, #16
 8007d16:	f7ff fd35 	bl	8007784 <malloc>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	61f8      	str	r0, [r7, #28]
 8007d1e:	b928      	cbnz	r0, 8007d2c <__pow5mult+0x40>
 8007d20:	4b1d      	ldr	r3, [pc, #116]	@ (8007d98 <__pow5mult+0xac>)
 8007d22:	481e      	ldr	r0, [pc, #120]	@ (8007d9c <__pow5mult+0xb0>)
 8007d24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d28:	f001 fb6e 	bl	8009408 <__assert_func>
 8007d2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d30:	6004      	str	r4, [r0, #0]
 8007d32:	60c4      	str	r4, [r0, #12]
 8007d34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d3c:	b94c      	cbnz	r4, 8007d52 <__pow5mult+0x66>
 8007d3e:	f240 2171 	movw	r1, #625	@ 0x271
 8007d42:	4638      	mov	r0, r7
 8007d44:	f7ff ff12 	bl	8007b6c <__i2b>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d4e:	4604      	mov	r4, r0
 8007d50:	6003      	str	r3, [r0, #0]
 8007d52:	f04f 0900 	mov.w	r9, #0
 8007d56:	07eb      	lsls	r3, r5, #31
 8007d58:	d50a      	bpl.n	8007d70 <__pow5mult+0x84>
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4638      	mov	r0, r7
 8007d60:	f7ff ff1a 	bl	8007b98 <__multiply>
 8007d64:	4631      	mov	r1, r6
 8007d66:	4680      	mov	r8, r0
 8007d68:	4638      	mov	r0, r7
 8007d6a:	f7ff fe01 	bl	8007970 <_Bfree>
 8007d6e:	4646      	mov	r6, r8
 8007d70:	106d      	asrs	r5, r5, #1
 8007d72:	d00b      	beq.n	8007d8c <__pow5mult+0xa0>
 8007d74:	6820      	ldr	r0, [r4, #0]
 8007d76:	b938      	cbnz	r0, 8007d88 <__pow5mult+0x9c>
 8007d78:	4622      	mov	r2, r4
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f7ff ff0b 	bl	8007b98 <__multiply>
 8007d82:	6020      	str	r0, [r4, #0]
 8007d84:	f8c0 9000 	str.w	r9, [r0]
 8007d88:	4604      	mov	r4, r0
 8007d8a:	e7e4      	b.n	8007d56 <__pow5mult+0x6a>
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d92:	bf00      	nop
 8007d94:	0800a9e8 	.word	0x0800a9e8
 8007d98:	0800a90e 	.word	0x0800a90e
 8007d9c:	0800a98e 	.word	0x0800a98e

08007da0 <__lshift>:
 8007da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da4:	460c      	mov	r4, r1
 8007da6:	6849      	ldr	r1, [r1, #4]
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dae:	68a3      	ldr	r3, [r4, #8]
 8007db0:	4607      	mov	r7, r0
 8007db2:	4691      	mov	r9, r2
 8007db4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007db8:	f108 0601 	add.w	r6, r8, #1
 8007dbc:	42b3      	cmp	r3, r6
 8007dbe:	db0b      	blt.n	8007dd8 <__lshift+0x38>
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f7ff fd95 	bl	80078f0 <_Balloc>
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	b948      	cbnz	r0, 8007dde <__lshift+0x3e>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4b28      	ldr	r3, [pc, #160]	@ (8007e70 <__lshift+0xd0>)
 8007dce:	4829      	ldr	r0, [pc, #164]	@ (8007e74 <__lshift+0xd4>)
 8007dd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007dd4:	f001 fb18 	bl	8009408 <__assert_func>
 8007dd8:	3101      	adds	r1, #1
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	e7ee      	b.n	8007dbc <__lshift+0x1c>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f100 0114 	add.w	r1, r0, #20
 8007de4:	f100 0210 	add.w	r2, r0, #16
 8007de8:	4618      	mov	r0, r3
 8007dea:	4553      	cmp	r3, sl
 8007dec:	db33      	blt.n	8007e56 <__lshift+0xb6>
 8007dee:	6920      	ldr	r0, [r4, #16]
 8007df0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007df4:	f104 0314 	add.w	r3, r4, #20
 8007df8:	f019 091f 	ands.w	r9, r9, #31
 8007dfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e04:	d02b      	beq.n	8007e5e <__lshift+0xbe>
 8007e06:	f1c9 0e20 	rsb	lr, r9, #32
 8007e0a:	468a      	mov	sl, r1
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	fa00 f009 	lsl.w	r0, r0, r9
 8007e14:	4310      	orrs	r0, r2
 8007e16:	f84a 0b04 	str.w	r0, [sl], #4
 8007e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e1e:	459c      	cmp	ip, r3
 8007e20:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e24:	d8f3      	bhi.n	8007e0e <__lshift+0x6e>
 8007e26:	ebac 0304 	sub.w	r3, ip, r4
 8007e2a:	3b15      	subs	r3, #21
 8007e2c:	f023 0303 	bic.w	r3, r3, #3
 8007e30:	3304      	adds	r3, #4
 8007e32:	f104 0015 	add.w	r0, r4, #21
 8007e36:	4584      	cmp	ip, r0
 8007e38:	bf38      	it	cc
 8007e3a:	2304      	movcc	r3, #4
 8007e3c:	50ca      	str	r2, [r1, r3]
 8007e3e:	b10a      	cbz	r2, 8007e44 <__lshift+0xa4>
 8007e40:	f108 0602 	add.w	r6, r8, #2
 8007e44:	3e01      	subs	r6, #1
 8007e46:	4638      	mov	r0, r7
 8007e48:	612e      	str	r6, [r5, #16]
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	f7ff fd90 	bl	8007970 <_Bfree>
 8007e50:	4628      	mov	r0, r5
 8007e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e56:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	e7c5      	b.n	8007dea <__lshift+0x4a>
 8007e5e:	3904      	subs	r1, #4
 8007e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e64:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e68:	459c      	cmp	ip, r3
 8007e6a:	d8f9      	bhi.n	8007e60 <__lshift+0xc0>
 8007e6c:	e7ea      	b.n	8007e44 <__lshift+0xa4>
 8007e6e:	bf00      	nop
 8007e70:	0800a97d 	.word	0x0800a97d
 8007e74:	0800a98e 	.word	0x0800a98e

08007e78 <__mcmp>:
 8007e78:	690a      	ldr	r2, [r1, #16]
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	6900      	ldr	r0, [r0, #16]
 8007e7e:	1a80      	subs	r0, r0, r2
 8007e80:	b530      	push	{r4, r5, lr}
 8007e82:	d10e      	bne.n	8007ea2 <__mcmp+0x2a>
 8007e84:	3314      	adds	r3, #20
 8007e86:	3114      	adds	r1, #20
 8007e88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e98:	4295      	cmp	r5, r2
 8007e9a:	d003      	beq.n	8007ea4 <__mcmp+0x2c>
 8007e9c:	d205      	bcs.n	8007eaa <__mcmp+0x32>
 8007e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea2:	bd30      	pop	{r4, r5, pc}
 8007ea4:	42a3      	cmp	r3, r4
 8007ea6:	d3f3      	bcc.n	8007e90 <__mcmp+0x18>
 8007ea8:	e7fb      	b.n	8007ea2 <__mcmp+0x2a>
 8007eaa:	2001      	movs	r0, #1
 8007eac:	e7f9      	b.n	8007ea2 <__mcmp+0x2a>
	...

08007eb0 <__mdiff>:
 8007eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	4689      	mov	r9, r1
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4648      	mov	r0, r9
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	f7ff ffdb 	bl	8007e78 <__mcmp>
 8007ec2:	1e05      	subs	r5, r0, #0
 8007ec4:	d112      	bne.n	8007eec <__mdiff+0x3c>
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f7ff fd11 	bl	80078f0 <_Balloc>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	b928      	cbnz	r0, 8007ede <__mdiff+0x2e>
 8007ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8007fd0 <__mdiff+0x120>)
 8007ed4:	f240 2137 	movw	r1, #567	@ 0x237
 8007ed8:	483e      	ldr	r0, [pc, #248]	@ (8007fd4 <__mdiff+0x124>)
 8007eda:	f001 fa95 	bl	8009408 <__assert_func>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	b003      	add	sp, #12
 8007ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eec:	bfbc      	itt	lt
 8007eee:	464b      	movlt	r3, r9
 8007ef0:	46a1      	movlt	r9, r4
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ef8:	bfba      	itte	lt
 8007efa:	461c      	movlt	r4, r3
 8007efc:	2501      	movlt	r5, #1
 8007efe:	2500      	movge	r5, #0
 8007f00:	f7ff fcf6 	bl	80078f0 <_Balloc>
 8007f04:	4602      	mov	r2, r0
 8007f06:	b918      	cbnz	r0, 8007f10 <__mdiff+0x60>
 8007f08:	4b31      	ldr	r3, [pc, #196]	@ (8007fd0 <__mdiff+0x120>)
 8007f0a:	f240 2145 	movw	r1, #581	@ 0x245
 8007f0e:	e7e3      	b.n	8007ed8 <__mdiff+0x28>
 8007f10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f14:	6926      	ldr	r6, [r4, #16]
 8007f16:	60c5      	str	r5, [r0, #12]
 8007f18:	f109 0310 	add.w	r3, r9, #16
 8007f1c:	f109 0514 	add.w	r5, r9, #20
 8007f20:	f104 0e14 	add.w	lr, r4, #20
 8007f24:	f100 0b14 	add.w	fp, r0, #20
 8007f28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	46d9      	mov	r9, fp
 8007f34:	f04f 0c00 	mov.w	ip, #0
 8007f38:	9b01      	ldr	r3, [sp, #4]
 8007f3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	fa1f f38a 	uxth.w	r3, sl
 8007f48:	4619      	mov	r1, r3
 8007f4a:	b283      	uxth	r3, r0
 8007f4c:	1acb      	subs	r3, r1, r3
 8007f4e:	0c00      	lsrs	r0, r0, #16
 8007f50:	4463      	add	r3, ip
 8007f52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f60:	4576      	cmp	r6, lr
 8007f62:	f849 3b04 	str.w	r3, [r9], #4
 8007f66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f6a:	d8e5      	bhi.n	8007f38 <__mdiff+0x88>
 8007f6c:	1b33      	subs	r3, r6, r4
 8007f6e:	3b15      	subs	r3, #21
 8007f70:	f023 0303 	bic.w	r3, r3, #3
 8007f74:	3415      	adds	r4, #21
 8007f76:	3304      	adds	r3, #4
 8007f78:	42a6      	cmp	r6, r4
 8007f7a:	bf38      	it	cc
 8007f7c:	2304      	movcc	r3, #4
 8007f7e:	441d      	add	r5, r3
 8007f80:	445b      	add	r3, fp
 8007f82:	461e      	mov	r6, r3
 8007f84:	462c      	mov	r4, r5
 8007f86:	4544      	cmp	r4, r8
 8007f88:	d30e      	bcc.n	8007fa8 <__mdiff+0xf8>
 8007f8a:	f108 0103 	add.w	r1, r8, #3
 8007f8e:	1b49      	subs	r1, r1, r5
 8007f90:	f021 0103 	bic.w	r1, r1, #3
 8007f94:	3d03      	subs	r5, #3
 8007f96:	45a8      	cmp	r8, r5
 8007f98:	bf38      	it	cc
 8007f9a:	2100      	movcc	r1, #0
 8007f9c:	440b      	add	r3, r1
 8007f9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fa2:	b191      	cbz	r1, 8007fca <__mdiff+0x11a>
 8007fa4:	6117      	str	r7, [r2, #16]
 8007fa6:	e79d      	b.n	8007ee4 <__mdiff+0x34>
 8007fa8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007fac:	46e6      	mov	lr, ip
 8007fae:	0c08      	lsrs	r0, r1, #16
 8007fb0:	fa1c fc81 	uxtah	ip, ip, r1
 8007fb4:	4471      	add	r1, lr
 8007fb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007fba:	b289      	uxth	r1, r1
 8007fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007fc0:	f846 1b04 	str.w	r1, [r6], #4
 8007fc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fc8:	e7dd      	b.n	8007f86 <__mdiff+0xd6>
 8007fca:	3f01      	subs	r7, #1
 8007fcc:	e7e7      	b.n	8007f9e <__mdiff+0xee>
 8007fce:	bf00      	nop
 8007fd0:	0800a97d 	.word	0x0800a97d
 8007fd4:	0800a98e 	.word	0x0800a98e

08007fd8 <__ulp>:
 8007fd8:	b082      	sub	sp, #8
 8007fda:	ed8d 0b00 	vstr	d0, [sp]
 8007fde:	9a01      	ldr	r2, [sp, #4]
 8007fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8008020 <__ulp+0x48>)
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dc08      	bgt.n	8007ffe <__ulp+0x26>
 8007fec:	425b      	negs	r3, r3
 8007fee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007ff2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ff6:	da04      	bge.n	8008002 <__ulp+0x2a>
 8007ff8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007ffc:	4113      	asrs	r3, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	e008      	b.n	8008014 <__ulp+0x3c>
 8008002:	f1a2 0314 	sub.w	r3, r2, #20
 8008006:	2b1e      	cmp	r3, #30
 8008008:	bfda      	itte	le
 800800a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800800e:	40da      	lsrle	r2, r3
 8008010:	2201      	movgt	r2, #1
 8008012:	2300      	movs	r3, #0
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	ec41 0b10 	vmov	d0, r0, r1
 800801c:	b002      	add	sp, #8
 800801e:	4770      	bx	lr
 8008020:	7ff00000 	.word	0x7ff00000

08008024 <__b2d>:
 8008024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008028:	6906      	ldr	r6, [r0, #16]
 800802a:	f100 0814 	add.w	r8, r0, #20
 800802e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008032:	1f37      	subs	r7, r6, #4
 8008034:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008038:	4610      	mov	r0, r2
 800803a:	f7ff fd4b 	bl	8007ad4 <__hi0bits>
 800803e:	f1c0 0320 	rsb	r3, r0, #32
 8008042:	280a      	cmp	r0, #10
 8008044:	600b      	str	r3, [r1, #0]
 8008046:	491b      	ldr	r1, [pc, #108]	@ (80080b4 <__b2d+0x90>)
 8008048:	dc15      	bgt.n	8008076 <__b2d+0x52>
 800804a:	f1c0 0c0b 	rsb	ip, r0, #11
 800804e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008052:	45b8      	cmp	r8, r7
 8008054:	ea43 0501 	orr.w	r5, r3, r1
 8008058:	bf34      	ite	cc
 800805a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800805e:	2300      	movcs	r3, #0
 8008060:	3015      	adds	r0, #21
 8008062:	fa02 f000 	lsl.w	r0, r2, r0
 8008066:	fa23 f30c 	lsr.w	r3, r3, ip
 800806a:	4303      	orrs	r3, r0
 800806c:	461c      	mov	r4, r3
 800806e:	ec45 4b10 	vmov	d0, r4, r5
 8008072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008076:	45b8      	cmp	r8, r7
 8008078:	bf3a      	itte	cc
 800807a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800807e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008082:	2300      	movcs	r3, #0
 8008084:	380b      	subs	r0, #11
 8008086:	d012      	beq.n	80080ae <__b2d+0x8a>
 8008088:	f1c0 0120 	rsb	r1, r0, #32
 800808c:	fa23 f401 	lsr.w	r4, r3, r1
 8008090:	4082      	lsls	r2, r0
 8008092:	4322      	orrs	r2, r4
 8008094:	4547      	cmp	r7, r8
 8008096:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800809a:	bf8c      	ite	hi
 800809c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80080a0:	2200      	movls	r2, #0
 80080a2:	4083      	lsls	r3, r0
 80080a4:	40ca      	lsrs	r2, r1
 80080a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80080aa:	4313      	orrs	r3, r2
 80080ac:	e7de      	b.n	800806c <__b2d+0x48>
 80080ae:	ea42 0501 	orr.w	r5, r2, r1
 80080b2:	e7db      	b.n	800806c <__b2d+0x48>
 80080b4:	3ff00000 	.word	0x3ff00000

080080b8 <__d2b>:
 80080b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080bc:	460f      	mov	r7, r1
 80080be:	2101      	movs	r1, #1
 80080c0:	ec59 8b10 	vmov	r8, r9, d0
 80080c4:	4616      	mov	r6, r2
 80080c6:	f7ff fc13 	bl	80078f0 <_Balloc>
 80080ca:	4604      	mov	r4, r0
 80080cc:	b930      	cbnz	r0, 80080dc <__d2b+0x24>
 80080ce:	4602      	mov	r2, r0
 80080d0:	4b23      	ldr	r3, [pc, #140]	@ (8008160 <__d2b+0xa8>)
 80080d2:	4824      	ldr	r0, [pc, #144]	@ (8008164 <__d2b+0xac>)
 80080d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80080d8:	f001 f996 	bl	8009408 <__assert_func>
 80080dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080e4:	b10d      	cbz	r5, 80080ea <__d2b+0x32>
 80080e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	f1b8 0300 	subs.w	r3, r8, #0
 80080f0:	d023      	beq.n	800813a <__d2b+0x82>
 80080f2:	4668      	mov	r0, sp
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	f7ff fd0c 	bl	8007b12 <__lo0bits>
 80080fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080fe:	b1d0      	cbz	r0, 8008136 <__d2b+0x7e>
 8008100:	f1c0 0320 	rsb	r3, r0, #32
 8008104:	fa02 f303 	lsl.w	r3, r2, r3
 8008108:	430b      	orrs	r3, r1
 800810a:	40c2      	lsrs	r2, r0
 800810c:	6163      	str	r3, [r4, #20]
 800810e:	9201      	str	r2, [sp, #4]
 8008110:	9b01      	ldr	r3, [sp, #4]
 8008112:	61a3      	str	r3, [r4, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	bf0c      	ite	eq
 8008118:	2201      	moveq	r2, #1
 800811a:	2202      	movne	r2, #2
 800811c:	6122      	str	r2, [r4, #16]
 800811e:	b1a5      	cbz	r5, 800814a <__d2b+0x92>
 8008120:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008124:	4405      	add	r5, r0
 8008126:	603d      	str	r5, [r7, #0]
 8008128:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800812c:	6030      	str	r0, [r6, #0]
 800812e:	4620      	mov	r0, r4
 8008130:	b003      	add	sp, #12
 8008132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008136:	6161      	str	r1, [r4, #20]
 8008138:	e7ea      	b.n	8008110 <__d2b+0x58>
 800813a:	a801      	add	r0, sp, #4
 800813c:	f7ff fce9 	bl	8007b12 <__lo0bits>
 8008140:	9b01      	ldr	r3, [sp, #4]
 8008142:	6163      	str	r3, [r4, #20]
 8008144:	3020      	adds	r0, #32
 8008146:	2201      	movs	r2, #1
 8008148:	e7e8      	b.n	800811c <__d2b+0x64>
 800814a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800814e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008152:	6038      	str	r0, [r7, #0]
 8008154:	6918      	ldr	r0, [r3, #16]
 8008156:	f7ff fcbd 	bl	8007ad4 <__hi0bits>
 800815a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800815e:	e7e5      	b.n	800812c <__d2b+0x74>
 8008160:	0800a97d 	.word	0x0800a97d
 8008164:	0800a98e 	.word	0x0800a98e

08008168 <__ratio>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	b085      	sub	sp, #20
 800816e:	e9cd 1000 	strd	r1, r0, [sp]
 8008172:	a902      	add	r1, sp, #8
 8008174:	f7ff ff56 	bl	8008024 <__b2d>
 8008178:	9800      	ldr	r0, [sp, #0]
 800817a:	a903      	add	r1, sp, #12
 800817c:	ec55 4b10 	vmov	r4, r5, d0
 8008180:	f7ff ff50 	bl	8008024 <__b2d>
 8008184:	9b01      	ldr	r3, [sp, #4]
 8008186:	6919      	ldr	r1, [r3, #16]
 8008188:	9b00      	ldr	r3, [sp, #0]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	1ac9      	subs	r1, r1, r3
 800818e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	ec5b ab10 	vmov	sl, fp, d0
 8008198:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800819c:	2b00      	cmp	r3, #0
 800819e:	bfce      	itee	gt
 80081a0:	462a      	movgt	r2, r5
 80081a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80081a6:	465a      	movle	r2, fp
 80081a8:	462f      	mov	r7, r5
 80081aa:	46d9      	mov	r9, fp
 80081ac:	bfcc      	ite	gt
 80081ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80081b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80081b6:	464b      	mov	r3, r9
 80081b8:	4652      	mov	r2, sl
 80081ba:	4620      	mov	r0, r4
 80081bc:	4639      	mov	r1, r7
 80081be:	f7f8 fb65 	bl	800088c <__aeabi_ddiv>
 80081c2:	ec41 0b10 	vmov	d0, r0, r1
 80081c6:	b005      	add	sp, #20
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081cc <__copybits>:
 80081cc:	3901      	subs	r1, #1
 80081ce:	b570      	push	{r4, r5, r6, lr}
 80081d0:	1149      	asrs	r1, r1, #5
 80081d2:	6914      	ldr	r4, [r2, #16]
 80081d4:	3101      	adds	r1, #1
 80081d6:	f102 0314 	add.w	r3, r2, #20
 80081da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081e2:	1f05      	subs	r5, r0, #4
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d30c      	bcc.n	8008202 <__copybits+0x36>
 80081e8:	1aa3      	subs	r3, r4, r2
 80081ea:	3b11      	subs	r3, #17
 80081ec:	f023 0303 	bic.w	r3, r3, #3
 80081f0:	3211      	adds	r2, #17
 80081f2:	42a2      	cmp	r2, r4
 80081f4:	bf88      	it	hi
 80081f6:	2300      	movhi	r3, #0
 80081f8:	4418      	add	r0, r3
 80081fa:	2300      	movs	r3, #0
 80081fc:	4288      	cmp	r0, r1
 80081fe:	d305      	bcc.n	800820c <__copybits+0x40>
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	f853 6b04 	ldr.w	r6, [r3], #4
 8008206:	f845 6f04 	str.w	r6, [r5, #4]!
 800820a:	e7eb      	b.n	80081e4 <__copybits+0x18>
 800820c:	f840 3b04 	str.w	r3, [r0], #4
 8008210:	e7f4      	b.n	80081fc <__copybits+0x30>

08008212 <__any_on>:
 8008212:	f100 0214 	add.w	r2, r0, #20
 8008216:	6900      	ldr	r0, [r0, #16]
 8008218:	114b      	asrs	r3, r1, #5
 800821a:	4298      	cmp	r0, r3
 800821c:	b510      	push	{r4, lr}
 800821e:	db11      	blt.n	8008244 <__any_on+0x32>
 8008220:	dd0a      	ble.n	8008238 <__any_on+0x26>
 8008222:	f011 011f 	ands.w	r1, r1, #31
 8008226:	d007      	beq.n	8008238 <__any_on+0x26>
 8008228:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800822c:	fa24 f001 	lsr.w	r0, r4, r1
 8008230:	fa00 f101 	lsl.w	r1, r0, r1
 8008234:	428c      	cmp	r4, r1
 8008236:	d10b      	bne.n	8008250 <__any_on+0x3e>
 8008238:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800823c:	4293      	cmp	r3, r2
 800823e:	d803      	bhi.n	8008248 <__any_on+0x36>
 8008240:	2000      	movs	r0, #0
 8008242:	bd10      	pop	{r4, pc}
 8008244:	4603      	mov	r3, r0
 8008246:	e7f7      	b.n	8008238 <__any_on+0x26>
 8008248:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800824c:	2900      	cmp	r1, #0
 800824e:	d0f5      	beq.n	800823c <__any_on+0x2a>
 8008250:	2001      	movs	r0, #1
 8008252:	e7f6      	b.n	8008242 <__any_on+0x30>

08008254 <sulp>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	4604      	mov	r4, r0
 8008258:	460d      	mov	r5, r1
 800825a:	ec45 4b10 	vmov	d0, r4, r5
 800825e:	4616      	mov	r6, r2
 8008260:	f7ff feba 	bl	8007fd8 <__ulp>
 8008264:	ec51 0b10 	vmov	r0, r1, d0
 8008268:	b17e      	cbz	r6, 800828a <sulp+0x36>
 800826a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800826e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008272:	2b00      	cmp	r3, #0
 8008274:	dd09      	ble.n	800828a <sulp+0x36>
 8008276:	051b      	lsls	r3, r3, #20
 8008278:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800827c:	2400      	movs	r4, #0
 800827e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008282:	4622      	mov	r2, r4
 8008284:	462b      	mov	r3, r5
 8008286:	f7f8 f9d7 	bl	8000638 <__aeabi_dmul>
 800828a:	ec41 0b10 	vmov	d0, r0, r1
 800828e:	bd70      	pop	{r4, r5, r6, pc}

08008290 <_strtod_l>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	b09f      	sub	sp, #124	@ 0x7c
 8008296:	460c      	mov	r4, r1
 8008298:	9217      	str	r2, [sp, #92]	@ 0x5c
 800829a:	2200      	movs	r2, #0
 800829c:	921a      	str	r2, [sp, #104]	@ 0x68
 800829e:	9005      	str	r0, [sp, #20]
 80082a0:	f04f 0a00 	mov.w	sl, #0
 80082a4:	f04f 0b00 	mov.w	fp, #0
 80082a8:	460a      	mov	r2, r1
 80082aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80082ac:	7811      	ldrb	r1, [r2, #0]
 80082ae:	292b      	cmp	r1, #43	@ 0x2b
 80082b0:	d04a      	beq.n	8008348 <_strtod_l+0xb8>
 80082b2:	d838      	bhi.n	8008326 <_strtod_l+0x96>
 80082b4:	290d      	cmp	r1, #13
 80082b6:	d832      	bhi.n	800831e <_strtod_l+0x8e>
 80082b8:	2908      	cmp	r1, #8
 80082ba:	d832      	bhi.n	8008322 <_strtod_l+0x92>
 80082bc:	2900      	cmp	r1, #0
 80082be:	d03b      	beq.n	8008338 <_strtod_l+0xa8>
 80082c0:	2200      	movs	r2, #0
 80082c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80082c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80082c6:	782a      	ldrb	r2, [r5, #0]
 80082c8:	2a30      	cmp	r2, #48	@ 0x30
 80082ca:	f040 80b3 	bne.w	8008434 <_strtod_l+0x1a4>
 80082ce:	786a      	ldrb	r2, [r5, #1]
 80082d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80082d4:	2a58      	cmp	r2, #88	@ 0x58
 80082d6:	d16e      	bne.n	80083b6 <_strtod_l+0x126>
 80082d8:	9302      	str	r3, [sp, #8]
 80082da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	ab1a      	add	r3, sp, #104	@ 0x68
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	4a8e      	ldr	r2, [pc, #568]	@ (800851c <_strtod_l+0x28c>)
 80082e4:	9805      	ldr	r0, [sp, #20]
 80082e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80082e8:	a919      	add	r1, sp, #100	@ 0x64
 80082ea:	f001 f927 	bl	800953c <__gethex>
 80082ee:	f010 060f 	ands.w	r6, r0, #15
 80082f2:	4604      	mov	r4, r0
 80082f4:	d005      	beq.n	8008302 <_strtod_l+0x72>
 80082f6:	2e06      	cmp	r6, #6
 80082f8:	d128      	bne.n	800834c <_strtod_l+0xbc>
 80082fa:	3501      	adds	r5, #1
 80082fc:	2300      	movs	r3, #0
 80082fe:	9519      	str	r5, [sp, #100]	@ 0x64
 8008300:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008302:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008304:	2b00      	cmp	r3, #0
 8008306:	f040 858e 	bne.w	8008e26 <_strtod_l+0xb96>
 800830a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800830c:	b1cb      	cbz	r3, 8008342 <_strtod_l+0xb2>
 800830e:	4652      	mov	r2, sl
 8008310:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008314:	ec43 2b10 	vmov	d0, r2, r3
 8008318:	b01f      	add	sp, #124	@ 0x7c
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831e:	2920      	cmp	r1, #32
 8008320:	d1ce      	bne.n	80082c0 <_strtod_l+0x30>
 8008322:	3201      	adds	r2, #1
 8008324:	e7c1      	b.n	80082aa <_strtod_l+0x1a>
 8008326:	292d      	cmp	r1, #45	@ 0x2d
 8008328:	d1ca      	bne.n	80082c0 <_strtod_l+0x30>
 800832a:	2101      	movs	r1, #1
 800832c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800832e:	1c51      	adds	r1, r2, #1
 8008330:	9119      	str	r1, [sp, #100]	@ 0x64
 8008332:	7852      	ldrb	r2, [r2, #1]
 8008334:	2a00      	cmp	r2, #0
 8008336:	d1c5      	bne.n	80082c4 <_strtod_l+0x34>
 8008338:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800833a:	9419      	str	r4, [sp, #100]	@ 0x64
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 8570 	bne.w	8008e22 <_strtod_l+0xb92>
 8008342:	4652      	mov	r2, sl
 8008344:	465b      	mov	r3, fp
 8008346:	e7e5      	b.n	8008314 <_strtod_l+0x84>
 8008348:	2100      	movs	r1, #0
 800834a:	e7ef      	b.n	800832c <_strtod_l+0x9c>
 800834c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800834e:	b13a      	cbz	r2, 8008360 <_strtod_l+0xd0>
 8008350:	2135      	movs	r1, #53	@ 0x35
 8008352:	a81c      	add	r0, sp, #112	@ 0x70
 8008354:	f7ff ff3a 	bl	80081cc <__copybits>
 8008358:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800835a:	9805      	ldr	r0, [sp, #20]
 800835c:	f7ff fb08 	bl	8007970 <_Bfree>
 8008360:	3e01      	subs	r6, #1
 8008362:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008364:	2e04      	cmp	r6, #4
 8008366:	d806      	bhi.n	8008376 <_strtod_l+0xe6>
 8008368:	e8df f006 	tbb	[pc, r6]
 800836c:	201d0314 	.word	0x201d0314
 8008370:	14          	.byte	0x14
 8008371:	00          	.byte	0x00
 8008372:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008376:	05e1      	lsls	r1, r4, #23
 8008378:	bf48      	it	mi
 800837a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800837e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008382:	0d1b      	lsrs	r3, r3, #20
 8008384:	051b      	lsls	r3, r3, #20
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1bb      	bne.n	8008302 <_strtod_l+0x72>
 800838a:	f7fe fb2f 	bl	80069ec <__errno>
 800838e:	2322      	movs	r3, #34	@ 0x22
 8008390:	6003      	str	r3, [r0, #0]
 8008392:	e7b6      	b.n	8008302 <_strtod_l+0x72>
 8008394:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008398:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800839c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80083a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80083a4:	e7e7      	b.n	8008376 <_strtod_l+0xe6>
 80083a6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008524 <_strtod_l+0x294>
 80083aa:	e7e4      	b.n	8008376 <_strtod_l+0xe6>
 80083ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80083b0:	f04f 3aff 	mov.w	sl, #4294967295
 80083b4:	e7df      	b.n	8008376 <_strtod_l+0xe6>
 80083b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80083bc:	785b      	ldrb	r3, [r3, #1]
 80083be:	2b30      	cmp	r3, #48	@ 0x30
 80083c0:	d0f9      	beq.n	80083b6 <_strtod_l+0x126>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d09d      	beq.n	8008302 <_strtod_l+0x72>
 80083c6:	2301      	movs	r3, #1
 80083c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80083ce:	2300      	movs	r3, #0
 80083d0:	9308      	str	r3, [sp, #32]
 80083d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d4:	461f      	mov	r7, r3
 80083d6:	220a      	movs	r2, #10
 80083d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80083da:	7805      	ldrb	r5, [r0, #0]
 80083dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80083e0:	b2d9      	uxtb	r1, r3
 80083e2:	2909      	cmp	r1, #9
 80083e4:	d928      	bls.n	8008438 <_strtod_l+0x1a8>
 80083e6:	494e      	ldr	r1, [pc, #312]	@ (8008520 <_strtod_l+0x290>)
 80083e8:	2201      	movs	r2, #1
 80083ea:	f000 ffd5 	bl	8009398 <strncmp>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d032      	beq.n	8008458 <_strtod_l+0x1c8>
 80083f2:	2000      	movs	r0, #0
 80083f4:	462a      	mov	r2, r5
 80083f6:	4681      	mov	r9, r0
 80083f8:	463d      	mov	r5, r7
 80083fa:	4603      	mov	r3, r0
 80083fc:	2a65      	cmp	r2, #101	@ 0x65
 80083fe:	d001      	beq.n	8008404 <_strtod_l+0x174>
 8008400:	2a45      	cmp	r2, #69	@ 0x45
 8008402:	d114      	bne.n	800842e <_strtod_l+0x19e>
 8008404:	b91d      	cbnz	r5, 800840e <_strtod_l+0x17e>
 8008406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008408:	4302      	orrs	r2, r0
 800840a:	d095      	beq.n	8008338 <_strtod_l+0xa8>
 800840c:	2500      	movs	r5, #0
 800840e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008410:	1c62      	adds	r2, r4, #1
 8008412:	9219      	str	r2, [sp, #100]	@ 0x64
 8008414:	7862      	ldrb	r2, [r4, #1]
 8008416:	2a2b      	cmp	r2, #43	@ 0x2b
 8008418:	d077      	beq.n	800850a <_strtod_l+0x27a>
 800841a:	2a2d      	cmp	r2, #45	@ 0x2d
 800841c:	d07b      	beq.n	8008516 <_strtod_l+0x286>
 800841e:	f04f 0c00 	mov.w	ip, #0
 8008422:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008426:	2909      	cmp	r1, #9
 8008428:	f240 8082 	bls.w	8008530 <_strtod_l+0x2a0>
 800842c:	9419      	str	r4, [sp, #100]	@ 0x64
 800842e:	f04f 0800 	mov.w	r8, #0
 8008432:	e0a2      	b.n	800857a <_strtod_l+0x2ea>
 8008434:	2300      	movs	r3, #0
 8008436:	e7c7      	b.n	80083c8 <_strtod_l+0x138>
 8008438:	2f08      	cmp	r7, #8
 800843a:	bfd5      	itete	le
 800843c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800843e:	9908      	ldrgt	r1, [sp, #32]
 8008440:	fb02 3301 	mlale	r3, r2, r1, r3
 8008444:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008448:	f100 0001 	add.w	r0, r0, #1
 800844c:	bfd4      	ite	le
 800844e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008450:	9308      	strgt	r3, [sp, #32]
 8008452:	3701      	adds	r7, #1
 8008454:	9019      	str	r0, [sp, #100]	@ 0x64
 8008456:	e7bf      	b.n	80083d8 <_strtod_l+0x148>
 8008458:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	9219      	str	r2, [sp, #100]	@ 0x64
 800845e:	785a      	ldrb	r2, [r3, #1]
 8008460:	b37f      	cbz	r7, 80084c2 <_strtod_l+0x232>
 8008462:	4681      	mov	r9, r0
 8008464:	463d      	mov	r5, r7
 8008466:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800846a:	2b09      	cmp	r3, #9
 800846c:	d912      	bls.n	8008494 <_strtod_l+0x204>
 800846e:	2301      	movs	r3, #1
 8008470:	e7c4      	b.n	80083fc <_strtod_l+0x16c>
 8008472:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008474:	1c5a      	adds	r2, r3, #1
 8008476:	9219      	str	r2, [sp, #100]	@ 0x64
 8008478:	785a      	ldrb	r2, [r3, #1]
 800847a:	3001      	adds	r0, #1
 800847c:	2a30      	cmp	r2, #48	@ 0x30
 800847e:	d0f8      	beq.n	8008472 <_strtod_l+0x1e2>
 8008480:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008484:	2b08      	cmp	r3, #8
 8008486:	f200 84d3 	bhi.w	8008e30 <_strtod_l+0xba0>
 800848a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800848c:	930c      	str	r3, [sp, #48]	@ 0x30
 800848e:	4681      	mov	r9, r0
 8008490:	2000      	movs	r0, #0
 8008492:	4605      	mov	r5, r0
 8008494:	3a30      	subs	r2, #48	@ 0x30
 8008496:	f100 0301 	add.w	r3, r0, #1
 800849a:	d02a      	beq.n	80084f2 <_strtod_l+0x262>
 800849c:	4499      	add	r9, r3
 800849e:	eb00 0c05 	add.w	ip, r0, r5
 80084a2:	462b      	mov	r3, r5
 80084a4:	210a      	movs	r1, #10
 80084a6:	4563      	cmp	r3, ip
 80084a8:	d10d      	bne.n	80084c6 <_strtod_l+0x236>
 80084aa:	1c69      	adds	r1, r5, #1
 80084ac:	4401      	add	r1, r0
 80084ae:	4428      	add	r0, r5
 80084b0:	2808      	cmp	r0, #8
 80084b2:	dc16      	bgt.n	80084e2 <_strtod_l+0x252>
 80084b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084b6:	230a      	movs	r3, #10
 80084b8:	fb03 2300 	mla	r3, r3, r0, r2
 80084bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80084be:	2300      	movs	r3, #0
 80084c0:	e018      	b.n	80084f4 <_strtod_l+0x264>
 80084c2:	4638      	mov	r0, r7
 80084c4:	e7da      	b.n	800847c <_strtod_l+0x1ec>
 80084c6:	2b08      	cmp	r3, #8
 80084c8:	f103 0301 	add.w	r3, r3, #1
 80084cc:	dc03      	bgt.n	80084d6 <_strtod_l+0x246>
 80084ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80084d0:	434e      	muls	r6, r1
 80084d2:	960a      	str	r6, [sp, #40]	@ 0x28
 80084d4:	e7e7      	b.n	80084a6 <_strtod_l+0x216>
 80084d6:	2b10      	cmp	r3, #16
 80084d8:	bfde      	ittt	le
 80084da:	9e08      	ldrle	r6, [sp, #32]
 80084dc:	434e      	mulle	r6, r1
 80084de:	9608      	strle	r6, [sp, #32]
 80084e0:	e7e1      	b.n	80084a6 <_strtod_l+0x216>
 80084e2:	280f      	cmp	r0, #15
 80084e4:	dceb      	bgt.n	80084be <_strtod_l+0x22e>
 80084e6:	9808      	ldr	r0, [sp, #32]
 80084e8:	230a      	movs	r3, #10
 80084ea:	fb03 2300 	mla	r3, r3, r0, r2
 80084ee:	9308      	str	r3, [sp, #32]
 80084f0:	e7e5      	b.n	80084be <_strtod_l+0x22e>
 80084f2:	4629      	mov	r1, r5
 80084f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084f6:	1c50      	adds	r0, r2, #1
 80084f8:	9019      	str	r0, [sp, #100]	@ 0x64
 80084fa:	7852      	ldrb	r2, [r2, #1]
 80084fc:	4618      	mov	r0, r3
 80084fe:	460d      	mov	r5, r1
 8008500:	e7b1      	b.n	8008466 <_strtod_l+0x1d6>
 8008502:	f04f 0900 	mov.w	r9, #0
 8008506:	2301      	movs	r3, #1
 8008508:	e77d      	b.n	8008406 <_strtod_l+0x176>
 800850a:	f04f 0c00 	mov.w	ip, #0
 800850e:	1ca2      	adds	r2, r4, #2
 8008510:	9219      	str	r2, [sp, #100]	@ 0x64
 8008512:	78a2      	ldrb	r2, [r4, #2]
 8008514:	e785      	b.n	8008422 <_strtod_l+0x192>
 8008516:	f04f 0c01 	mov.w	ip, #1
 800851a:	e7f8      	b.n	800850e <_strtod_l+0x27e>
 800851c:	0800ab00 	.word	0x0800ab00
 8008520:	0800aae8 	.word	0x0800aae8
 8008524:	7ff00000 	.word	0x7ff00000
 8008528:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800852a:	1c51      	adds	r1, r2, #1
 800852c:	9119      	str	r1, [sp, #100]	@ 0x64
 800852e:	7852      	ldrb	r2, [r2, #1]
 8008530:	2a30      	cmp	r2, #48	@ 0x30
 8008532:	d0f9      	beq.n	8008528 <_strtod_l+0x298>
 8008534:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008538:	2908      	cmp	r1, #8
 800853a:	f63f af78 	bhi.w	800842e <_strtod_l+0x19e>
 800853e:	3a30      	subs	r2, #48	@ 0x30
 8008540:	920e      	str	r2, [sp, #56]	@ 0x38
 8008542:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008544:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008546:	f04f 080a 	mov.w	r8, #10
 800854a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800854c:	1c56      	adds	r6, r2, #1
 800854e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008550:	7852      	ldrb	r2, [r2, #1]
 8008552:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008556:	f1be 0f09 	cmp.w	lr, #9
 800855a:	d939      	bls.n	80085d0 <_strtod_l+0x340>
 800855c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800855e:	1a76      	subs	r6, r6, r1
 8008560:	2e08      	cmp	r6, #8
 8008562:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008566:	dc03      	bgt.n	8008570 <_strtod_l+0x2e0>
 8008568:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800856a:	4588      	cmp	r8, r1
 800856c:	bfa8      	it	ge
 800856e:	4688      	movge	r8, r1
 8008570:	f1bc 0f00 	cmp.w	ip, #0
 8008574:	d001      	beq.n	800857a <_strtod_l+0x2ea>
 8008576:	f1c8 0800 	rsb	r8, r8, #0
 800857a:	2d00      	cmp	r5, #0
 800857c:	d14e      	bne.n	800861c <_strtod_l+0x38c>
 800857e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008580:	4308      	orrs	r0, r1
 8008582:	f47f aebe 	bne.w	8008302 <_strtod_l+0x72>
 8008586:	2b00      	cmp	r3, #0
 8008588:	f47f aed6 	bne.w	8008338 <_strtod_l+0xa8>
 800858c:	2a69      	cmp	r2, #105	@ 0x69
 800858e:	d028      	beq.n	80085e2 <_strtod_l+0x352>
 8008590:	dc25      	bgt.n	80085de <_strtod_l+0x34e>
 8008592:	2a49      	cmp	r2, #73	@ 0x49
 8008594:	d025      	beq.n	80085e2 <_strtod_l+0x352>
 8008596:	2a4e      	cmp	r2, #78	@ 0x4e
 8008598:	f47f aece 	bne.w	8008338 <_strtod_l+0xa8>
 800859c:	499b      	ldr	r1, [pc, #620]	@ (800880c <_strtod_l+0x57c>)
 800859e:	a819      	add	r0, sp, #100	@ 0x64
 80085a0:	f001 f9ee 	bl	8009980 <__match>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f43f aec7 	beq.w	8008338 <_strtod_l+0xa8>
 80085aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b28      	cmp	r3, #40	@ 0x28
 80085b0:	d12e      	bne.n	8008610 <_strtod_l+0x380>
 80085b2:	4997      	ldr	r1, [pc, #604]	@ (8008810 <_strtod_l+0x580>)
 80085b4:	aa1c      	add	r2, sp, #112	@ 0x70
 80085b6:	a819      	add	r0, sp, #100	@ 0x64
 80085b8:	f001 f9f6 	bl	80099a8 <__hexnan>
 80085bc:	2805      	cmp	r0, #5
 80085be:	d127      	bne.n	8008610 <_strtod_l+0x380>
 80085c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80085c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80085c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80085ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80085ce:	e698      	b.n	8008302 <_strtod_l+0x72>
 80085d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80085d2:	fb08 2101 	mla	r1, r8, r1, r2
 80085d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80085da:	920e      	str	r2, [sp, #56]	@ 0x38
 80085dc:	e7b5      	b.n	800854a <_strtod_l+0x2ba>
 80085de:	2a6e      	cmp	r2, #110	@ 0x6e
 80085e0:	e7da      	b.n	8008598 <_strtod_l+0x308>
 80085e2:	498c      	ldr	r1, [pc, #560]	@ (8008814 <_strtod_l+0x584>)
 80085e4:	a819      	add	r0, sp, #100	@ 0x64
 80085e6:	f001 f9cb 	bl	8009980 <__match>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	f43f aea4 	beq.w	8008338 <_strtod_l+0xa8>
 80085f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085f2:	4989      	ldr	r1, [pc, #548]	@ (8008818 <_strtod_l+0x588>)
 80085f4:	3b01      	subs	r3, #1
 80085f6:	a819      	add	r0, sp, #100	@ 0x64
 80085f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80085fa:	f001 f9c1 	bl	8009980 <__match>
 80085fe:	b910      	cbnz	r0, 8008606 <_strtod_l+0x376>
 8008600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008602:	3301      	adds	r3, #1
 8008604:	9319      	str	r3, [sp, #100]	@ 0x64
 8008606:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008828 <_strtod_l+0x598>
 800860a:	f04f 0a00 	mov.w	sl, #0
 800860e:	e678      	b.n	8008302 <_strtod_l+0x72>
 8008610:	4882      	ldr	r0, [pc, #520]	@ (800881c <_strtod_l+0x58c>)
 8008612:	f000 fef1 	bl	80093f8 <nan>
 8008616:	ec5b ab10 	vmov	sl, fp, d0
 800861a:	e672      	b.n	8008302 <_strtod_l+0x72>
 800861c:	eba8 0309 	sub.w	r3, r8, r9
 8008620:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008622:	9309      	str	r3, [sp, #36]	@ 0x24
 8008624:	2f00      	cmp	r7, #0
 8008626:	bf08      	it	eq
 8008628:	462f      	moveq	r7, r5
 800862a:	2d10      	cmp	r5, #16
 800862c:	462c      	mov	r4, r5
 800862e:	bfa8      	it	ge
 8008630:	2410      	movge	r4, #16
 8008632:	f7f7 ff87 	bl	8000544 <__aeabi_ui2d>
 8008636:	2d09      	cmp	r5, #9
 8008638:	4682      	mov	sl, r0
 800863a:	468b      	mov	fp, r1
 800863c:	dc13      	bgt.n	8008666 <_strtod_l+0x3d6>
 800863e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008640:	2b00      	cmp	r3, #0
 8008642:	f43f ae5e 	beq.w	8008302 <_strtod_l+0x72>
 8008646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008648:	dd78      	ble.n	800873c <_strtod_l+0x4ac>
 800864a:	2b16      	cmp	r3, #22
 800864c:	dc5f      	bgt.n	800870e <_strtod_l+0x47e>
 800864e:	4974      	ldr	r1, [pc, #464]	@ (8008820 <_strtod_l+0x590>)
 8008650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008658:	4652      	mov	r2, sl
 800865a:	465b      	mov	r3, fp
 800865c:	f7f7 ffec 	bl	8000638 <__aeabi_dmul>
 8008660:	4682      	mov	sl, r0
 8008662:	468b      	mov	fp, r1
 8008664:	e64d      	b.n	8008302 <_strtod_l+0x72>
 8008666:	4b6e      	ldr	r3, [pc, #440]	@ (8008820 <_strtod_l+0x590>)
 8008668:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800866c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008670:	f7f7 ffe2 	bl	8000638 <__aeabi_dmul>
 8008674:	4682      	mov	sl, r0
 8008676:	9808      	ldr	r0, [sp, #32]
 8008678:	468b      	mov	fp, r1
 800867a:	f7f7 ff63 	bl	8000544 <__aeabi_ui2d>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	4650      	mov	r0, sl
 8008684:	4659      	mov	r1, fp
 8008686:	f7f7 fe21 	bl	80002cc <__adddf3>
 800868a:	2d0f      	cmp	r5, #15
 800868c:	4682      	mov	sl, r0
 800868e:	468b      	mov	fp, r1
 8008690:	ddd5      	ble.n	800863e <_strtod_l+0x3ae>
 8008692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008694:	1b2c      	subs	r4, r5, r4
 8008696:	441c      	add	r4, r3
 8008698:	2c00      	cmp	r4, #0
 800869a:	f340 8096 	ble.w	80087ca <_strtod_l+0x53a>
 800869e:	f014 030f 	ands.w	r3, r4, #15
 80086a2:	d00a      	beq.n	80086ba <_strtod_l+0x42a>
 80086a4:	495e      	ldr	r1, [pc, #376]	@ (8008820 <_strtod_l+0x590>)
 80086a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086aa:	4652      	mov	r2, sl
 80086ac:	465b      	mov	r3, fp
 80086ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086b2:	f7f7 ffc1 	bl	8000638 <__aeabi_dmul>
 80086b6:	4682      	mov	sl, r0
 80086b8:	468b      	mov	fp, r1
 80086ba:	f034 040f 	bics.w	r4, r4, #15
 80086be:	d073      	beq.n	80087a8 <_strtod_l+0x518>
 80086c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80086c4:	dd48      	ble.n	8008758 <_strtod_l+0x4c8>
 80086c6:	2400      	movs	r4, #0
 80086c8:	46a0      	mov	r8, r4
 80086ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80086cc:	46a1      	mov	r9, r4
 80086ce:	9a05      	ldr	r2, [sp, #20]
 80086d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008828 <_strtod_l+0x598>
 80086d4:	2322      	movs	r3, #34	@ 0x22
 80086d6:	6013      	str	r3, [r2, #0]
 80086d8:	f04f 0a00 	mov.w	sl, #0
 80086dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f43f ae0f 	beq.w	8008302 <_strtod_l+0x72>
 80086e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086e6:	9805      	ldr	r0, [sp, #20]
 80086e8:	f7ff f942 	bl	8007970 <_Bfree>
 80086ec:	9805      	ldr	r0, [sp, #20]
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7ff f93e 	bl	8007970 <_Bfree>
 80086f4:	9805      	ldr	r0, [sp, #20]
 80086f6:	4641      	mov	r1, r8
 80086f8:	f7ff f93a 	bl	8007970 <_Bfree>
 80086fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086fe:	9805      	ldr	r0, [sp, #20]
 8008700:	f7ff f936 	bl	8007970 <_Bfree>
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	4621      	mov	r1, r4
 8008708:	f7ff f932 	bl	8007970 <_Bfree>
 800870c:	e5f9      	b.n	8008302 <_strtod_l+0x72>
 800870e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008710:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008714:	4293      	cmp	r3, r2
 8008716:	dbbc      	blt.n	8008692 <_strtod_l+0x402>
 8008718:	4c41      	ldr	r4, [pc, #260]	@ (8008820 <_strtod_l+0x590>)
 800871a:	f1c5 050f 	rsb	r5, r5, #15
 800871e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008722:	4652      	mov	r2, sl
 8008724:	465b      	mov	r3, fp
 8008726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800872a:	f7f7 ff85 	bl	8000638 <__aeabi_dmul>
 800872e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008730:	1b5d      	subs	r5, r3, r5
 8008732:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008736:	e9d4 2300 	ldrd	r2, r3, [r4]
 800873a:	e78f      	b.n	800865c <_strtod_l+0x3cc>
 800873c:	3316      	adds	r3, #22
 800873e:	dba8      	blt.n	8008692 <_strtod_l+0x402>
 8008740:	4b37      	ldr	r3, [pc, #220]	@ (8008820 <_strtod_l+0x590>)
 8008742:	eba9 0808 	sub.w	r8, r9, r8
 8008746:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800874a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800874e:	4650      	mov	r0, sl
 8008750:	4659      	mov	r1, fp
 8008752:	f7f8 f89b 	bl	800088c <__aeabi_ddiv>
 8008756:	e783      	b.n	8008660 <_strtod_l+0x3d0>
 8008758:	4b32      	ldr	r3, [pc, #200]	@ (8008824 <_strtod_l+0x594>)
 800875a:	9308      	str	r3, [sp, #32]
 800875c:	2300      	movs	r3, #0
 800875e:	1124      	asrs	r4, r4, #4
 8008760:	4650      	mov	r0, sl
 8008762:	4659      	mov	r1, fp
 8008764:	461e      	mov	r6, r3
 8008766:	2c01      	cmp	r4, #1
 8008768:	dc21      	bgt.n	80087ae <_strtod_l+0x51e>
 800876a:	b10b      	cbz	r3, 8008770 <_strtod_l+0x4e0>
 800876c:	4682      	mov	sl, r0
 800876e:	468b      	mov	fp, r1
 8008770:	492c      	ldr	r1, [pc, #176]	@ (8008824 <_strtod_l+0x594>)
 8008772:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008776:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800877a:	4652      	mov	r2, sl
 800877c:	465b      	mov	r3, fp
 800877e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008782:	f7f7 ff59 	bl	8000638 <__aeabi_dmul>
 8008786:	4b28      	ldr	r3, [pc, #160]	@ (8008828 <_strtod_l+0x598>)
 8008788:	460a      	mov	r2, r1
 800878a:	400b      	ands	r3, r1
 800878c:	4927      	ldr	r1, [pc, #156]	@ (800882c <_strtod_l+0x59c>)
 800878e:	428b      	cmp	r3, r1
 8008790:	4682      	mov	sl, r0
 8008792:	d898      	bhi.n	80086c6 <_strtod_l+0x436>
 8008794:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008798:	428b      	cmp	r3, r1
 800879a:	bf86      	itte	hi
 800879c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008830 <_strtod_l+0x5a0>
 80087a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80087a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80087a8:	2300      	movs	r3, #0
 80087aa:	9308      	str	r3, [sp, #32]
 80087ac:	e07a      	b.n	80088a4 <_strtod_l+0x614>
 80087ae:	07e2      	lsls	r2, r4, #31
 80087b0:	d505      	bpl.n	80087be <_strtod_l+0x52e>
 80087b2:	9b08      	ldr	r3, [sp, #32]
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f7f7 ff3e 	bl	8000638 <__aeabi_dmul>
 80087bc:	2301      	movs	r3, #1
 80087be:	9a08      	ldr	r2, [sp, #32]
 80087c0:	3208      	adds	r2, #8
 80087c2:	3601      	adds	r6, #1
 80087c4:	1064      	asrs	r4, r4, #1
 80087c6:	9208      	str	r2, [sp, #32]
 80087c8:	e7cd      	b.n	8008766 <_strtod_l+0x4d6>
 80087ca:	d0ed      	beq.n	80087a8 <_strtod_l+0x518>
 80087cc:	4264      	negs	r4, r4
 80087ce:	f014 020f 	ands.w	r2, r4, #15
 80087d2:	d00a      	beq.n	80087ea <_strtod_l+0x55a>
 80087d4:	4b12      	ldr	r3, [pc, #72]	@ (8008820 <_strtod_l+0x590>)
 80087d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087da:	4650      	mov	r0, sl
 80087dc:	4659      	mov	r1, fp
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	f7f8 f853 	bl	800088c <__aeabi_ddiv>
 80087e6:	4682      	mov	sl, r0
 80087e8:	468b      	mov	fp, r1
 80087ea:	1124      	asrs	r4, r4, #4
 80087ec:	d0dc      	beq.n	80087a8 <_strtod_l+0x518>
 80087ee:	2c1f      	cmp	r4, #31
 80087f0:	dd20      	ble.n	8008834 <_strtod_l+0x5a4>
 80087f2:	2400      	movs	r4, #0
 80087f4:	46a0      	mov	r8, r4
 80087f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80087f8:	46a1      	mov	r9, r4
 80087fa:	9a05      	ldr	r2, [sp, #20]
 80087fc:	2322      	movs	r3, #34	@ 0x22
 80087fe:	f04f 0a00 	mov.w	sl, #0
 8008802:	f04f 0b00 	mov.w	fp, #0
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	e768      	b.n	80086dc <_strtod_l+0x44c>
 800880a:	bf00      	nop
 800880c:	0800a8d5 	.word	0x0800a8d5
 8008810:	0800aaec 	.word	0x0800aaec
 8008814:	0800a8cd 	.word	0x0800a8cd
 8008818:	0800a904 	.word	0x0800a904
 800881c:	0800ac95 	.word	0x0800ac95
 8008820:	0800aa20 	.word	0x0800aa20
 8008824:	0800a9f8 	.word	0x0800a9f8
 8008828:	7ff00000 	.word	0x7ff00000
 800882c:	7ca00000 	.word	0x7ca00000
 8008830:	7fefffff 	.word	0x7fefffff
 8008834:	f014 0310 	ands.w	r3, r4, #16
 8008838:	bf18      	it	ne
 800883a:	236a      	movne	r3, #106	@ 0x6a
 800883c:	4ea9      	ldr	r6, [pc, #676]	@ (8008ae4 <_strtod_l+0x854>)
 800883e:	9308      	str	r3, [sp, #32]
 8008840:	4650      	mov	r0, sl
 8008842:	4659      	mov	r1, fp
 8008844:	2300      	movs	r3, #0
 8008846:	07e2      	lsls	r2, r4, #31
 8008848:	d504      	bpl.n	8008854 <_strtod_l+0x5c4>
 800884a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800884e:	f7f7 fef3 	bl	8000638 <__aeabi_dmul>
 8008852:	2301      	movs	r3, #1
 8008854:	1064      	asrs	r4, r4, #1
 8008856:	f106 0608 	add.w	r6, r6, #8
 800885a:	d1f4      	bne.n	8008846 <_strtod_l+0x5b6>
 800885c:	b10b      	cbz	r3, 8008862 <_strtod_l+0x5d2>
 800885e:	4682      	mov	sl, r0
 8008860:	468b      	mov	fp, r1
 8008862:	9b08      	ldr	r3, [sp, #32]
 8008864:	b1b3      	cbz	r3, 8008894 <_strtod_l+0x604>
 8008866:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800886a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800886e:	2b00      	cmp	r3, #0
 8008870:	4659      	mov	r1, fp
 8008872:	dd0f      	ble.n	8008894 <_strtod_l+0x604>
 8008874:	2b1f      	cmp	r3, #31
 8008876:	dd55      	ble.n	8008924 <_strtod_l+0x694>
 8008878:	2b34      	cmp	r3, #52	@ 0x34
 800887a:	bfde      	ittt	le
 800887c:	f04f 33ff 	movle.w	r3, #4294967295
 8008880:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008884:	4093      	lslle	r3, r2
 8008886:	f04f 0a00 	mov.w	sl, #0
 800888a:	bfcc      	ite	gt
 800888c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008890:	ea03 0b01 	andle.w	fp, r3, r1
 8008894:	2200      	movs	r2, #0
 8008896:	2300      	movs	r3, #0
 8008898:	4650      	mov	r0, sl
 800889a:	4659      	mov	r1, fp
 800889c:	f7f8 f934 	bl	8000b08 <__aeabi_dcmpeq>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d1a6      	bne.n	80087f2 <_strtod_l+0x562>
 80088a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80088aa:	9805      	ldr	r0, [sp, #20]
 80088ac:	462b      	mov	r3, r5
 80088ae:	463a      	mov	r2, r7
 80088b0:	f7ff f8c6 	bl	8007a40 <__s2b>
 80088b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f43f af05 	beq.w	80086c6 <_strtod_l+0x436>
 80088bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088be:	2a00      	cmp	r2, #0
 80088c0:	eba9 0308 	sub.w	r3, r9, r8
 80088c4:	bfa8      	it	ge
 80088c6:	2300      	movge	r3, #0
 80088c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80088ca:	2400      	movs	r4, #0
 80088cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80088d2:	46a0      	mov	r8, r4
 80088d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088d6:	9805      	ldr	r0, [sp, #20]
 80088d8:	6859      	ldr	r1, [r3, #4]
 80088da:	f7ff f809 	bl	80078f0 <_Balloc>
 80088de:	4681      	mov	r9, r0
 80088e0:	2800      	cmp	r0, #0
 80088e2:	f43f aef4 	beq.w	80086ce <_strtod_l+0x43e>
 80088e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e8:	691a      	ldr	r2, [r3, #16]
 80088ea:	3202      	adds	r2, #2
 80088ec:	f103 010c 	add.w	r1, r3, #12
 80088f0:	0092      	lsls	r2, r2, #2
 80088f2:	300c      	adds	r0, #12
 80088f4:	f000 fd72 	bl	80093dc <memcpy>
 80088f8:	ec4b ab10 	vmov	d0, sl, fp
 80088fc:	9805      	ldr	r0, [sp, #20]
 80088fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8008900:	a91b      	add	r1, sp, #108	@ 0x6c
 8008902:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008906:	f7ff fbd7 	bl	80080b8 <__d2b>
 800890a:	901a      	str	r0, [sp, #104]	@ 0x68
 800890c:	2800      	cmp	r0, #0
 800890e:	f43f aede 	beq.w	80086ce <_strtod_l+0x43e>
 8008912:	9805      	ldr	r0, [sp, #20]
 8008914:	2101      	movs	r1, #1
 8008916:	f7ff f929 	bl	8007b6c <__i2b>
 800891a:	4680      	mov	r8, r0
 800891c:	b948      	cbnz	r0, 8008932 <_strtod_l+0x6a2>
 800891e:	f04f 0800 	mov.w	r8, #0
 8008922:	e6d4      	b.n	80086ce <_strtod_l+0x43e>
 8008924:	f04f 32ff 	mov.w	r2, #4294967295
 8008928:	fa02 f303 	lsl.w	r3, r2, r3
 800892c:	ea03 0a0a 	and.w	sl, r3, sl
 8008930:	e7b0      	b.n	8008894 <_strtod_l+0x604>
 8008932:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008934:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008936:	2d00      	cmp	r5, #0
 8008938:	bfab      	itete	ge
 800893a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800893c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800893e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008940:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008942:	bfac      	ite	ge
 8008944:	18ef      	addge	r7, r5, r3
 8008946:	1b5e      	sublt	r6, r3, r5
 8008948:	9b08      	ldr	r3, [sp, #32]
 800894a:	1aed      	subs	r5, r5, r3
 800894c:	4415      	add	r5, r2
 800894e:	4b66      	ldr	r3, [pc, #408]	@ (8008ae8 <_strtod_l+0x858>)
 8008950:	3d01      	subs	r5, #1
 8008952:	429d      	cmp	r5, r3
 8008954:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008958:	da50      	bge.n	80089fc <_strtod_l+0x76c>
 800895a:	1b5b      	subs	r3, r3, r5
 800895c:	2b1f      	cmp	r3, #31
 800895e:	eba2 0203 	sub.w	r2, r2, r3
 8008962:	f04f 0101 	mov.w	r1, #1
 8008966:	dc3d      	bgt.n	80089e4 <_strtod_l+0x754>
 8008968:	fa01 f303 	lsl.w	r3, r1, r3
 800896c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800896e:	2300      	movs	r3, #0
 8008970:	9310      	str	r3, [sp, #64]	@ 0x40
 8008972:	18bd      	adds	r5, r7, r2
 8008974:	9b08      	ldr	r3, [sp, #32]
 8008976:	42af      	cmp	r7, r5
 8008978:	4416      	add	r6, r2
 800897a:	441e      	add	r6, r3
 800897c:	463b      	mov	r3, r7
 800897e:	bfa8      	it	ge
 8008980:	462b      	movge	r3, r5
 8008982:	42b3      	cmp	r3, r6
 8008984:	bfa8      	it	ge
 8008986:	4633      	movge	r3, r6
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfc2      	ittt	gt
 800898c:	1aed      	subgt	r5, r5, r3
 800898e:	1af6      	subgt	r6, r6, r3
 8008990:	1aff      	subgt	r7, r7, r3
 8008992:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008994:	2b00      	cmp	r3, #0
 8008996:	dd16      	ble.n	80089c6 <_strtod_l+0x736>
 8008998:	4641      	mov	r1, r8
 800899a:	9805      	ldr	r0, [sp, #20]
 800899c:	461a      	mov	r2, r3
 800899e:	f7ff f9a5 	bl	8007cec <__pow5mult>
 80089a2:	4680      	mov	r8, r0
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d0ba      	beq.n	800891e <_strtod_l+0x68e>
 80089a8:	4601      	mov	r1, r0
 80089aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089ac:	9805      	ldr	r0, [sp, #20]
 80089ae:	f7ff f8f3 	bl	8007b98 <__multiply>
 80089b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80089b4:	2800      	cmp	r0, #0
 80089b6:	f43f ae8a 	beq.w	80086ce <_strtod_l+0x43e>
 80089ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089bc:	9805      	ldr	r0, [sp, #20]
 80089be:	f7fe ffd7 	bl	8007970 <_Bfree>
 80089c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	dc1d      	bgt.n	8008a06 <_strtod_l+0x776>
 80089ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dd23      	ble.n	8008a18 <_strtod_l+0x788>
 80089d0:	4649      	mov	r1, r9
 80089d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80089d4:	9805      	ldr	r0, [sp, #20]
 80089d6:	f7ff f989 	bl	8007cec <__pow5mult>
 80089da:	4681      	mov	r9, r0
 80089dc:	b9e0      	cbnz	r0, 8008a18 <_strtod_l+0x788>
 80089de:	f04f 0900 	mov.w	r9, #0
 80089e2:	e674      	b.n	80086ce <_strtod_l+0x43e>
 80089e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80089e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80089ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80089f0:	35e2      	adds	r5, #226	@ 0xe2
 80089f2:	fa01 f305 	lsl.w	r3, r1, r5
 80089f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80089f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80089fa:	e7ba      	b.n	8008972 <_strtod_l+0x6e2>
 80089fc:	2300      	movs	r3, #0
 80089fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a00:	2301      	movs	r3, #1
 8008a02:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a04:	e7b5      	b.n	8008972 <_strtod_l+0x6e2>
 8008a06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a08:	9805      	ldr	r0, [sp, #20]
 8008a0a:	462a      	mov	r2, r5
 8008a0c:	f7ff f9c8 	bl	8007da0 <__lshift>
 8008a10:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d1d9      	bne.n	80089ca <_strtod_l+0x73a>
 8008a16:	e65a      	b.n	80086ce <_strtod_l+0x43e>
 8008a18:	2e00      	cmp	r6, #0
 8008a1a:	dd07      	ble.n	8008a2c <_strtod_l+0x79c>
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	9805      	ldr	r0, [sp, #20]
 8008a20:	4632      	mov	r2, r6
 8008a22:	f7ff f9bd 	bl	8007da0 <__lshift>
 8008a26:	4681      	mov	r9, r0
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d0d8      	beq.n	80089de <_strtod_l+0x74e>
 8008a2c:	2f00      	cmp	r7, #0
 8008a2e:	dd08      	ble.n	8008a42 <_strtod_l+0x7b2>
 8008a30:	4641      	mov	r1, r8
 8008a32:	9805      	ldr	r0, [sp, #20]
 8008a34:	463a      	mov	r2, r7
 8008a36:	f7ff f9b3 	bl	8007da0 <__lshift>
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f43f ae46 	beq.w	80086ce <_strtod_l+0x43e>
 8008a42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a44:	9805      	ldr	r0, [sp, #20]
 8008a46:	464a      	mov	r2, r9
 8008a48:	f7ff fa32 	bl	8007eb0 <__mdiff>
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f43f ae3d 	beq.w	80086ce <_strtod_l+0x43e>
 8008a54:	68c3      	ldr	r3, [r0, #12]
 8008a56:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60c3      	str	r3, [r0, #12]
 8008a5c:	4641      	mov	r1, r8
 8008a5e:	f7ff fa0b 	bl	8007e78 <__mcmp>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	da46      	bge.n	8008af4 <_strtod_l+0x864>
 8008a66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a68:	ea53 030a 	orrs.w	r3, r3, sl
 8008a6c:	d16c      	bne.n	8008b48 <_strtod_l+0x8b8>
 8008a6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d168      	bne.n	8008b48 <_strtod_l+0x8b8>
 8008a76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a7a:	0d1b      	lsrs	r3, r3, #20
 8008a7c:	051b      	lsls	r3, r3, #20
 8008a7e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a82:	d961      	bls.n	8008b48 <_strtod_l+0x8b8>
 8008a84:	6963      	ldr	r3, [r4, #20]
 8008a86:	b913      	cbnz	r3, 8008a8e <_strtod_l+0x7fe>
 8008a88:	6923      	ldr	r3, [r4, #16]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	dd5c      	ble.n	8008b48 <_strtod_l+0x8b8>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	2201      	movs	r2, #1
 8008a92:	9805      	ldr	r0, [sp, #20]
 8008a94:	f7ff f984 	bl	8007da0 <__lshift>
 8008a98:	4641      	mov	r1, r8
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	f7ff f9ec 	bl	8007e78 <__mcmp>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	dd51      	ble.n	8008b48 <_strtod_l+0x8b8>
 8008aa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008aa8:	9a08      	ldr	r2, [sp, #32]
 8008aaa:	0d1b      	lsrs	r3, r3, #20
 8008aac:	051b      	lsls	r3, r3, #20
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	d06b      	beq.n	8008b8a <_strtod_l+0x8fa>
 8008ab2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008ab6:	d868      	bhi.n	8008b8a <_strtod_l+0x8fa>
 8008ab8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008abc:	f67f ae9d 	bls.w	80087fa <_strtod_l+0x56a>
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8008aec <_strtod_l+0x85c>)
 8008ac2:	4650      	mov	r0, sl
 8008ac4:	4659      	mov	r1, fp
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f7f7 fdb6 	bl	8000638 <__aeabi_dmul>
 8008acc:	4b08      	ldr	r3, [pc, #32]	@ (8008af0 <_strtod_l+0x860>)
 8008ace:	400b      	ands	r3, r1
 8008ad0:	4682      	mov	sl, r0
 8008ad2:	468b      	mov	fp, r1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f47f ae05 	bne.w	80086e4 <_strtod_l+0x454>
 8008ada:	9a05      	ldr	r2, [sp, #20]
 8008adc:	2322      	movs	r3, #34	@ 0x22
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	e600      	b.n	80086e4 <_strtod_l+0x454>
 8008ae2:	bf00      	nop
 8008ae4:	0800ab18 	.word	0x0800ab18
 8008ae8:	fffffc02 	.word	0xfffffc02
 8008aec:	39500000 	.word	0x39500000
 8008af0:	7ff00000 	.word	0x7ff00000
 8008af4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008af8:	d165      	bne.n	8008bc6 <_strtod_l+0x936>
 8008afa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008afc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b00:	b35a      	cbz	r2, 8008b5a <_strtod_l+0x8ca>
 8008b02:	4a9f      	ldr	r2, [pc, #636]	@ (8008d80 <_strtod_l+0xaf0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d12b      	bne.n	8008b60 <_strtod_l+0x8d0>
 8008b08:	9b08      	ldr	r3, [sp, #32]
 8008b0a:	4651      	mov	r1, sl
 8008b0c:	b303      	cbz	r3, 8008b50 <_strtod_l+0x8c0>
 8008b0e:	4b9d      	ldr	r3, [pc, #628]	@ (8008d84 <_strtod_l+0xaf4>)
 8008b10:	465a      	mov	r2, fp
 8008b12:	4013      	ands	r3, r2
 8008b14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008b18:	f04f 32ff 	mov.w	r2, #4294967295
 8008b1c:	d81b      	bhi.n	8008b56 <_strtod_l+0x8c6>
 8008b1e:	0d1b      	lsrs	r3, r3, #20
 8008b20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b24:	fa02 f303 	lsl.w	r3, r2, r3
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	d119      	bne.n	8008b60 <_strtod_l+0x8d0>
 8008b2c:	4b96      	ldr	r3, [pc, #600]	@ (8008d88 <_strtod_l+0xaf8>)
 8008b2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d102      	bne.n	8008b3a <_strtod_l+0x8aa>
 8008b34:	3101      	adds	r1, #1
 8008b36:	f43f adca 	beq.w	80086ce <_strtod_l+0x43e>
 8008b3a:	4b92      	ldr	r3, [pc, #584]	@ (8008d84 <_strtod_l+0xaf4>)
 8008b3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b3e:	401a      	ands	r2, r3
 8008b40:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008b44:	f04f 0a00 	mov.w	sl, #0
 8008b48:	9b08      	ldr	r3, [sp, #32]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1b8      	bne.n	8008ac0 <_strtod_l+0x830>
 8008b4e:	e5c9      	b.n	80086e4 <_strtod_l+0x454>
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295
 8008b54:	e7e8      	b.n	8008b28 <_strtod_l+0x898>
 8008b56:	4613      	mov	r3, r2
 8008b58:	e7e6      	b.n	8008b28 <_strtod_l+0x898>
 8008b5a:	ea53 030a 	orrs.w	r3, r3, sl
 8008b5e:	d0a1      	beq.n	8008aa4 <_strtod_l+0x814>
 8008b60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b62:	b1db      	cbz	r3, 8008b9c <_strtod_l+0x90c>
 8008b64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b66:	4213      	tst	r3, r2
 8008b68:	d0ee      	beq.n	8008b48 <_strtod_l+0x8b8>
 8008b6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b6c:	9a08      	ldr	r2, [sp, #32]
 8008b6e:	4650      	mov	r0, sl
 8008b70:	4659      	mov	r1, fp
 8008b72:	b1bb      	cbz	r3, 8008ba4 <_strtod_l+0x914>
 8008b74:	f7ff fb6e 	bl	8008254 <sulp>
 8008b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b7c:	ec53 2b10 	vmov	r2, r3, d0
 8008b80:	f7f7 fba4 	bl	80002cc <__adddf3>
 8008b84:	4682      	mov	sl, r0
 8008b86:	468b      	mov	fp, r1
 8008b88:	e7de      	b.n	8008b48 <_strtod_l+0x8b8>
 8008b8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008b8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b96:	f04f 3aff 	mov.w	sl, #4294967295
 8008b9a:	e7d5      	b.n	8008b48 <_strtod_l+0x8b8>
 8008b9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b9e:	ea13 0f0a 	tst.w	r3, sl
 8008ba2:	e7e1      	b.n	8008b68 <_strtod_l+0x8d8>
 8008ba4:	f7ff fb56 	bl	8008254 <sulp>
 8008ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bac:	ec53 2b10 	vmov	r2, r3, d0
 8008bb0:	f7f7 fb8a 	bl	80002c8 <__aeabi_dsub>
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	4682      	mov	sl, r0
 8008bba:	468b      	mov	fp, r1
 8008bbc:	f7f7 ffa4 	bl	8000b08 <__aeabi_dcmpeq>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d0c1      	beq.n	8008b48 <_strtod_l+0x8b8>
 8008bc4:	e619      	b.n	80087fa <_strtod_l+0x56a>
 8008bc6:	4641      	mov	r1, r8
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f7ff facd 	bl	8008168 <__ratio>
 8008bce:	ec57 6b10 	vmov	r6, r7, d0
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008bd8:	4630      	mov	r0, r6
 8008bda:	4639      	mov	r1, r7
 8008bdc:	f7f7 ffa8 	bl	8000b30 <__aeabi_dcmple>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d06f      	beq.n	8008cc4 <_strtod_l+0xa34>
 8008be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d17a      	bne.n	8008ce0 <_strtod_l+0xa50>
 8008bea:	f1ba 0f00 	cmp.w	sl, #0
 8008bee:	d158      	bne.n	8008ca2 <_strtod_l+0xa12>
 8008bf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d15a      	bne.n	8008cb0 <_strtod_l+0xa20>
 8008bfa:	4b64      	ldr	r3, [pc, #400]	@ (8008d8c <_strtod_l+0xafc>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4630      	mov	r0, r6
 8008c00:	4639      	mov	r1, r7
 8008c02:	f7f7 ff8b 	bl	8000b1c <__aeabi_dcmplt>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d159      	bne.n	8008cbe <_strtod_l+0xa2e>
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4b60      	ldr	r3, [pc, #384]	@ (8008d90 <_strtod_l+0xb00>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	f7f7 fd11 	bl	8000638 <__aeabi_dmul>
 8008c16:	4606      	mov	r6, r0
 8008c18:	460f      	mov	r7, r1
 8008c1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008c1e:	9606      	str	r6, [sp, #24]
 8008c20:	9307      	str	r3, [sp, #28]
 8008c22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c26:	4d57      	ldr	r5, [pc, #348]	@ (8008d84 <_strtod_l+0xaf4>)
 8008c28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c2e:	401d      	ands	r5, r3
 8008c30:	4b58      	ldr	r3, [pc, #352]	@ (8008d94 <_strtod_l+0xb04>)
 8008c32:	429d      	cmp	r5, r3
 8008c34:	f040 80b2 	bne.w	8008d9c <_strtod_l+0xb0c>
 8008c38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008c3e:	ec4b ab10 	vmov	d0, sl, fp
 8008c42:	f7ff f9c9 	bl	8007fd8 <__ulp>
 8008c46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c4a:	ec51 0b10 	vmov	r0, r1, d0
 8008c4e:	f7f7 fcf3 	bl	8000638 <__aeabi_dmul>
 8008c52:	4652      	mov	r2, sl
 8008c54:	465b      	mov	r3, fp
 8008c56:	f7f7 fb39 	bl	80002cc <__adddf3>
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4949      	ldr	r1, [pc, #292]	@ (8008d84 <_strtod_l+0xaf4>)
 8008c5e:	4a4e      	ldr	r2, [pc, #312]	@ (8008d98 <_strtod_l+0xb08>)
 8008c60:	4019      	ands	r1, r3
 8008c62:	4291      	cmp	r1, r2
 8008c64:	4682      	mov	sl, r0
 8008c66:	d942      	bls.n	8008cee <_strtod_l+0xa5e>
 8008c68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c6a:	4b47      	ldr	r3, [pc, #284]	@ (8008d88 <_strtod_l+0xaf8>)
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d103      	bne.n	8008c78 <_strtod_l+0x9e8>
 8008c70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c72:	3301      	adds	r3, #1
 8008c74:	f43f ad2b 	beq.w	80086ce <_strtod_l+0x43e>
 8008c78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008d88 <_strtod_l+0xaf8>
 8008c7c:	f04f 3aff 	mov.w	sl, #4294967295
 8008c80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c82:	9805      	ldr	r0, [sp, #20]
 8008c84:	f7fe fe74 	bl	8007970 <_Bfree>
 8008c88:	9805      	ldr	r0, [sp, #20]
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	f7fe fe70 	bl	8007970 <_Bfree>
 8008c90:	9805      	ldr	r0, [sp, #20]
 8008c92:	4641      	mov	r1, r8
 8008c94:	f7fe fe6c 	bl	8007970 <_Bfree>
 8008c98:	9805      	ldr	r0, [sp, #20]
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	f7fe fe68 	bl	8007970 <_Bfree>
 8008ca0:	e618      	b.n	80088d4 <_strtod_l+0x644>
 8008ca2:	f1ba 0f01 	cmp.w	sl, #1
 8008ca6:	d103      	bne.n	8008cb0 <_strtod_l+0xa20>
 8008ca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f43f ada5 	beq.w	80087fa <_strtod_l+0x56a>
 8008cb0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008d60 <_strtod_l+0xad0>
 8008cb4:	4f35      	ldr	r7, [pc, #212]	@ (8008d8c <_strtod_l+0xafc>)
 8008cb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cba:	2600      	movs	r6, #0
 8008cbc:	e7b1      	b.n	8008c22 <_strtod_l+0x992>
 8008cbe:	4f34      	ldr	r7, [pc, #208]	@ (8008d90 <_strtod_l+0xb00>)
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	e7aa      	b.n	8008c1a <_strtod_l+0x98a>
 8008cc4:	4b32      	ldr	r3, [pc, #200]	@ (8008d90 <_strtod_l+0xb00>)
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4639      	mov	r1, r7
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f7f7 fcb4 	bl	8000638 <__aeabi_dmul>
 8008cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d09f      	beq.n	8008c1a <_strtod_l+0x98a>
 8008cda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008cde:	e7a0      	b.n	8008c22 <_strtod_l+0x992>
 8008ce0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008d68 <_strtod_l+0xad8>
 8008ce4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ce8:	ec57 6b17 	vmov	r6, r7, d7
 8008cec:	e799      	b.n	8008c22 <_strtod_l+0x992>
 8008cee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008cf2:	9b08      	ldr	r3, [sp, #32]
 8008cf4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1c1      	bne.n	8008c80 <_strtod_l+0x9f0>
 8008cfc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d00:	0d1b      	lsrs	r3, r3, #20
 8008d02:	051b      	lsls	r3, r3, #20
 8008d04:	429d      	cmp	r5, r3
 8008d06:	d1bb      	bne.n	8008c80 <_strtod_l+0x9f0>
 8008d08:	4630      	mov	r0, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f7f8 f844 	bl	8000d98 <__aeabi_d2lz>
 8008d10:	f7f7 fc64 	bl	80005dc <__aeabi_l2d>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4630      	mov	r0, r6
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	f7f7 fad4 	bl	80002c8 <__aeabi_dsub>
 8008d20:	460b      	mov	r3, r1
 8008d22:	4602      	mov	r2, r0
 8008d24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008d28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2e:	ea46 060a 	orr.w	r6, r6, sl
 8008d32:	431e      	orrs	r6, r3
 8008d34:	d06f      	beq.n	8008e16 <_strtod_l+0xb86>
 8008d36:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d70 <_strtod_l+0xae0>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f7f7 feee 	bl	8000b1c <__aeabi_dcmplt>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	f47f accf 	bne.w	80086e4 <_strtod_l+0x454>
 8008d46:	a30c      	add	r3, pc, #48	@ (adr r3, 8008d78 <_strtod_l+0xae8>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d50:	f7f7 ff02 	bl	8000b58 <__aeabi_dcmpgt>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d093      	beq.n	8008c80 <_strtod_l+0x9f0>
 8008d58:	e4c4      	b.n	80086e4 <_strtod_l+0x454>
 8008d5a:	bf00      	nop
 8008d5c:	f3af 8000 	nop.w
 8008d60:	00000000 	.word	0x00000000
 8008d64:	bff00000 	.word	0xbff00000
 8008d68:	00000000 	.word	0x00000000
 8008d6c:	3ff00000 	.word	0x3ff00000
 8008d70:	94a03595 	.word	0x94a03595
 8008d74:	3fdfffff 	.word	0x3fdfffff
 8008d78:	35afe535 	.word	0x35afe535
 8008d7c:	3fe00000 	.word	0x3fe00000
 8008d80:	000fffff 	.word	0x000fffff
 8008d84:	7ff00000 	.word	0x7ff00000
 8008d88:	7fefffff 	.word	0x7fefffff
 8008d8c:	3ff00000 	.word	0x3ff00000
 8008d90:	3fe00000 	.word	0x3fe00000
 8008d94:	7fe00000 	.word	0x7fe00000
 8008d98:	7c9fffff 	.word	0x7c9fffff
 8008d9c:	9b08      	ldr	r3, [sp, #32]
 8008d9e:	b323      	cbz	r3, 8008dea <_strtod_l+0xb5a>
 8008da0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008da4:	d821      	bhi.n	8008dea <_strtod_l+0xb5a>
 8008da6:	a328      	add	r3, pc, #160	@ (adr r3, 8008e48 <_strtod_l+0xbb8>)
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	4630      	mov	r0, r6
 8008dae:	4639      	mov	r1, r7
 8008db0:	f7f7 febe 	bl	8000b30 <__aeabi_dcmple>
 8008db4:	b1a0      	cbz	r0, 8008de0 <_strtod_l+0xb50>
 8008db6:	4639      	mov	r1, r7
 8008db8:	4630      	mov	r0, r6
 8008dba:	f7f7 ff15 	bl	8000be8 <__aeabi_d2uiz>
 8008dbe:	2801      	cmp	r0, #1
 8008dc0:	bf38      	it	cc
 8008dc2:	2001      	movcc	r0, #1
 8008dc4:	f7f7 fbbe 	bl	8000544 <__aeabi_ui2d>
 8008dc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dca:	4606      	mov	r6, r0
 8008dcc:	460f      	mov	r7, r1
 8008dce:	b9fb      	cbnz	r3, 8008e10 <_strtod_l+0xb80>
 8008dd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008dd4:	9014      	str	r0, [sp, #80]	@ 0x50
 8008dd6:	9315      	str	r3, [sp, #84]	@ 0x54
 8008dd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008ddc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008de0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008de2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008de6:	1b5b      	subs	r3, r3, r5
 8008de8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008dea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008dee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008df2:	f7ff f8f1 	bl	8007fd8 <__ulp>
 8008df6:	4650      	mov	r0, sl
 8008df8:	ec53 2b10 	vmov	r2, r3, d0
 8008dfc:	4659      	mov	r1, fp
 8008dfe:	f7f7 fc1b 	bl	8000638 <__aeabi_dmul>
 8008e02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e06:	f7f7 fa61 	bl	80002cc <__adddf3>
 8008e0a:	4682      	mov	sl, r0
 8008e0c:	468b      	mov	fp, r1
 8008e0e:	e770      	b.n	8008cf2 <_strtod_l+0xa62>
 8008e10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008e14:	e7e0      	b.n	8008dd8 <_strtod_l+0xb48>
 8008e16:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e50 <_strtod_l+0xbc0>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	f7f7 fe7e 	bl	8000b1c <__aeabi_dcmplt>
 8008e20:	e798      	b.n	8008d54 <_strtod_l+0xac4>
 8008e22:	2300      	movs	r3, #0
 8008e24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008e28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	f7ff ba6d 	b.w	800830a <_strtod_l+0x7a>
 8008e30:	2a65      	cmp	r2, #101	@ 0x65
 8008e32:	f43f ab66 	beq.w	8008502 <_strtod_l+0x272>
 8008e36:	2a45      	cmp	r2, #69	@ 0x45
 8008e38:	f43f ab63 	beq.w	8008502 <_strtod_l+0x272>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f7ff bb9e 	b.w	800857e <_strtod_l+0x2ee>
 8008e42:	bf00      	nop
 8008e44:	f3af 8000 	nop.w
 8008e48:	ffc00000 	.word	0xffc00000
 8008e4c:	41dfffff 	.word	0x41dfffff
 8008e50:	94a03595 	.word	0x94a03595
 8008e54:	3fcfffff 	.word	0x3fcfffff

08008e58 <_strtod_r>:
 8008e58:	4b01      	ldr	r3, [pc, #4]	@ (8008e60 <_strtod_r+0x8>)
 8008e5a:	f7ff ba19 	b.w	8008290 <_strtod_l>
 8008e5e:	bf00      	nop
 8008e60:	20000084 	.word	0x20000084

08008e64 <_strtol_l.constprop.0>:
 8008e64:	2b24      	cmp	r3, #36	@ 0x24
 8008e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e6a:	4686      	mov	lr, r0
 8008e6c:	4690      	mov	r8, r2
 8008e6e:	d801      	bhi.n	8008e74 <_strtol_l.constprop.0+0x10>
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d106      	bne.n	8008e82 <_strtol_l.constprop.0+0x1e>
 8008e74:	f7fd fdba 	bl	80069ec <__errno>
 8008e78:	2316      	movs	r3, #22
 8008e7a:	6003      	str	r3, [r0, #0]
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e82:	4834      	ldr	r0, [pc, #208]	@ (8008f54 <_strtol_l.constprop.0+0xf0>)
 8008e84:	460d      	mov	r5, r1
 8008e86:	462a      	mov	r2, r5
 8008e88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e8c:	5d06      	ldrb	r6, [r0, r4]
 8008e8e:	f016 0608 	ands.w	r6, r6, #8
 8008e92:	d1f8      	bne.n	8008e86 <_strtol_l.constprop.0+0x22>
 8008e94:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e96:	d12d      	bne.n	8008ef4 <_strtol_l.constprop.0+0x90>
 8008e98:	782c      	ldrb	r4, [r5, #0]
 8008e9a:	2601      	movs	r6, #1
 8008e9c:	1c95      	adds	r5, r2, #2
 8008e9e:	f033 0210 	bics.w	r2, r3, #16
 8008ea2:	d109      	bne.n	8008eb8 <_strtol_l.constprop.0+0x54>
 8008ea4:	2c30      	cmp	r4, #48	@ 0x30
 8008ea6:	d12a      	bne.n	8008efe <_strtol_l.constprop.0+0x9a>
 8008ea8:	782a      	ldrb	r2, [r5, #0]
 8008eaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008eae:	2a58      	cmp	r2, #88	@ 0x58
 8008eb0:	d125      	bne.n	8008efe <_strtol_l.constprop.0+0x9a>
 8008eb2:	786c      	ldrb	r4, [r5, #1]
 8008eb4:	2310      	movs	r3, #16
 8008eb6:	3502      	adds	r5, #2
 8008eb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ebc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	fbbc f9f3 	udiv	r9, ip, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ecc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ed0:	2f09      	cmp	r7, #9
 8008ed2:	d81b      	bhi.n	8008f0c <_strtol_l.constprop.0+0xa8>
 8008ed4:	463c      	mov	r4, r7
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	dd27      	ble.n	8008f2a <_strtol_l.constprop.0+0xc6>
 8008eda:	1c57      	adds	r7, r2, #1
 8008edc:	d007      	beq.n	8008eee <_strtol_l.constprop.0+0x8a>
 8008ede:	4581      	cmp	r9, r0
 8008ee0:	d320      	bcc.n	8008f24 <_strtol_l.constprop.0+0xc0>
 8008ee2:	d101      	bne.n	8008ee8 <_strtol_l.constprop.0+0x84>
 8008ee4:	45a2      	cmp	sl, r4
 8008ee6:	db1d      	blt.n	8008f24 <_strtol_l.constprop.0+0xc0>
 8008ee8:	fb00 4003 	mla	r0, r0, r3, r4
 8008eec:	2201      	movs	r2, #1
 8008eee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ef2:	e7eb      	b.n	8008ecc <_strtol_l.constprop.0+0x68>
 8008ef4:	2c2b      	cmp	r4, #43	@ 0x2b
 8008ef6:	bf04      	itt	eq
 8008ef8:	782c      	ldrbeq	r4, [r5, #0]
 8008efa:	1c95      	addeq	r5, r2, #2
 8008efc:	e7cf      	b.n	8008e9e <_strtol_l.constprop.0+0x3a>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1da      	bne.n	8008eb8 <_strtol_l.constprop.0+0x54>
 8008f02:	2c30      	cmp	r4, #48	@ 0x30
 8008f04:	bf0c      	ite	eq
 8008f06:	2308      	moveq	r3, #8
 8008f08:	230a      	movne	r3, #10
 8008f0a:	e7d5      	b.n	8008eb8 <_strtol_l.constprop.0+0x54>
 8008f0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008f10:	2f19      	cmp	r7, #25
 8008f12:	d801      	bhi.n	8008f18 <_strtol_l.constprop.0+0xb4>
 8008f14:	3c37      	subs	r4, #55	@ 0x37
 8008f16:	e7de      	b.n	8008ed6 <_strtol_l.constprop.0+0x72>
 8008f18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008f1c:	2f19      	cmp	r7, #25
 8008f1e:	d804      	bhi.n	8008f2a <_strtol_l.constprop.0+0xc6>
 8008f20:	3c57      	subs	r4, #87	@ 0x57
 8008f22:	e7d8      	b.n	8008ed6 <_strtol_l.constprop.0+0x72>
 8008f24:	f04f 32ff 	mov.w	r2, #4294967295
 8008f28:	e7e1      	b.n	8008eee <_strtol_l.constprop.0+0x8a>
 8008f2a:	1c53      	adds	r3, r2, #1
 8008f2c:	d108      	bne.n	8008f40 <_strtol_l.constprop.0+0xdc>
 8008f2e:	2322      	movs	r3, #34	@ 0x22
 8008f30:	f8ce 3000 	str.w	r3, [lr]
 8008f34:	4660      	mov	r0, ip
 8008f36:	f1b8 0f00 	cmp.w	r8, #0
 8008f3a:	d0a0      	beq.n	8008e7e <_strtol_l.constprop.0+0x1a>
 8008f3c:	1e69      	subs	r1, r5, #1
 8008f3e:	e006      	b.n	8008f4e <_strtol_l.constprop.0+0xea>
 8008f40:	b106      	cbz	r6, 8008f44 <_strtol_l.constprop.0+0xe0>
 8008f42:	4240      	negs	r0, r0
 8008f44:	f1b8 0f00 	cmp.w	r8, #0
 8008f48:	d099      	beq.n	8008e7e <_strtol_l.constprop.0+0x1a>
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	d1f6      	bne.n	8008f3c <_strtol_l.constprop.0+0xd8>
 8008f4e:	f8c8 1000 	str.w	r1, [r8]
 8008f52:	e794      	b.n	8008e7e <_strtol_l.constprop.0+0x1a>
 8008f54:	0800ab41 	.word	0x0800ab41

08008f58 <_strtol_r>:
 8008f58:	f7ff bf84 	b.w	8008e64 <_strtol_l.constprop.0>

08008f5c <__ssputs_r>:
 8008f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	688e      	ldr	r6, [r1, #8]
 8008f62:	461f      	mov	r7, r3
 8008f64:	42be      	cmp	r6, r7
 8008f66:	680b      	ldr	r3, [r1, #0]
 8008f68:	4682      	mov	sl, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	4690      	mov	r8, r2
 8008f6e:	d82d      	bhi.n	8008fcc <__ssputs_r+0x70>
 8008f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f78:	d026      	beq.n	8008fc8 <__ssputs_r+0x6c>
 8008f7a:	6965      	ldr	r5, [r4, #20]
 8008f7c:	6909      	ldr	r1, [r1, #16]
 8008f7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f82:	eba3 0901 	sub.w	r9, r3, r1
 8008f86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f8a:	1c7b      	adds	r3, r7, #1
 8008f8c:	444b      	add	r3, r9
 8008f8e:	106d      	asrs	r5, r5, #1
 8008f90:	429d      	cmp	r5, r3
 8008f92:	bf38      	it	cc
 8008f94:	461d      	movcc	r5, r3
 8008f96:	0553      	lsls	r3, r2, #21
 8008f98:	d527      	bpl.n	8008fea <__ssputs_r+0x8e>
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	f7fe fc1c 	bl	80077d8 <_malloc_r>
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	b360      	cbz	r0, 8008ffe <__ssputs_r+0xa2>
 8008fa4:	6921      	ldr	r1, [r4, #16]
 8008fa6:	464a      	mov	r2, r9
 8008fa8:	f000 fa18 	bl	80093dc <memcpy>
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fb6:	81a3      	strh	r3, [r4, #12]
 8008fb8:	6126      	str	r6, [r4, #16]
 8008fba:	6165      	str	r5, [r4, #20]
 8008fbc:	444e      	add	r6, r9
 8008fbe:	eba5 0509 	sub.w	r5, r5, r9
 8008fc2:	6026      	str	r6, [r4, #0]
 8008fc4:	60a5      	str	r5, [r4, #8]
 8008fc6:	463e      	mov	r6, r7
 8008fc8:	42be      	cmp	r6, r7
 8008fca:	d900      	bls.n	8008fce <__ssputs_r+0x72>
 8008fcc:	463e      	mov	r6, r7
 8008fce:	6820      	ldr	r0, [r4, #0]
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	f000 f9c6 	bl	8009364 <memmove>
 8008fd8:	68a3      	ldr	r3, [r4, #8]
 8008fda:	1b9b      	subs	r3, r3, r6
 8008fdc:	60a3      	str	r3, [r4, #8]
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	4433      	add	r3, r6
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fea:	462a      	mov	r2, r5
 8008fec:	f000 fd89 	bl	8009b02 <_realloc_r>
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d1e0      	bne.n	8008fb8 <__ssputs_r+0x5c>
 8008ff6:	6921      	ldr	r1, [r4, #16]
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	f7fe fb79 	bl	80076f0 <_free_r>
 8008ffe:	230c      	movs	r3, #12
 8009000:	f8ca 3000 	str.w	r3, [sl]
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	e7e9      	b.n	8008fe6 <__ssputs_r+0x8a>
	...

08009014 <_svfiprintf_r>:
 8009014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	4698      	mov	r8, r3
 800901a:	898b      	ldrh	r3, [r1, #12]
 800901c:	061b      	lsls	r3, r3, #24
 800901e:	b09d      	sub	sp, #116	@ 0x74
 8009020:	4607      	mov	r7, r0
 8009022:	460d      	mov	r5, r1
 8009024:	4614      	mov	r4, r2
 8009026:	d510      	bpl.n	800904a <_svfiprintf_r+0x36>
 8009028:	690b      	ldr	r3, [r1, #16]
 800902a:	b973      	cbnz	r3, 800904a <_svfiprintf_r+0x36>
 800902c:	2140      	movs	r1, #64	@ 0x40
 800902e:	f7fe fbd3 	bl	80077d8 <_malloc_r>
 8009032:	6028      	str	r0, [r5, #0]
 8009034:	6128      	str	r0, [r5, #16]
 8009036:	b930      	cbnz	r0, 8009046 <_svfiprintf_r+0x32>
 8009038:	230c      	movs	r3, #12
 800903a:	603b      	str	r3, [r7, #0]
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	b01d      	add	sp, #116	@ 0x74
 8009042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009046:	2340      	movs	r3, #64	@ 0x40
 8009048:	616b      	str	r3, [r5, #20]
 800904a:	2300      	movs	r3, #0
 800904c:	9309      	str	r3, [sp, #36]	@ 0x24
 800904e:	2320      	movs	r3, #32
 8009050:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009054:	f8cd 800c 	str.w	r8, [sp, #12]
 8009058:	2330      	movs	r3, #48	@ 0x30
 800905a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80091f8 <_svfiprintf_r+0x1e4>
 800905e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009062:	f04f 0901 	mov.w	r9, #1
 8009066:	4623      	mov	r3, r4
 8009068:	469a      	mov	sl, r3
 800906a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800906e:	b10a      	cbz	r2, 8009074 <_svfiprintf_r+0x60>
 8009070:	2a25      	cmp	r2, #37	@ 0x25
 8009072:	d1f9      	bne.n	8009068 <_svfiprintf_r+0x54>
 8009074:	ebba 0b04 	subs.w	fp, sl, r4
 8009078:	d00b      	beq.n	8009092 <_svfiprintf_r+0x7e>
 800907a:	465b      	mov	r3, fp
 800907c:	4622      	mov	r2, r4
 800907e:	4629      	mov	r1, r5
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff ff6b 	bl	8008f5c <__ssputs_r>
 8009086:	3001      	adds	r0, #1
 8009088:	f000 80a7 	beq.w	80091da <_svfiprintf_r+0x1c6>
 800908c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800908e:	445a      	add	r2, fp
 8009090:	9209      	str	r2, [sp, #36]	@ 0x24
 8009092:	f89a 3000 	ldrb.w	r3, [sl]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 809f 	beq.w	80091da <_svfiprintf_r+0x1c6>
 800909c:	2300      	movs	r3, #0
 800909e:	f04f 32ff 	mov.w	r2, #4294967295
 80090a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090a6:	f10a 0a01 	add.w	sl, sl, #1
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	9307      	str	r3, [sp, #28]
 80090ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80090b4:	4654      	mov	r4, sl
 80090b6:	2205      	movs	r2, #5
 80090b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090bc:	484e      	ldr	r0, [pc, #312]	@ (80091f8 <_svfiprintf_r+0x1e4>)
 80090be:	f7f7 f8a7 	bl	8000210 <memchr>
 80090c2:	9a04      	ldr	r2, [sp, #16]
 80090c4:	b9d8      	cbnz	r0, 80090fe <_svfiprintf_r+0xea>
 80090c6:	06d0      	lsls	r0, r2, #27
 80090c8:	bf44      	itt	mi
 80090ca:	2320      	movmi	r3, #32
 80090cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090d0:	0711      	lsls	r1, r2, #28
 80090d2:	bf44      	itt	mi
 80090d4:	232b      	movmi	r3, #43	@ 0x2b
 80090d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090da:	f89a 3000 	ldrb.w	r3, [sl]
 80090de:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e0:	d015      	beq.n	800910e <_svfiprintf_r+0xfa>
 80090e2:	9a07      	ldr	r2, [sp, #28]
 80090e4:	4654      	mov	r4, sl
 80090e6:	2000      	movs	r0, #0
 80090e8:	f04f 0c0a 	mov.w	ip, #10
 80090ec:	4621      	mov	r1, r4
 80090ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090f2:	3b30      	subs	r3, #48	@ 0x30
 80090f4:	2b09      	cmp	r3, #9
 80090f6:	d94b      	bls.n	8009190 <_svfiprintf_r+0x17c>
 80090f8:	b1b0      	cbz	r0, 8009128 <_svfiprintf_r+0x114>
 80090fa:	9207      	str	r2, [sp, #28]
 80090fc:	e014      	b.n	8009128 <_svfiprintf_r+0x114>
 80090fe:	eba0 0308 	sub.w	r3, r0, r8
 8009102:	fa09 f303 	lsl.w	r3, r9, r3
 8009106:	4313      	orrs	r3, r2
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	46a2      	mov	sl, r4
 800910c:	e7d2      	b.n	80090b4 <_svfiprintf_r+0xa0>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	1d19      	adds	r1, r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	9103      	str	r1, [sp, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfbb      	ittet	lt
 800911a:	425b      	neglt	r3, r3
 800911c:	f042 0202 	orrlt.w	r2, r2, #2
 8009120:	9307      	strge	r3, [sp, #28]
 8009122:	9307      	strlt	r3, [sp, #28]
 8009124:	bfb8      	it	lt
 8009126:	9204      	strlt	r2, [sp, #16]
 8009128:	7823      	ldrb	r3, [r4, #0]
 800912a:	2b2e      	cmp	r3, #46	@ 0x2e
 800912c:	d10a      	bne.n	8009144 <_svfiprintf_r+0x130>
 800912e:	7863      	ldrb	r3, [r4, #1]
 8009130:	2b2a      	cmp	r3, #42	@ 0x2a
 8009132:	d132      	bne.n	800919a <_svfiprintf_r+0x186>
 8009134:	9b03      	ldr	r3, [sp, #12]
 8009136:	1d1a      	adds	r2, r3, #4
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	9203      	str	r2, [sp, #12]
 800913c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009140:	3402      	adds	r4, #2
 8009142:	9305      	str	r3, [sp, #20]
 8009144:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009208 <_svfiprintf_r+0x1f4>
 8009148:	7821      	ldrb	r1, [r4, #0]
 800914a:	2203      	movs	r2, #3
 800914c:	4650      	mov	r0, sl
 800914e:	f7f7 f85f 	bl	8000210 <memchr>
 8009152:	b138      	cbz	r0, 8009164 <_svfiprintf_r+0x150>
 8009154:	9b04      	ldr	r3, [sp, #16]
 8009156:	eba0 000a 	sub.w	r0, r0, sl
 800915a:	2240      	movs	r2, #64	@ 0x40
 800915c:	4082      	lsls	r2, r0
 800915e:	4313      	orrs	r3, r2
 8009160:	3401      	adds	r4, #1
 8009162:	9304      	str	r3, [sp, #16]
 8009164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009168:	4824      	ldr	r0, [pc, #144]	@ (80091fc <_svfiprintf_r+0x1e8>)
 800916a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800916e:	2206      	movs	r2, #6
 8009170:	f7f7 f84e 	bl	8000210 <memchr>
 8009174:	2800      	cmp	r0, #0
 8009176:	d036      	beq.n	80091e6 <_svfiprintf_r+0x1d2>
 8009178:	4b21      	ldr	r3, [pc, #132]	@ (8009200 <_svfiprintf_r+0x1ec>)
 800917a:	bb1b      	cbnz	r3, 80091c4 <_svfiprintf_r+0x1b0>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	3307      	adds	r3, #7
 8009180:	f023 0307 	bic.w	r3, r3, #7
 8009184:	3308      	adds	r3, #8
 8009186:	9303      	str	r3, [sp, #12]
 8009188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918a:	4433      	add	r3, r6
 800918c:	9309      	str	r3, [sp, #36]	@ 0x24
 800918e:	e76a      	b.n	8009066 <_svfiprintf_r+0x52>
 8009190:	fb0c 3202 	mla	r2, ip, r2, r3
 8009194:	460c      	mov	r4, r1
 8009196:	2001      	movs	r0, #1
 8009198:	e7a8      	b.n	80090ec <_svfiprintf_r+0xd8>
 800919a:	2300      	movs	r3, #0
 800919c:	3401      	adds	r4, #1
 800919e:	9305      	str	r3, [sp, #20]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f04f 0c0a 	mov.w	ip, #10
 80091a6:	4620      	mov	r0, r4
 80091a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ac:	3a30      	subs	r2, #48	@ 0x30
 80091ae:	2a09      	cmp	r2, #9
 80091b0:	d903      	bls.n	80091ba <_svfiprintf_r+0x1a6>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0c6      	beq.n	8009144 <_svfiprintf_r+0x130>
 80091b6:	9105      	str	r1, [sp, #20]
 80091b8:	e7c4      	b.n	8009144 <_svfiprintf_r+0x130>
 80091ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80091be:	4604      	mov	r4, r0
 80091c0:	2301      	movs	r3, #1
 80091c2:	e7f0      	b.n	80091a6 <_svfiprintf_r+0x192>
 80091c4:	ab03      	add	r3, sp, #12
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	462a      	mov	r2, r5
 80091ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009204 <_svfiprintf_r+0x1f0>)
 80091cc:	a904      	add	r1, sp, #16
 80091ce:	4638      	mov	r0, r7
 80091d0:	f7fc fcc8 	bl	8005b64 <_printf_float>
 80091d4:	1c42      	adds	r2, r0, #1
 80091d6:	4606      	mov	r6, r0
 80091d8:	d1d6      	bne.n	8009188 <_svfiprintf_r+0x174>
 80091da:	89ab      	ldrh	r3, [r5, #12]
 80091dc:	065b      	lsls	r3, r3, #25
 80091de:	f53f af2d 	bmi.w	800903c <_svfiprintf_r+0x28>
 80091e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091e4:	e72c      	b.n	8009040 <_svfiprintf_r+0x2c>
 80091e6:	ab03      	add	r3, sp, #12
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	462a      	mov	r2, r5
 80091ec:	4b05      	ldr	r3, [pc, #20]	@ (8009204 <_svfiprintf_r+0x1f0>)
 80091ee:	a904      	add	r1, sp, #16
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7fc ff4f 	bl	8006094 <_printf_i>
 80091f6:	e7ed      	b.n	80091d4 <_svfiprintf_r+0x1c0>
 80091f8:	0800ac41 	.word	0x0800ac41
 80091fc:	0800ac4b 	.word	0x0800ac4b
 8009200:	08005b65 	.word	0x08005b65
 8009204:	08008f5d 	.word	0x08008f5d
 8009208:	0800ac47 	.word	0x0800ac47

0800920c <__sflush_r>:
 800920c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009214:	0716      	lsls	r6, r2, #28
 8009216:	4605      	mov	r5, r0
 8009218:	460c      	mov	r4, r1
 800921a:	d454      	bmi.n	80092c6 <__sflush_r+0xba>
 800921c:	684b      	ldr	r3, [r1, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	dc02      	bgt.n	8009228 <__sflush_r+0x1c>
 8009222:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	dd48      	ble.n	80092ba <__sflush_r+0xae>
 8009228:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800922a:	2e00      	cmp	r6, #0
 800922c:	d045      	beq.n	80092ba <__sflush_r+0xae>
 800922e:	2300      	movs	r3, #0
 8009230:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009234:	682f      	ldr	r7, [r5, #0]
 8009236:	6a21      	ldr	r1, [r4, #32]
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	d030      	beq.n	800929e <__sflush_r+0x92>
 800923c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	0759      	lsls	r1, r3, #29
 8009242:	d505      	bpl.n	8009250 <__sflush_r+0x44>
 8009244:	6863      	ldr	r3, [r4, #4]
 8009246:	1ad2      	subs	r2, r2, r3
 8009248:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800924a:	b10b      	cbz	r3, 8009250 <__sflush_r+0x44>
 800924c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800924e:	1ad2      	subs	r2, r2, r3
 8009250:	2300      	movs	r3, #0
 8009252:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009254:	6a21      	ldr	r1, [r4, #32]
 8009256:	4628      	mov	r0, r5
 8009258:	47b0      	blx	r6
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	d106      	bne.n	800926e <__sflush_r+0x62>
 8009260:	6829      	ldr	r1, [r5, #0]
 8009262:	291d      	cmp	r1, #29
 8009264:	d82b      	bhi.n	80092be <__sflush_r+0xb2>
 8009266:	4a2a      	ldr	r2, [pc, #168]	@ (8009310 <__sflush_r+0x104>)
 8009268:	410a      	asrs	r2, r1
 800926a:	07d6      	lsls	r6, r2, #31
 800926c:	d427      	bmi.n	80092be <__sflush_r+0xb2>
 800926e:	2200      	movs	r2, #0
 8009270:	6062      	str	r2, [r4, #4]
 8009272:	04d9      	lsls	r1, r3, #19
 8009274:	6922      	ldr	r2, [r4, #16]
 8009276:	6022      	str	r2, [r4, #0]
 8009278:	d504      	bpl.n	8009284 <__sflush_r+0x78>
 800927a:	1c42      	adds	r2, r0, #1
 800927c:	d101      	bne.n	8009282 <__sflush_r+0x76>
 800927e:	682b      	ldr	r3, [r5, #0]
 8009280:	b903      	cbnz	r3, 8009284 <__sflush_r+0x78>
 8009282:	6560      	str	r0, [r4, #84]	@ 0x54
 8009284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009286:	602f      	str	r7, [r5, #0]
 8009288:	b1b9      	cbz	r1, 80092ba <__sflush_r+0xae>
 800928a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800928e:	4299      	cmp	r1, r3
 8009290:	d002      	beq.n	8009298 <__sflush_r+0x8c>
 8009292:	4628      	mov	r0, r5
 8009294:	f7fe fa2c 	bl	80076f0 <_free_r>
 8009298:	2300      	movs	r3, #0
 800929a:	6363      	str	r3, [r4, #52]	@ 0x34
 800929c:	e00d      	b.n	80092ba <__sflush_r+0xae>
 800929e:	2301      	movs	r3, #1
 80092a0:	4628      	mov	r0, r5
 80092a2:	47b0      	blx	r6
 80092a4:	4602      	mov	r2, r0
 80092a6:	1c50      	adds	r0, r2, #1
 80092a8:	d1c9      	bne.n	800923e <__sflush_r+0x32>
 80092aa:	682b      	ldr	r3, [r5, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d0c6      	beq.n	800923e <__sflush_r+0x32>
 80092b0:	2b1d      	cmp	r3, #29
 80092b2:	d001      	beq.n	80092b8 <__sflush_r+0xac>
 80092b4:	2b16      	cmp	r3, #22
 80092b6:	d11e      	bne.n	80092f6 <__sflush_r+0xea>
 80092b8:	602f      	str	r7, [r5, #0]
 80092ba:	2000      	movs	r0, #0
 80092bc:	e022      	b.n	8009304 <__sflush_r+0xf8>
 80092be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092c2:	b21b      	sxth	r3, r3
 80092c4:	e01b      	b.n	80092fe <__sflush_r+0xf2>
 80092c6:	690f      	ldr	r7, [r1, #16]
 80092c8:	2f00      	cmp	r7, #0
 80092ca:	d0f6      	beq.n	80092ba <__sflush_r+0xae>
 80092cc:	0793      	lsls	r3, r2, #30
 80092ce:	680e      	ldr	r6, [r1, #0]
 80092d0:	bf08      	it	eq
 80092d2:	694b      	ldreq	r3, [r1, #20]
 80092d4:	600f      	str	r7, [r1, #0]
 80092d6:	bf18      	it	ne
 80092d8:	2300      	movne	r3, #0
 80092da:	eba6 0807 	sub.w	r8, r6, r7
 80092de:	608b      	str	r3, [r1, #8]
 80092e0:	f1b8 0f00 	cmp.w	r8, #0
 80092e4:	dde9      	ble.n	80092ba <__sflush_r+0xae>
 80092e6:	6a21      	ldr	r1, [r4, #32]
 80092e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092ea:	4643      	mov	r3, r8
 80092ec:	463a      	mov	r2, r7
 80092ee:	4628      	mov	r0, r5
 80092f0:	47b0      	blx	r6
 80092f2:	2800      	cmp	r0, #0
 80092f4:	dc08      	bgt.n	8009308 <__sflush_r+0xfc>
 80092f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009308:	4407      	add	r7, r0
 800930a:	eba8 0800 	sub.w	r8, r8, r0
 800930e:	e7e7      	b.n	80092e0 <__sflush_r+0xd4>
 8009310:	dfbffffe 	.word	0xdfbffffe

08009314 <_fflush_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	690b      	ldr	r3, [r1, #16]
 8009318:	4605      	mov	r5, r0
 800931a:	460c      	mov	r4, r1
 800931c:	b913      	cbnz	r3, 8009324 <_fflush_r+0x10>
 800931e:	2500      	movs	r5, #0
 8009320:	4628      	mov	r0, r5
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	b118      	cbz	r0, 800932e <_fflush_r+0x1a>
 8009326:	6a03      	ldr	r3, [r0, #32]
 8009328:	b90b      	cbnz	r3, 800932e <_fflush_r+0x1a>
 800932a:	f7fd fa73 	bl	8006814 <__sinit>
 800932e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0f3      	beq.n	800931e <_fflush_r+0xa>
 8009336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009338:	07d0      	lsls	r0, r2, #31
 800933a:	d404      	bmi.n	8009346 <_fflush_r+0x32>
 800933c:	0599      	lsls	r1, r3, #22
 800933e:	d402      	bmi.n	8009346 <_fflush_r+0x32>
 8009340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009342:	f7fd fb7e 	bl	8006a42 <__retarget_lock_acquire_recursive>
 8009346:	4628      	mov	r0, r5
 8009348:	4621      	mov	r1, r4
 800934a:	f7ff ff5f 	bl	800920c <__sflush_r>
 800934e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009350:	07da      	lsls	r2, r3, #31
 8009352:	4605      	mov	r5, r0
 8009354:	d4e4      	bmi.n	8009320 <_fflush_r+0xc>
 8009356:	89a3      	ldrh	r3, [r4, #12]
 8009358:	059b      	lsls	r3, r3, #22
 800935a:	d4e1      	bmi.n	8009320 <_fflush_r+0xc>
 800935c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800935e:	f7fd fb71 	bl	8006a44 <__retarget_lock_release_recursive>
 8009362:	e7dd      	b.n	8009320 <_fflush_r+0xc>

08009364 <memmove>:
 8009364:	4288      	cmp	r0, r1
 8009366:	b510      	push	{r4, lr}
 8009368:	eb01 0402 	add.w	r4, r1, r2
 800936c:	d902      	bls.n	8009374 <memmove+0x10>
 800936e:	4284      	cmp	r4, r0
 8009370:	4623      	mov	r3, r4
 8009372:	d807      	bhi.n	8009384 <memmove+0x20>
 8009374:	1e43      	subs	r3, r0, #1
 8009376:	42a1      	cmp	r1, r4
 8009378:	d008      	beq.n	800938c <memmove+0x28>
 800937a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800937e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009382:	e7f8      	b.n	8009376 <memmove+0x12>
 8009384:	4402      	add	r2, r0
 8009386:	4601      	mov	r1, r0
 8009388:	428a      	cmp	r2, r1
 800938a:	d100      	bne.n	800938e <memmove+0x2a>
 800938c:	bd10      	pop	{r4, pc}
 800938e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009396:	e7f7      	b.n	8009388 <memmove+0x24>

08009398 <strncmp>:
 8009398:	b510      	push	{r4, lr}
 800939a:	b16a      	cbz	r2, 80093b8 <strncmp+0x20>
 800939c:	3901      	subs	r1, #1
 800939e:	1884      	adds	r4, r0, r2
 80093a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d103      	bne.n	80093b4 <strncmp+0x1c>
 80093ac:	42a0      	cmp	r0, r4
 80093ae:	d001      	beq.n	80093b4 <strncmp+0x1c>
 80093b0:	2a00      	cmp	r2, #0
 80093b2:	d1f5      	bne.n	80093a0 <strncmp+0x8>
 80093b4:	1ad0      	subs	r0, r2, r3
 80093b6:	bd10      	pop	{r4, pc}
 80093b8:	4610      	mov	r0, r2
 80093ba:	e7fc      	b.n	80093b6 <strncmp+0x1e>

080093bc <_sbrk_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4d06      	ldr	r5, [pc, #24]	@ (80093d8 <_sbrk_r+0x1c>)
 80093c0:	2300      	movs	r3, #0
 80093c2:	4604      	mov	r4, r0
 80093c4:	4608      	mov	r0, r1
 80093c6:	602b      	str	r3, [r5, #0]
 80093c8:	f7f8 fa9c 	bl	8001904 <_sbrk>
 80093cc:	1c43      	adds	r3, r0, #1
 80093ce:	d102      	bne.n	80093d6 <_sbrk_r+0x1a>
 80093d0:	682b      	ldr	r3, [r5, #0]
 80093d2:	b103      	cbz	r3, 80093d6 <_sbrk_r+0x1a>
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
 80093d8:	20000854 	.word	0x20000854

080093dc <memcpy>:
 80093dc:	440a      	add	r2, r1
 80093de:	4291      	cmp	r1, r2
 80093e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80093e4:	d100      	bne.n	80093e8 <memcpy+0xc>
 80093e6:	4770      	bx	lr
 80093e8:	b510      	push	{r4, lr}
 80093ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093f2:	4291      	cmp	r1, r2
 80093f4:	d1f9      	bne.n	80093ea <memcpy+0xe>
 80093f6:	bd10      	pop	{r4, pc}

080093f8 <nan>:
 80093f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009400 <nan+0x8>
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	00000000 	.word	0x00000000
 8009404:	7ff80000 	.word	0x7ff80000

08009408 <__assert_func>:
 8009408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800940a:	4614      	mov	r4, r2
 800940c:	461a      	mov	r2, r3
 800940e:	4b09      	ldr	r3, [pc, #36]	@ (8009434 <__assert_func+0x2c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4605      	mov	r5, r0
 8009414:	68d8      	ldr	r0, [r3, #12]
 8009416:	b954      	cbnz	r4, 800942e <__assert_func+0x26>
 8009418:	4b07      	ldr	r3, [pc, #28]	@ (8009438 <__assert_func+0x30>)
 800941a:	461c      	mov	r4, r3
 800941c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009420:	9100      	str	r1, [sp, #0]
 8009422:	462b      	mov	r3, r5
 8009424:	4905      	ldr	r1, [pc, #20]	@ (800943c <__assert_func+0x34>)
 8009426:	f000 fba7 	bl	8009b78 <fiprintf>
 800942a:	f000 fbb7 	bl	8009b9c <abort>
 800942e:	4b04      	ldr	r3, [pc, #16]	@ (8009440 <__assert_func+0x38>)
 8009430:	e7f4      	b.n	800941c <__assert_func+0x14>
 8009432:	bf00      	nop
 8009434:	20000034 	.word	0x20000034
 8009438:	0800ac95 	.word	0x0800ac95
 800943c:	0800ac67 	.word	0x0800ac67
 8009440:	0800ac5a 	.word	0x0800ac5a

08009444 <_calloc_r>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	fba1 5402 	umull	r5, r4, r1, r2
 800944a:	b93c      	cbnz	r4, 800945c <_calloc_r+0x18>
 800944c:	4629      	mov	r1, r5
 800944e:	f7fe f9c3 	bl	80077d8 <_malloc_r>
 8009452:	4606      	mov	r6, r0
 8009454:	b928      	cbnz	r0, 8009462 <_calloc_r+0x1e>
 8009456:	2600      	movs	r6, #0
 8009458:	4630      	mov	r0, r6
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	220c      	movs	r2, #12
 800945e:	6002      	str	r2, [r0, #0]
 8009460:	e7f9      	b.n	8009456 <_calloc_r+0x12>
 8009462:	462a      	mov	r2, r5
 8009464:	4621      	mov	r1, r4
 8009466:	f7fd fa6e 	bl	8006946 <memset>
 800946a:	e7f5      	b.n	8009458 <_calloc_r+0x14>

0800946c <rshift>:
 800946c:	6903      	ldr	r3, [r0, #16]
 800946e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009476:	ea4f 1261 	mov.w	r2, r1, asr #5
 800947a:	f100 0414 	add.w	r4, r0, #20
 800947e:	dd45      	ble.n	800950c <rshift+0xa0>
 8009480:	f011 011f 	ands.w	r1, r1, #31
 8009484:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009488:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800948c:	d10c      	bne.n	80094a8 <rshift+0x3c>
 800948e:	f100 0710 	add.w	r7, r0, #16
 8009492:	4629      	mov	r1, r5
 8009494:	42b1      	cmp	r1, r6
 8009496:	d334      	bcc.n	8009502 <rshift+0x96>
 8009498:	1a9b      	subs	r3, r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	1eea      	subs	r2, r5, #3
 800949e:	4296      	cmp	r6, r2
 80094a0:	bf38      	it	cc
 80094a2:	2300      	movcc	r3, #0
 80094a4:	4423      	add	r3, r4
 80094a6:	e015      	b.n	80094d4 <rshift+0x68>
 80094a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094ac:	f1c1 0820 	rsb	r8, r1, #32
 80094b0:	40cf      	lsrs	r7, r1
 80094b2:	f105 0e04 	add.w	lr, r5, #4
 80094b6:	46a1      	mov	r9, r4
 80094b8:	4576      	cmp	r6, lr
 80094ba:	46f4      	mov	ip, lr
 80094bc:	d815      	bhi.n	80094ea <rshift+0x7e>
 80094be:	1a9a      	subs	r2, r3, r2
 80094c0:	0092      	lsls	r2, r2, #2
 80094c2:	3a04      	subs	r2, #4
 80094c4:	3501      	adds	r5, #1
 80094c6:	42ae      	cmp	r6, r5
 80094c8:	bf38      	it	cc
 80094ca:	2200      	movcc	r2, #0
 80094cc:	18a3      	adds	r3, r4, r2
 80094ce:	50a7      	str	r7, [r4, r2]
 80094d0:	b107      	cbz	r7, 80094d4 <rshift+0x68>
 80094d2:	3304      	adds	r3, #4
 80094d4:	1b1a      	subs	r2, r3, r4
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094dc:	bf08      	it	eq
 80094de:	2300      	moveq	r3, #0
 80094e0:	6102      	str	r2, [r0, #16]
 80094e2:	bf08      	it	eq
 80094e4:	6143      	streq	r3, [r0, #20]
 80094e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094ea:	f8dc c000 	ldr.w	ip, [ip]
 80094ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80094f2:	ea4c 0707 	orr.w	r7, ip, r7
 80094f6:	f849 7b04 	str.w	r7, [r9], #4
 80094fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094fe:	40cf      	lsrs	r7, r1
 8009500:	e7da      	b.n	80094b8 <rshift+0x4c>
 8009502:	f851 cb04 	ldr.w	ip, [r1], #4
 8009506:	f847 cf04 	str.w	ip, [r7, #4]!
 800950a:	e7c3      	b.n	8009494 <rshift+0x28>
 800950c:	4623      	mov	r3, r4
 800950e:	e7e1      	b.n	80094d4 <rshift+0x68>

08009510 <__hexdig_fun>:
 8009510:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009514:	2b09      	cmp	r3, #9
 8009516:	d802      	bhi.n	800951e <__hexdig_fun+0xe>
 8009518:	3820      	subs	r0, #32
 800951a:	b2c0      	uxtb	r0, r0
 800951c:	4770      	bx	lr
 800951e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009522:	2b05      	cmp	r3, #5
 8009524:	d801      	bhi.n	800952a <__hexdig_fun+0x1a>
 8009526:	3847      	subs	r0, #71	@ 0x47
 8009528:	e7f7      	b.n	800951a <__hexdig_fun+0xa>
 800952a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800952e:	2b05      	cmp	r3, #5
 8009530:	d801      	bhi.n	8009536 <__hexdig_fun+0x26>
 8009532:	3827      	subs	r0, #39	@ 0x27
 8009534:	e7f1      	b.n	800951a <__hexdig_fun+0xa>
 8009536:	2000      	movs	r0, #0
 8009538:	4770      	bx	lr
	...

0800953c <__gethex>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	b085      	sub	sp, #20
 8009542:	468a      	mov	sl, r1
 8009544:	9302      	str	r3, [sp, #8]
 8009546:	680b      	ldr	r3, [r1, #0]
 8009548:	9001      	str	r0, [sp, #4]
 800954a:	4690      	mov	r8, r2
 800954c:	1c9c      	adds	r4, r3, #2
 800954e:	46a1      	mov	r9, r4
 8009550:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009554:	2830      	cmp	r0, #48	@ 0x30
 8009556:	d0fa      	beq.n	800954e <__gethex+0x12>
 8009558:	eba9 0303 	sub.w	r3, r9, r3
 800955c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009560:	f7ff ffd6 	bl	8009510 <__hexdig_fun>
 8009564:	4605      	mov	r5, r0
 8009566:	2800      	cmp	r0, #0
 8009568:	d168      	bne.n	800963c <__gethex+0x100>
 800956a:	49a0      	ldr	r1, [pc, #640]	@ (80097ec <__gethex+0x2b0>)
 800956c:	2201      	movs	r2, #1
 800956e:	4648      	mov	r0, r9
 8009570:	f7ff ff12 	bl	8009398 <strncmp>
 8009574:	4607      	mov	r7, r0
 8009576:	2800      	cmp	r0, #0
 8009578:	d167      	bne.n	800964a <__gethex+0x10e>
 800957a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800957e:	4626      	mov	r6, r4
 8009580:	f7ff ffc6 	bl	8009510 <__hexdig_fun>
 8009584:	2800      	cmp	r0, #0
 8009586:	d062      	beq.n	800964e <__gethex+0x112>
 8009588:	4623      	mov	r3, r4
 800958a:	7818      	ldrb	r0, [r3, #0]
 800958c:	2830      	cmp	r0, #48	@ 0x30
 800958e:	4699      	mov	r9, r3
 8009590:	f103 0301 	add.w	r3, r3, #1
 8009594:	d0f9      	beq.n	800958a <__gethex+0x4e>
 8009596:	f7ff ffbb 	bl	8009510 <__hexdig_fun>
 800959a:	fab0 f580 	clz	r5, r0
 800959e:	096d      	lsrs	r5, r5, #5
 80095a0:	f04f 0b01 	mov.w	fp, #1
 80095a4:	464a      	mov	r2, r9
 80095a6:	4616      	mov	r6, r2
 80095a8:	3201      	adds	r2, #1
 80095aa:	7830      	ldrb	r0, [r6, #0]
 80095ac:	f7ff ffb0 	bl	8009510 <__hexdig_fun>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d1f8      	bne.n	80095a6 <__gethex+0x6a>
 80095b4:	498d      	ldr	r1, [pc, #564]	@ (80097ec <__gethex+0x2b0>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	4630      	mov	r0, r6
 80095ba:	f7ff feed 	bl	8009398 <strncmp>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d13f      	bne.n	8009642 <__gethex+0x106>
 80095c2:	b944      	cbnz	r4, 80095d6 <__gethex+0x9a>
 80095c4:	1c74      	adds	r4, r6, #1
 80095c6:	4622      	mov	r2, r4
 80095c8:	4616      	mov	r6, r2
 80095ca:	3201      	adds	r2, #1
 80095cc:	7830      	ldrb	r0, [r6, #0]
 80095ce:	f7ff ff9f 	bl	8009510 <__hexdig_fun>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d1f8      	bne.n	80095c8 <__gethex+0x8c>
 80095d6:	1ba4      	subs	r4, r4, r6
 80095d8:	00a7      	lsls	r7, r4, #2
 80095da:	7833      	ldrb	r3, [r6, #0]
 80095dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80095e0:	2b50      	cmp	r3, #80	@ 0x50
 80095e2:	d13e      	bne.n	8009662 <__gethex+0x126>
 80095e4:	7873      	ldrb	r3, [r6, #1]
 80095e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80095e8:	d033      	beq.n	8009652 <__gethex+0x116>
 80095ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80095ec:	d034      	beq.n	8009658 <__gethex+0x11c>
 80095ee:	1c71      	adds	r1, r6, #1
 80095f0:	2400      	movs	r4, #0
 80095f2:	7808      	ldrb	r0, [r1, #0]
 80095f4:	f7ff ff8c 	bl	8009510 <__hexdig_fun>
 80095f8:	1e43      	subs	r3, r0, #1
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b18      	cmp	r3, #24
 80095fe:	d830      	bhi.n	8009662 <__gethex+0x126>
 8009600:	f1a0 0210 	sub.w	r2, r0, #16
 8009604:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009608:	f7ff ff82 	bl	8009510 <__hexdig_fun>
 800960c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009610:	fa5f fc8c 	uxtb.w	ip, ip
 8009614:	f1bc 0f18 	cmp.w	ip, #24
 8009618:	f04f 030a 	mov.w	r3, #10
 800961c:	d91e      	bls.n	800965c <__gethex+0x120>
 800961e:	b104      	cbz	r4, 8009622 <__gethex+0xe6>
 8009620:	4252      	negs	r2, r2
 8009622:	4417      	add	r7, r2
 8009624:	f8ca 1000 	str.w	r1, [sl]
 8009628:	b1ed      	cbz	r5, 8009666 <__gethex+0x12a>
 800962a:	f1bb 0f00 	cmp.w	fp, #0
 800962e:	bf0c      	ite	eq
 8009630:	2506      	moveq	r5, #6
 8009632:	2500      	movne	r5, #0
 8009634:	4628      	mov	r0, r5
 8009636:	b005      	add	sp, #20
 8009638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963c:	2500      	movs	r5, #0
 800963e:	462c      	mov	r4, r5
 8009640:	e7b0      	b.n	80095a4 <__gethex+0x68>
 8009642:	2c00      	cmp	r4, #0
 8009644:	d1c7      	bne.n	80095d6 <__gethex+0x9a>
 8009646:	4627      	mov	r7, r4
 8009648:	e7c7      	b.n	80095da <__gethex+0x9e>
 800964a:	464e      	mov	r6, r9
 800964c:	462f      	mov	r7, r5
 800964e:	2501      	movs	r5, #1
 8009650:	e7c3      	b.n	80095da <__gethex+0x9e>
 8009652:	2400      	movs	r4, #0
 8009654:	1cb1      	adds	r1, r6, #2
 8009656:	e7cc      	b.n	80095f2 <__gethex+0xb6>
 8009658:	2401      	movs	r4, #1
 800965a:	e7fb      	b.n	8009654 <__gethex+0x118>
 800965c:	fb03 0002 	mla	r0, r3, r2, r0
 8009660:	e7ce      	b.n	8009600 <__gethex+0xc4>
 8009662:	4631      	mov	r1, r6
 8009664:	e7de      	b.n	8009624 <__gethex+0xe8>
 8009666:	eba6 0309 	sub.w	r3, r6, r9
 800966a:	3b01      	subs	r3, #1
 800966c:	4629      	mov	r1, r5
 800966e:	2b07      	cmp	r3, #7
 8009670:	dc0a      	bgt.n	8009688 <__gethex+0x14c>
 8009672:	9801      	ldr	r0, [sp, #4]
 8009674:	f7fe f93c 	bl	80078f0 <_Balloc>
 8009678:	4604      	mov	r4, r0
 800967a:	b940      	cbnz	r0, 800968e <__gethex+0x152>
 800967c:	4b5c      	ldr	r3, [pc, #368]	@ (80097f0 <__gethex+0x2b4>)
 800967e:	4602      	mov	r2, r0
 8009680:	21e4      	movs	r1, #228	@ 0xe4
 8009682:	485c      	ldr	r0, [pc, #368]	@ (80097f4 <__gethex+0x2b8>)
 8009684:	f7ff fec0 	bl	8009408 <__assert_func>
 8009688:	3101      	adds	r1, #1
 800968a:	105b      	asrs	r3, r3, #1
 800968c:	e7ef      	b.n	800966e <__gethex+0x132>
 800968e:	f100 0a14 	add.w	sl, r0, #20
 8009692:	2300      	movs	r3, #0
 8009694:	4655      	mov	r5, sl
 8009696:	469b      	mov	fp, r3
 8009698:	45b1      	cmp	r9, r6
 800969a:	d337      	bcc.n	800970c <__gethex+0x1d0>
 800969c:	f845 bb04 	str.w	fp, [r5], #4
 80096a0:	eba5 050a 	sub.w	r5, r5, sl
 80096a4:	10ad      	asrs	r5, r5, #2
 80096a6:	6125      	str	r5, [r4, #16]
 80096a8:	4658      	mov	r0, fp
 80096aa:	f7fe fa13 	bl	8007ad4 <__hi0bits>
 80096ae:	016d      	lsls	r5, r5, #5
 80096b0:	f8d8 6000 	ldr.w	r6, [r8]
 80096b4:	1a2d      	subs	r5, r5, r0
 80096b6:	42b5      	cmp	r5, r6
 80096b8:	dd54      	ble.n	8009764 <__gethex+0x228>
 80096ba:	1bad      	subs	r5, r5, r6
 80096bc:	4629      	mov	r1, r5
 80096be:	4620      	mov	r0, r4
 80096c0:	f7fe fda7 	bl	8008212 <__any_on>
 80096c4:	4681      	mov	r9, r0
 80096c6:	b178      	cbz	r0, 80096e8 <__gethex+0x1ac>
 80096c8:	1e6b      	subs	r3, r5, #1
 80096ca:	1159      	asrs	r1, r3, #5
 80096cc:	f003 021f 	and.w	r2, r3, #31
 80096d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80096d4:	f04f 0901 	mov.w	r9, #1
 80096d8:	fa09 f202 	lsl.w	r2, r9, r2
 80096dc:	420a      	tst	r2, r1
 80096de:	d003      	beq.n	80096e8 <__gethex+0x1ac>
 80096e0:	454b      	cmp	r3, r9
 80096e2:	dc36      	bgt.n	8009752 <__gethex+0x216>
 80096e4:	f04f 0902 	mov.w	r9, #2
 80096e8:	4629      	mov	r1, r5
 80096ea:	4620      	mov	r0, r4
 80096ec:	f7ff febe 	bl	800946c <rshift>
 80096f0:	442f      	add	r7, r5
 80096f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096f6:	42bb      	cmp	r3, r7
 80096f8:	da42      	bge.n	8009780 <__gethex+0x244>
 80096fa:	9801      	ldr	r0, [sp, #4]
 80096fc:	4621      	mov	r1, r4
 80096fe:	f7fe f937 	bl	8007970 <_Bfree>
 8009702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009704:	2300      	movs	r3, #0
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	25a3      	movs	r5, #163	@ 0xa3
 800970a:	e793      	b.n	8009634 <__gethex+0xf8>
 800970c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009710:	2a2e      	cmp	r2, #46	@ 0x2e
 8009712:	d012      	beq.n	800973a <__gethex+0x1fe>
 8009714:	2b20      	cmp	r3, #32
 8009716:	d104      	bne.n	8009722 <__gethex+0x1e6>
 8009718:	f845 bb04 	str.w	fp, [r5], #4
 800971c:	f04f 0b00 	mov.w	fp, #0
 8009720:	465b      	mov	r3, fp
 8009722:	7830      	ldrb	r0, [r6, #0]
 8009724:	9303      	str	r3, [sp, #12]
 8009726:	f7ff fef3 	bl	8009510 <__hexdig_fun>
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	f000 000f 	and.w	r0, r0, #15
 8009730:	4098      	lsls	r0, r3
 8009732:	ea4b 0b00 	orr.w	fp, fp, r0
 8009736:	3304      	adds	r3, #4
 8009738:	e7ae      	b.n	8009698 <__gethex+0x15c>
 800973a:	45b1      	cmp	r9, r6
 800973c:	d8ea      	bhi.n	8009714 <__gethex+0x1d8>
 800973e:	492b      	ldr	r1, [pc, #172]	@ (80097ec <__gethex+0x2b0>)
 8009740:	9303      	str	r3, [sp, #12]
 8009742:	2201      	movs	r2, #1
 8009744:	4630      	mov	r0, r6
 8009746:	f7ff fe27 	bl	8009398 <strncmp>
 800974a:	9b03      	ldr	r3, [sp, #12]
 800974c:	2800      	cmp	r0, #0
 800974e:	d1e1      	bne.n	8009714 <__gethex+0x1d8>
 8009750:	e7a2      	b.n	8009698 <__gethex+0x15c>
 8009752:	1ea9      	subs	r1, r5, #2
 8009754:	4620      	mov	r0, r4
 8009756:	f7fe fd5c 	bl	8008212 <__any_on>
 800975a:	2800      	cmp	r0, #0
 800975c:	d0c2      	beq.n	80096e4 <__gethex+0x1a8>
 800975e:	f04f 0903 	mov.w	r9, #3
 8009762:	e7c1      	b.n	80096e8 <__gethex+0x1ac>
 8009764:	da09      	bge.n	800977a <__gethex+0x23e>
 8009766:	1b75      	subs	r5, r6, r5
 8009768:	4621      	mov	r1, r4
 800976a:	9801      	ldr	r0, [sp, #4]
 800976c:	462a      	mov	r2, r5
 800976e:	f7fe fb17 	bl	8007da0 <__lshift>
 8009772:	1b7f      	subs	r7, r7, r5
 8009774:	4604      	mov	r4, r0
 8009776:	f100 0a14 	add.w	sl, r0, #20
 800977a:	f04f 0900 	mov.w	r9, #0
 800977e:	e7b8      	b.n	80096f2 <__gethex+0x1b6>
 8009780:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009784:	42bd      	cmp	r5, r7
 8009786:	dd6f      	ble.n	8009868 <__gethex+0x32c>
 8009788:	1bed      	subs	r5, r5, r7
 800978a:	42ae      	cmp	r6, r5
 800978c:	dc34      	bgt.n	80097f8 <__gethex+0x2bc>
 800978e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d022      	beq.n	80097dc <__gethex+0x2a0>
 8009796:	2b03      	cmp	r3, #3
 8009798:	d024      	beq.n	80097e4 <__gethex+0x2a8>
 800979a:	2b01      	cmp	r3, #1
 800979c:	d115      	bne.n	80097ca <__gethex+0x28e>
 800979e:	42ae      	cmp	r6, r5
 80097a0:	d113      	bne.n	80097ca <__gethex+0x28e>
 80097a2:	2e01      	cmp	r6, #1
 80097a4:	d10b      	bne.n	80097be <__gethex+0x282>
 80097a6:	9a02      	ldr	r2, [sp, #8]
 80097a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	2301      	movs	r3, #1
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	f8ca 3000 	str.w	r3, [sl]
 80097b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097b8:	2562      	movs	r5, #98	@ 0x62
 80097ba:	601c      	str	r4, [r3, #0]
 80097bc:	e73a      	b.n	8009634 <__gethex+0xf8>
 80097be:	1e71      	subs	r1, r6, #1
 80097c0:	4620      	mov	r0, r4
 80097c2:	f7fe fd26 	bl	8008212 <__any_on>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d1ed      	bne.n	80097a6 <__gethex+0x26a>
 80097ca:	9801      	ldr	r0, [sp, #4]
 80097cc:	4621      	mov	r1, r4
 80097ce:	f7fe f8cf 	bl	8007970 <_Bfree>
 80097d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097d4:	2300      	movs	r3, #0
 80097d6:	6013      	str	r3, [r2, #0]
 80097d8:	2550      	movs	r5, #80	@ 0x50
 80097da:	e72b      	b.n	8009634 <__gethex+0xf8>
 80097dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f3      	bne.n	80097ca <__gethex+0x28e>
 80097e2:	e7e0      	b.n	80097a6 <__gethex+0x26a>
 80097e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1dd      	bne.n	80097a6 <__gethex+0x26a>
 80097ea:	e7ee      	b.n	80097ca <__gethex+0x28e>
 80097ec:	0800aae8 	.word	0x0800aae8
 80097f0:	0800a97d 	.word	0x0800a97d
 80097f4:	0800ac96 	.word	0x0800ac96
 80097f8:	1e6f      	subs	r7, r5, #1
 80097fa:	f1b9 0f00 	cmp.w	r9, #0
 80097fe:	d130      	bne.n	8009862 <__gethex+0x326>
 8009800:	b127      	cbz	r7, 800980c <__gethex+0x2d0>
 8009802:	4639      	mov	r1, r7
 8009804:	4620      	mov	r0, r4
 8009806:	f7fe fd04 	bl	8008212 <__any_on>
 800980a:	4681      	mov	r9, r0
 800980c:	117a      	asrs	r2, r7, #5
 800980e:	2301      	movs	r3, #1
 8009810:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009814:	f007 071f 	and.w	r7, r7, #31
 8009818:	40bb      	lsls	r3, r7
 800981a:	4213      	tst	r3, r2
 800981c:	4629      	mov	r1, r5
 800981e:	4620      	mov	r0, r4
 8009820:	bf18      	it	ne
 8009822:	f049 0902 	orrne.w	r9, r9, #2
 8009826:	f7ff fe21 	bl	800946c <rshift>
 800982a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800982e:	1b76      	subs	r6, r6, r5
 8009830:	2502      	movs	r5, #2
 8009832:	f1b9 0f00 	cmp.w	r9, #0
 8009836:	d047      	beq.n	80098c8 <__gethex+0x38c>
 8009838:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d015      	beq.n	800986c <__gethex+0x330>
 8009840:	2b03      	cmp	r3, #3
 8009842:	d017      	beq.n	8009874 <__gethex+0x338>
 8009844:	2b01      	cmp	r3, #1
 8009846:	d109      	bne.n	800985c <__gethex+0x320>
 8009848:	f019 0f02 	tst.w	r9, #2
 800984c:	d006      	beq.n	800985c <__gethex+0x320>
 800984e:	f8da 3000 	ldr.w	r3, [sl]
 8009852:	ea49 0903 	orr.w	r9, r9, r3
 8009856:	f019 0f01 	tst.w	r9, #1
 800985a:	d10e      	bne.n	800987a <__gethex+0x33e>
 800985c:	f045 0510 	orr.w	r5, r5, #16
 8009860:	e032      	b.n	80098c8 <__gethex+0x38c>
 8009862:	f04f 0901 	mov.w	r9, #1
 8009866:	e7d1      	b.n	800980c <__gethex+0x2d0>
 8009868:	2501      	movs	r5, #1
 800986a:	e7e2      	b.n	8009832 <__gethex+0x2f6>
 800986c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800986e:	f1c3 0301 	rsb	r3, r3, #1
 8009872:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0f0      	beq.n	800985c <__gethex+0x320>
 800987a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800987e:	f104 0314 	add.w	r3, r4, #20
 8009882:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009886:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800988a:	f04f 0c00 	mov.w	ip, #0
 800988e:	4618      	mov	r0, r3
 8009890:	f853 2b04 	ldr.w	r2, [r3], #4
 8009894:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009898:	d01b      	beq.n	80098d2 <__gethex+0x396>
 800989a:	3201      	adds	r2, #1
 800989c:	6002      	str	r2, [r0, #0]
 800989e:	2d02      	cmp	r5, #2
 80098a0:	f104 0314 	add.w	r3, r4, #20
 80098a4:	d13c      	bne.n	8009920 <__gethex+0x3e4>
 80098a6:	f8d8 2000 	ldr.w	r2, [r8]
 80098aa:	3a01      	subs	r2, #1
 80098ac:	42b2      	cmp	r2, r6
 80098ae:	d109      	bne.n	80098c4 <__gethex+0x388>
 80098b0:	1171      	asrs	r1, r6, #5
 80098b2:	2201      	movs	r2, #1
 80098b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098b8:	f006 061f 	and.w	r6, r6, #31
 80098bc:	fa02 f606 	lsl.w	r6, r2, r6
 80098c0:	421e      	tst	r6, r3
 80098c2:	d13a      	bne.n	800993a <__gethex+0x3fe>
 80098c4:	f045 0520 	orr.w	r5, r5, #32
 80098c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098ca:	601c      	str	r4, [r3, #0]
 80098cc:	9b02      	ldr	r3, [sp, #8]
 80098ce:	601f      	str	r7, [r3, #0]
 80098d0:	e6b0      	b.n	8009634 <__gethex+0xf8>
 80098d2:	4299      	cmp	r1, r3
 80098d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80098d8:	d8d9      	bhi.n	800988e <__gethex+0x352>
 80098da:	68a3      	ldr	r3, [r4, #8]
 80098dc:	459b      	cmp	fp, r3
 80098de:	db17      	blt.n	8009910 <__gethex+0x3d4>
 80098e0:	6861      	ldr	r1, [r4, #4]
 80098e2:	9801      	ldr	r0, [sp, #4]
 80098e4:	3101      	adds	r1, #1
 80098e6:	f7fe f803 	bl	80078f0 <_Balloc>
 80098ea:	4681      	mov	r9, r0
 80098ec:	b918      	cbnz	r0, 80098f6 <__gethex+0x3ba>
 80098ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009958 <__gethex+0x41c>)
 80098f0:	4602      	mov	r2, r0
 80098f2:	2184      	movs	r1, #132	@ 0x84
 80098f4:	e6c5      	b.n	8009682 <__gethex+0x146>
 80098f6:	6922      	ldr	r2, [r4, #16]
 80098f8:	3202      	adds	r2, #2
 80098fa:	f104 010c 	add.w	r1, r4, #12
 80098fe:	0092      	lsls	r2, r2, #2
 8009900:	300c      	adds	r0, #12
 8009902:	f7ff fd6b 	bl	80093dc <memcpy>
 8009906:	4621      	mov	r1, r4
 8009908:	9801      	ldr	r0, [sp, #4]
 800990a:	f7fe f831 	bl	8007970 <_Bfree>
 800990e:	464c      	mov	r4, r9
 8009910:	6923      	ldr	r3, [r4, #16]
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009918:	6122      	str	r2, [r4, #16]
 800991a:	2201      	movs	r2, #1
 800991c:	615a      	str	r2, [r3, #20]
 800991e:	e7be      	b.n	800989e <__gethex+0x362>
 8009920:	6922      	ldr	r2, [r4, #16]
 8009922:	455a      	cmp	r2, fp
 8009924:	dd0b      	ble.n	800993e <__gethex+0x402>
 8009926:	2101      	movs	r1, #1
 8009928:	4620      	mov	r0, r4
 800992a:	f7ff fd9f 	bl	800946c <rshift>
 800992e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009932:	3701      	adds	r7, #1
 8009934:	42bb      	cmp	r3, r7
 8009936:	f6ff aee0 	blt.w	80096fa <__gethex+0x1be>
 800993a:	2501      	movs	r5, #1
 800993c:	e7c2      	b.n	80098c4 <__gethex+0x388>
 800993e:	f016 061f 	ands.w	r6, r6, #31
 8009942:	d0fa      	beq.n	800993a <__gethex+0x3fe>
 8009944:	4453      	add	r3, sl
 8009946:	f1c6 0620 	rsb	r6, r6, #32
 800994a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800994e:	f7fe f8c1 	bl	8007ad4 <__hi0bits>
 8009952:	42b0      	cmp	r0, r6
 8009954:	dbe7      	blt.n	8009926 <__gethex+0x3ea>
 8009956:	e7f0      	b.n	800993a <__gethex+0x3fe>
 8009958:	0800a97d 	.word	0x0800a97d

0800995c <L_shift>:
 800995c:	f1c2 0208 	rsb	r2, r2, #8
 8009960:	0092      	lsls	r2, r2, #2
 8009962:	b570      	push	{r4, r5, r6, lr}
 8009964:	f1c2 0620 	rsb	r6, r2, #32
 8009968:	6843      	ldr	r3, [r0, #4]
 800996a:	6804      	ldr	r4, [r0, #0]
 800996c:	fa03 f506 	lsl.w	r5, r3, r6
 8009970:	432c      	orrs	r4, r5
 8009972:	40d3      	lsrs	r3, r2
 8009974:	6004      	str	r4, [r0, #0]
 8009976:	f840 3f04 	str.w	r3, [r0, #4]!
 800997a:	4288      	cmp	r0, r1
 800997c:	d3f4      	bcc.n	8009968 <L_shift+0xc>
 800997e:	bd70      	pop	{r4, r5, r6, pc}

08009980 <__match>:
 8009980:	b530      	push	{r4, r5, lr}
 8009982:	6803      	ldr	r3, [r0, #0]
 8009984:	3301      	adds	r3, #1
 8009986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998a:	b914      	cbnz	r4, 8009992 <__match+0x12>
 800998c:	6003      	str	r3, [r0, #0]
 800998e:	2001      	movs	r0, #1
 8009990:	bd30      	pop	{r4, r5, pc}
 8009992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009996:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800999a:	2d19      	cmp	r5, #25
 800999c:	bf98      	it	ls
 800999e:	3220      	addls	r2, #32
 80099a0:	42a2      	cmp	r2, r4
 80099a2:	d0f0      	beq.n	8009986 <__match+0x6>
 80099a4:	2000      	movs	r0, #0
 80099a6:	e7f3      	b.n	8009990 <__match+0x10>

080099a8 <__hexnan>:
 80099a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	680b      	ldr	r3, [r1, #0]
 80099ae:	6801      	ldr	r1, [r0, #0]
 80099b0:	115e      	asrs	r6, r3, #5
 80099b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099b6:	f013 031f 	ands.w	r3, r3, #31
 80099ba:	b087      	sub	sp, #28
 80099bc:	bf18      	it	ne
 80099be:	3604      	addne	r6, #4
 80099c0:	2500      	movs	r5, #0
 80099c2:	1f37      	subs	r7, r6, #4
 80099c4:	4682      	mov	sl, r0
 80099c6:	4690      	mov	r8, r2
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80099ce:	46b9      	mov	r9, r7
 80099d0:	463c      	mov	r4, r7
 80099d2:	9502      	str	r5, [sp, #8]
 80099d4:	46ab      	mov	fp, r5
 80099d6:	784a      	ldrb	r2, [r1, #1]
 80099d8:	1c4b      	adds	r3, r1, #1
 80099da:	9303      	str	r3, [sp, #12]
 80099dc:	b342      	cbz	r2, 8009a30 <__hexnan+0x88>
 80099de:	4610      	mov	r0, r2
 80099e0:	9105      	str	r1, [sp, #20]
 80099e2:	9204      	str	r2, [sp, #16]
 80099e4:	f7ff fd94 	bl	8009510 <__hexdig_fun>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d151      	bne.n	8009a90 <__hexnan+0xe8>
 80099ec:	9a04      	ldr	r2, [sp, #16]
 80099ee:	9905      	ldr	r1, [sp, #20]
 80099f0:	2a20      	cmp	r2, #32
 80099f2:	d818      	bhi.n	8009a26 <__hexnan+0x7e>
 80099f4:	9b02      	ldr	r3, [sp, #8]
 80099f6:	459b      	cmp	fp, r3
 80099f8:	dd13      	ble.n	8009a22 <__hexnan+0x7a>
 80099fa:	454c      	cmp	r4, r9
 80099fc:	d206      	bcs.n	8009a0c <__hexnan+0x64>
 80099fe:	2d07      	cmp	r5, #7
 8009a00:	dc04      	bgt.n	8009a0c <__hexnan+0x64>
 8009a02:	462a      	mov	r2, r5
 8009a04:	4649      	mov	r1, r9
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7ff ffa8 	bl	800995c <L_shift>
 8009a0c:	4544      	cmp	r4, r8
 8009a0e:	d952      	bls.n	8009ab6 <__hexnan+0x10e>
 8009a10:	2300      	movs	r3, #0
 8009a12:	f1a4 0904 	sub.w	r9, r4, #4
 8009a16:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a1a:	f8cd b008 	str.w	fp, [sp, #8]
 8009a1e:	464c      	mov	r4, r9
 8009a20:	461d      	mov	r5, r3
 8009a22:	9903      	ldr	r1, [sp, #12]
 8009a24:	e7d7      	b.n	80099d6 <__hexnan+0x2e>
 8009a26:	2a29      	cmp	r2, #41	@ 0x29
 8009a28:	d157      	bne.n	8009ada <__hexnan+0x132>
 8009a2a:	3102      	adds	r1, #2
 8009a2c:	f8ca 1000 	str.w	r1, [sl]
 8009a30:	f1bb 0f00 	cmp.w	fp, #0
 8009a34:	d051      	beq.n	8009ada <__hexnan+0x132>
 8009a36:	454c      	cmp	r4, r9
 8009a38:	d206      	bcs.n	8009a48 <__hexnan+0xa0>
 8009a3a:	2d07      	cmp	r5, #7
 8009a3c:	dc04      	bgt.n	8009a48 <__hexnan+0xa0>
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4649      	mov	r1, r9
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7ff ff8a 	bl	800995c <L_shift>
 8009a48:	4544      	cmp	r4, r8
 8009a4a:	d936      	bls.n	8009aba <__hexnan+0x112>
 8009a4c:	f1a8 0204 	sub.w	r2, r8, #4
 8009a50:	4623      	mov	r3, r4
 8009a52:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a56:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a5a:	429f      	cmp	r7, r3
 8009a5c:	d2f9      	bcs.n	8009a52 <__hexnan+0xaa>
 8009a5e:	1b3b      	subs	r3, r7, r4
 8009a60:	f023 0303 	bic.w	r3, r3, #3
 8009a64:	3304      	adds	r3, #4
 8009a66:	3401      	adds	r4, #1
 8009a68:	3e03      	subs	r6, #3
 8009a6a:	42b4      	cmp	r4, r6
 8009a6c:	bf88      	it	hi
 8009a6e:	2304      	movhi	r3, #4
 8009a70:	4443      	add	r3, r8
 8009a72:	2200      	movs	r2, #0
 8009a74:	f843 2b04 	str.w	r2, [r3], #4
 8009a78:	429f      	cmp	r7, r3
 8009a7a:	d2fb      	bcs.n	8009a74 <__hexnan+0xcc>
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	b91b      	cbnz	r3, 8009a88 <__hexnan+0xe0>
 8009a80:	4547      	cmp	r7, r8
 8009a82:	d128      	bne.n	8009ad6 <__hexnan+0x12e>
 8009a84:	2301      	movs	r3, #1
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	2005      	movs	r0, #5
 8009a8a:	b007      	add	sp, #28
 8009a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	3501      	adds	r5, #1
 8009a92:	2d08      	cmp	r5, #8
 8009a94:	f10b 0b01 	add.w	fp, fp, #1
 8009a98:	dd06      	ble.n	8009aa8 <__hexnan+0x100>
 8009a9a:	4544      	cmp	r4, r8
 8009a9c:	d9c1      	bls.n	8009a22 <__hexnan+0x7a>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009aa4:	2501      	movs	r5, #1
 8009aa6:	3c04      	subs	r4, #4
 8009aa8:	6822      	ldr	r2, [r4, #0]
 8009aaa:	f000 000f 	and.w	r0, r0, #15
 8009aae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009ab2:	6020      	str	r0, [r4, #0]
 8009ab4:	e7b5      	b.n	8009a22 <__hexnan+0x7a>
 8009ab6:	2508      	movs	r5, #8
 8009ab8:	e7b3      	b.n	8009a22 <__hexnan+0x7a>
 8009aba:	9b01      	ldr	r3, [sp, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0dd      	beq.n	8009a7c <__hexnan+0xd4>
 8009ac0:	f1c3 0320 	rsb	r3, r3, #32
 8009ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac8:	40da      	lsrs	r2, r3
 8009aca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ace:	4013      	ands	r3, r2
 8009ad0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ad4:	e7d2      	b.n	8009a7c <__hexnan+0xd4>
 8009ad6:	3f04      	subs	r7, #4
 8009ad8:	e7d0      	b.n	8009a7c <__hexnan+0xd4>
 8009ada:	2004      	movs	r0, #4
 8009adc:	e7d5      	b.n	8009a8a <__hexnan+0xe2>

08009ade <__ascii_mbtowc>:
 8009ade:	b082      	sub	sp, #8
 8009ae0:	b901      	cbnz	r1, 8009ae4 <__ascii_mbtowc+0x6>
 8009ae2:	a901      	add	r1, sp, #4
 8009ae4:	b142      	cbz	r2, 8009af8 <__ascii_mbtowc+0x1a>
 8009ae6:	b14b      	cbz	r3, 8009afc <__ascii_mbtowc+0x1e>
 8009ae8:	7813      	ldrb	r3, [r2, #0]
 8009aea:	600b      	str	r3, [r1, #0]
 8009aec:	7812      	ldrb	r2, [r2, #0]
 8009aee:	1e10      	subs	r0, r2, #0
 8009af0:	bf18      	it	ne
 8009af2:	2001      	movne	r0, #1
 8009af4:	b002      	add	sp, #8
 8009af6:	4770      	bx	lr
 8009af8:	4610      	mov	r0, r2
 8009afa:	e7fb      	b.n	8009af4 <__ascii_mbtowc+0x16>
 8009afc:	f06f 0001 	mvn.w	r0, #1
 8009b00:	e7f8      	b.n	8009af4 <__ascii_mbtowc+0x16>

08009b02 <_realloc_r>:
 8009b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b06:	4680      	mov	r8, r0
 8009b08:	4615      	mov	r5, r2
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	b921      	cbnz	r1, 8009b18 <_realloc_r+0x16>
 8009b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b12:	4611      	mov	r1, r2
 8009b14:	f7fd be60 	b.w	80077d8 <_malloc_r>
 8009b18:	b92a      	cbnz	r2, 8009b26 <_realloc_r+0x24>
 8009b1a:	f7fd fde9 	bl	80076f0 <_free_r>
 8009b1e:	2400      	movs	r4, #0
 8009b20:	4620      	mov	r0, r4
 8009b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b26:	f000 f840 	bl	8009baa <_malloc_usable_size_r>
 8009b2a:	4285      	cmp	r5, r0
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	d802      	bhi.n	8009b36 <_realloc_r+0x34>
 8009b30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b34:	d8f4      	bhi.n	8009b20 <_realloc_r+0x1e>
 8009b36:	4629      	mov	r1, r5
 8009b38:	4640      	mov	r0, r8
 8009b3a:	f7fd fe4d 	bl	80077d8 <_malloc_r>
 8009b3e:	4607      	mov	r7, r0
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d0ec      	beq.n	8009b1e <_realloc_r+0x1c>
 8009b44:	42b5      	cmp	r5, r6
 8009b46:	462a      	mov	r2, r5
 8009b48:	4621      	mov	r1, r4
 8009b4a:	bf28      	it	cs
 8009b4c:	4632      	movcs	r2, r6
 8009b4e:	f7ff fc45 	bl	80093dc <memcpy>
 8009b52:	4621      	mov	r1, r4
 8009b54:	4640      	mov	r0, r8
 8009b56:	f7fd fdcb 	bl	80076f0 <_free_r>
 8009b5a:	463c      	mov	r4, r7
 8009b5c:	e7e0      	b.n	8009b20 <_realloc_r+0x1e>

08009b5e <__ascii_wctomb>:
 8009b5e:	4603      	mov	r3, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	b141      	cbz	r1, 8009b76 <__ascii_wctomb+0x18>
 8009b64:	2aff      	cmp	r2, #255	@ 0xff
 8009b66:	d904      	bls.n	8009b72 <__ascii_wctomb+0x14>
 8009b68:	228a      	movs	r2, #138	@ 0x8a
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	4770      	bx	lr
 8009b72:	700a      	strb	r2, [r1, #0]
 8009b74:	2001      	movs	r0, #1
 8009b76:	4770      	bx	lr

08009b78 <fiprintf>:
 8009b78:	b40e      	push	{r1, r2, r3}
 8009b7a:	b503      	push	{r0, r1, lr}
 8009b7c:	4601      	mov	r1, r0
 8009b7e:	ab03      	add	r3, sp, #12
 8009b80:	4805      	ldr	r0, [pc, #20]	@ (8009b98 <fiprintf+0x20>)
 8009b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b86:	6800      	ldr	r0, [r0, #0]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	f000 f83f 	bl	8009c0c <_vfiprintf_r>
 8009b8e:	b002      	add	sp, #8
 8009b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b94:	b003      	add	sp, #12
 8009b96:	4770      	bx	lr
 8009b98:	20000034 	.word	0x20000034

08009b9c <abort>:
 8009b9c:	b508      	push	{r3, lr}
 8009b9e:	2006      	movs	r0, #6
 8009ba0:	f000 fa08 	bl	8009fb4 <raise>
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	f7f7 fe34 	bl	8001812 <_exit>

08009baa <_malloc_usable_size_r>:
 8009baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bae:	1f18      	subs	r0, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bfbc      	itt	lt
 8009bb4:	580b      	ldrlt	r3, [r1, r0]
 8009bb6:	18c0      	addlt	r0, r0, r3
 8009bb8:	4770      	bx	lr

08009bba <__sfputc_r>:
 8009bba:	6893      	ldr	r3, [r2, #8]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	b410      	push	{r4}
 8009bc2:	6093      	str	r3, [r2, #8]
 8009bc4:	da08      	bge.n	8009bd8 <__sfputc_r+0x1e>
 8009bc6:	6994      	ldr	r4, [r2, #24]
 8009bc8:	42a3      	cmp	r3, r4
 8009bca:	db01      	blt.n	8009bd0 <__sfputc_r+0x16>
 8009bcc:	290a      	cmp	r1, #10
 8009bce:	d103      	bne.n	8009bd8 <__sfputc_r+0x1e>
 8009bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd4:	f000 b932 	b.w	8009e3c <__swbuf_r>
 8009bd8:	6813      	ldr	r3, [r2, #0]
 8009bda:	1c58      	adds	r0, r3, #1
 8009bdc:	6010      	str	r0, [r2, #0]
 8009bde:	7019      	strb	r1, [r3, #0]
 8009be0:	4608      	mov	r0, r1
 8009be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <__sfputs_r>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	4606      	mov	r6, r0
 8009bec:	460f      	mov	r7, r1
 8009bee:	4614      	mov	r4, r2
 8009bf0:	18d5      	adds	r5, r2, r3
 8009bf2:	42ac      	cmp	r4, r5
 8009bf4:	d101      	bne.n	8009bfa <__sfputs_r+0x12>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	e007      	b.n	8009c0a <__sfputs_r+0x22>
 8009bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bfe:	463a      	mov	r2, r7
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff ffda 	bl	8009bba <__sfputc_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d1f3      	bne.n	8009bf2 <__sfputs_r+0xa>
 8009c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c0c <_vfiprintf_r>:
 8009c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	460d      	mov	r5, r1
 8009c12:	b09d      	sub	sp, #116	@ 0x74
 8009c14:	4614      	mov	r4, r2
 8009c16:	4698      	mov	r8, r3
 8009c18:	4606      	mov	r6, r0
 8009c1a:	b118      	cbz	r0, 8009c24 <_vfiprintf_r+0x18>
 8009c1c:	6a03      	ldr	r3, [r0, #32]
 8009c1e:	b90b      	cbnz	r3, 8009c24 <_vfiprintf_r+0x18>
 8009c20:	f7fc fdf8 	bl	8006814 <__sinit>
 8009c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c26:	07d9      	lsls	r1, r3, #31
 8009c28:	d405      	bmi.n	8009c36 <_vfiprintf_r+0x2a>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	059a      	lsls	r2, r3, #22
 8009c2e:	d402      	bmi.n	8009c36 <_vfiprintf_r+0x2a>
 8009c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c32:	f7fc ff06 	bl	8006a42 <__retarget_lock_acquire_recursive>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	071b      	lsls	r3, r3, #28
 8009c3a:	d501      	bpl.n	8009c40 <_vfiprintf_r+0x34>
 8009c3c:	692b      	ldr	r3, [r5, #16]
 8009c3e:	b99b      	cbnz	r3, 8009c68 <_vfiprintf_r+0x5c>
 8009c40:	4629      	mov	r1, r5
 8009c42:	4630      	mov	r0, r6
 8009c44:	f000 f938 	bl	8009eb8 <__swsetup_r>
 8009c48:	b170      	cbz	r0, 8009c68 <_vfiprintf_r+0x5c>
 8009c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c4c:	07dc      	lsls	r4, r3, #31
 8009c4e:	d504      	bpl.n	8009c5a <_vfiprintf_r+0x4e>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	b01d      	add	sp, #116	@ 0x74
 8009c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	0598      	lsls	r0, r3, #22
 8009c5e:	d4f7      	bmi.n	8009c50 <_vfiprintf_r+0x44>
 8009c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c62:	f7fc feef 	bl	8006a44 <__retarget_lock_release_recursive>
 8009c66:	e7f3      	b.n	8009c50 <_vfiprintf_r+0x44>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c76:	2330      	movs	r3, #48	@ 0x30
 8009c78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e28 <_vfiprintf_r+0x21c>
 8009c7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c80:	f04f 0901 	mov.w	r9, #1
 8009c84:	4623      	mov	r3, r4
 8009c86:	469a      	mov	sl, r3
 8009c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c8c:	b10a      	cbz	r2, 8009c92 <_vfiprintf_r+0x86>
 8009c8e:	2a25      	cmp	r2, #37	@ 0x25
 8009c90:	d1f9      	bne.n	8009c86 <_vfiprintf_r+0x7a>
 8009c92:	ebba 0b04 	subs.w	fp, sl, r4
 8009c96:	d00b      	beq.n	8009cb0 <_vfiprintf_r+0xa4>
 8009c98:	465b      	mov	r3, fp
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7ff ffa2 	bl	8009be8 <__sfputs_r>
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	f000 80a7 	beq.w	8009df8 <_vfiprintf_r+0x1ec>
 8009caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cac:	445a      	add	r2, fp
 8009cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 809f 	beq.w	8009df8 <_vfiprintf_r+0x1ec>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc4:	f10a 0a01 	add.w	sl, sl, #1
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	9307      	str	r3, [sp, #28]
 8009ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cd2:	4654      	mov	r4, sl
 8009cd4:	2205      	movs	r2, #5
 8009cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cda:	4853      	ldr	r0, [pc, #332]	@ (8009e28 <_vfiprintf_r+0x21c>)
 8009cdc:	f7f6 fa98 	bl	8000210 <memchr>
 8009ce0:	9a04      	ldr	r2, [sp, #16]
 8009ce2:	b9d8      	cbnz	r0, 8009d1c <_vfiprintf_r+0x110>
 8009ce4:	06d1      	lsls	r1, r2, #27
 8009ce6:	bf44      	itt	mi
 8009ce8:	2320      	movmi	r3, #32
 8009cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cee:	0713      	lsls	r3, r2, #28
 8009cf0:	bf44      	itt	mi
 8009cf2:	232b      	movmi	r3, #43	@ 0x2b
 8009cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cfe:	d015      	beq.n	8009d2c <_vfiprintf_r+0x120>
 8009d00:	9a07      	ldr	r2, [sp, #28]
 8009d02:	4654      	mov	r4, sl
 8009d04:	2000      	movs	r0, #0
 8009d06:	f04f 0c0a 	mov.w	ip, #10
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d10:	3b30      	subs	r3, #48	@ 0x30
 8009d12:	2b09      	cmp	r3, #9
 8009d14:	d94b      	bls.n	8009dae <_vfiprintf_r+0x1a2>
 8009d16:	b1b0      	cbz	r0, 8009d46 <_vfiprintf_r+0x13a>
 8009d18:	9207      	str	r2, [sp, #28]
 8009d1a:	e014      	b.n	8009d46 <_vfiprintf_r+0x13a>
 8009d1c:	eba0 0308 	sub.w	r3, r0, r8
 8009d20:	fa09 f303 	lsl.w	r3, r9, r3
 8009d24:	4313      	orrs	r3, r2
 8009d26:	9304      	str	r3, [sp, #16]
 8009d28:	46a2      	mov	sl, r4
 8009d2a:	e7d2      	b.n	8009cd2 <_vfiprintf_r+0xc6>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	1d19      	adds	r1, r3, #4
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	9103      	str	r1, [sp, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bfbb      	ittet	lt
 8009d38:	425b      	neglt	r3, r3
 8009d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d3e:	9307      	strge	r3, [sp, #28]
 8009d40:	9307      	strlt	r3, [sp, #28]
 8009d42:	bfb8      	it	lt
 8009d44:	9204      	strlt	r2, [sp, #16]
 8009d46:	7823      	ldrb	r3, [r4, #0]
 8009d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d4a:	d10a      	bne.n	8009d62 <_vfiprintf_r+0x156>
 8009d4c:	7863      	ldrb	r3, [r4, #1]
 8009d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d50:	d132      	bne.n	8009db8 <_vfiprintf_r+0x1ac>
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	1d1a      	adds	r2, r3, #4
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	9203      	str	r2, [sp, #12]
 8009d5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d5e:	3402      	adds	r4, #2
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e38 <_vfiprintf_r+0x22c>
 8009d66:	7821      	ldrb	r1, [r4, #0]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	f7f6 fa50 	bl	8000210 <memchr>
 8009d70:	b138      	cbz	r0, 8009d82 <_vfiprintf_r+0x176>
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	eba0 000a 	sub.w	r0, r0, sl
 8009d78:	2240      	movs	r2, #64	@ 0x40
 8009d7a:	4082      	lsls	r2, r0
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	3401      	adds	r4, #1
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d86:	4829      	ldr	r0, [pc, #164]	@ (8009e2c <_vfiprintf_r+0x220>)
 8009d88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d8c:	2206      	movs	r2, #6
 8009d8e:	f7f6 fa3f 	bl	8000210 <memchr>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d03f      	beq.n	8009e16 <_vfiprintf_r+0x20a>
 8009d96:	4b26      	ldr	r3, [pc, #152]	@ (8009e30 <_vfiprintf_r+0x224>)
 8009d98:	bb1b      	cbnz	r3, 8009de2 <_vfiprintf_r+0x1d6>
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	3307      	adds	r3, #7
 8009d9e:	f023 0307 	bic.w	r3, r3, #7
 8009da2:	3308      	adds	r3, #8
 8009da4:	9303      	str	r3, [sp, #12]
 8009da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da8:	443b      	add	r3, r7
 8009daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dac:	e76a      	b.n	8009c84 <_vfiprintf_r+0x78>
 8009dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009db2:	460c      	mov	r4, r1
 8009db4:	2001      	movs	r0, #1
 8009db6:	e7a8      	b.n	8009d0a <_vfiprintf_r+0xfe>
 8009db8:	2300      	movs	r3, #0
 8009dba:	3401      	adds	r4, #1
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	f04f 0c0a 	mov.w	ip, #10
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dca:	3a30      	subs	r2, #48	@ 0x30
 8009dcc:	2a09      	cmp	r2, #9
 8009dce:	d903      	bls.n	8009dd8 <_vfiprintf_r+0x1cc>
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0c6      	beq.n	8009d62 <_vfiprintf_r+0x156>
 8009dd4:	9105      	str	r1, [sp, #20]
 8009dd6:	e7c4      	b.n	8009d62 <_vfiprintf_r+0x156>
 8009dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ddc:	4604      	mov	r4, r0
 8009dde:	2301      	movs	r3, #1
 8009de0:	e7f0      	b.n	8009dc4 <_vfiprintf_r+0x1b8>
 8009de2:	ab03      	add	r3, sp, #12
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	462a      	mov	r2, r5
 8009de8:	4b12      	ldr	r3, [pc, #72]	@ (8009e34 <_vfiprintf_r+0x228>)
 8009dea:	a904      	add	r1, sp, #16
 8009dec:	4630      	mov	r0, r6
 8009dee:	f7fb feb9 	bl	8005b64 <_printf_float>
 8009df2:	4607      	mov	r7, r0
 8009df4:	1c78      	adds	r0, r7, #1
 8009df6:	d1d6      	bne.n	8009da6 <_vfiprintf_r+0x19a>
 8009df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dfa:	07d9      	lsls	r1, r3, #31
 8009dfc:	d405      	bmi.n	8009e0a <_vfiprintf_r+0x1fe>
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	059a      	lsls	r2, r3, #22
 8009e02:	d402      	bmi.n	8009e0a <_vfiprintf_r+0x1fe>
 8009e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e06:	f7fc fe1d 	bl	8006a44 <__retarget_lock_release_recursive>
 8009e0a:	89ab      	ldrh	r3, [r5, #12]
 8009e0c:	065b      	lsls	r3, r3, #25
 8009e0e:	f53f af1f 	bmi.w	8009c50 <_vfiprintf_r+0x44>
 8009e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e14:	e71e      	b.n	8009c54 <_vfiprintf_r+0x48>
 8009e16:	ab03      	add	r3, sp, #12
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4b05      	ldr	r3, [pc, #20]	@ (8009e34 <_vfiprintf_r+0x228>)
 8009e1e:	a904      	add	r1, sp, #16
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7fc f937 	bl	8006094 <_printf_i>
 8009e26:	e7e4      	b.n	8009df2 <_vfiprintf_r+0x1e6>
 8009e28:	0800ac41 	.word	0x0800ac41
 8009e2c:	0800ac4b 	.word	0x0800ac4b
 8009e30:	08005b65 	.word	0x08005b65
 8009e34:	08009be9 	.word	0x08009be9
 8009e38:	0800ac47 	.word	0x0800ac47

08009e3c <__swbuf_r>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	460e      	mov	r6, r1
 8009e40:	4614      	mov	r4, r2
 8009e42:	4605      	mov	r5, r0
 8009e44:	b118      	cbz	r0, 8009e4e <__swbuf_r+0x12>
 8009e46:	6a03      	ldr	r3, [r0, #32]
 8009e48:	b90b      	cbnz	r3, 8009e4e <__swbuf_r+0x12>
 8009e4a:	f7fc fce3 	bl	8006814 <__sinit>
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	d501      	bpl.n	8009e5c <__swbuf_r+0x20>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	b943      	cbnz	r3, 8009e6e <__swbuf_r+0x32>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 f82a 	bl	8009eb8 <__swsetup_r>
 8009e64:	b118      	cbz	r0, 8009e6e <__swbuf_r+0x32>
 8009e66:	f04f 37ff 	mov.w	r7, #4294967295
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	6922      	ldr	r2, [r4, #16]
 8009e72:	1a98      	subs	r0, r3, r2
 8009e74:	6963      	ldr	r3, [r4, #20]
 8009e76:	b2f6      	uxtb	r6, r6
 8009e78:	4283      	cmp	r3, r0
 8009e7a:	4637      	mov	r7, r6
 8009e7c:	dc05      	bgt.n	8009e8a <__swbuf_r+0x4e>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f7ff fa47 	bl	8009314 <_fflush_r>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d1ed      	bne.n	8009e66 <__swbuf_r+0x2a>
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	60a3      	str	r3, [r4, #8]
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	6022      	str	r2, [r4, #0]
 8009e96:	701e      	strb	r6, [r3, #0]
 8009e98:	6962      	ldr	r2, [r4, #20]
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d004      	beq.n	8009eaa <__swbuf_r+0x6e>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	07db      	lsls	r3, r3, #31
 8009ea4:	d5e1      	bpl.n	8009e6a <__swbuf_r+0x2e>
 8009ea6:	2e0a      	cmp	r6, #10
 8009ea8:	d1df      	bne.n	8009e6a <__swbuf_r+0x2e>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff fa31 	bl	8009314 <_fflush_r>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0d9      	beq.n	8009e6a <__swbuf_r+0x2e>
 8009eb6:	e7d6      	b.n	8009e66 <__swbuf_r+0x2a>

08009eb8 <__swsetup_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4b29      	ldr	r3, [pc, #164]	@ (8009f60 <__swsetup_r+0xa8>)
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	b118      	cbz	r0, 8009ecc <__swsetup_r+0x14>
 8009ec4:	6a03      	ldr	r3, [r0, #32]
 8009ec6:	b90b      	cbnz	r3, 8009ecc <__swsetup_r+0x14>
 8009ec8:	f7fc fca4 	bl	8006814 <__sinit>
 8009ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed0:	0719      	lsls	r1, r3, #28
 8009ed2:	d422      	bmi.n	8009f1a <__swsetup_r+0x62>
 8009ed4:	06da      	lsls	r2, r3, #27
 8009ed6:	d407      	bmi.n	8009ee8 <__swsetup_r+0x30>
 8009ed8:	2209      	movs	r2, #9
 8009eda:	602a      	str	r2, [r5, #0]
 8009edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee6:	e033      	b.n	8009f50 <__swsetup_r+0x98>
 8009ee8:	0758      	lsls	r0, r3, #29
 8009eea:	d512      	bpl.n	8009f12 <__swsetup_r+0x5a>
 8009eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009eee:	b141      	cbz	r1, 8009f02 <__swsetup_r+0x4a>
 8009ef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ef4:	4299      	cmp	r1, r3
 8009ef6:	d002      	beq.n	8009efe <__swsetup_r+0x46>
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f7fd fbf9 	bl	80076f0 <_free_r>
 8009efe:	2300      	movs	r3, #0
 8009f00:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	6063      	str	r3, [r4, #4]
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f043 0308 	orr.w	r3, r3, #8
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	b94b      	cbnz	r3, 8009f32 <__swsetup_r+0x7a>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f28:	d003      	beq.n	8009f32 <__swsetup_r+0x7a>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 f883 	bl	800a038 <__smakebuf_r>
 8009f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f36:	f013 0201 	ands.w	r2, r3, #1
 8009f3a:	d00a      	beq.n	8009f52 <__swsetup_r+0x9a>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	60a2      	str	r2, [r4, #8]
 8009f40:	6962      	ldr	r2, [r4, #20]
 8009f42:	4252      	negs	r2, r2
 8009f44:	61a2      	str	r2, [r4, #24]
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	b942      	cbnz	r2, 8009f5c <__swsetup_r+0xa4>
 8009f4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f4e:	d1c5      	bne.n	8009edc <__swsetup_r+0x24>
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	0799      	lsls	r1, r3, #30
 8009f54:	bf58      	it	pl
 8009f56:	6962      	ldrpl	r2, [r4, #20]
 8009f58:	60a2      	str	r2, [r4, #8]
 8009f5a:	e7f4      	b.n	8009f46 <__swsetup_r+0x8e>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e7f7      	b.n	8009f50 <__swsetup_r+0x98>
 8009f60:	20000034 	.word	0x20000034

08009f64 <_raise_r>:
 8009f64:	291f      	cmp	r1, #31
 8009f66:	b538      	push	{r3, r4, r5, lr}
 8009f68:	4605      	mov	r5, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	d904      	bls.n	8009f78 <_raise_r+0x14>
 8009f6e:	2316      	movs	r3, #22
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	f04f 30ff 	mov.w	r0, #4294967295
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f7a:	b112      	cbz	r2, 8009f82 <_raise_r+0x1e>
 8009f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f80:	b94b      	cbnz	r3, 8009f96 <_raise_r+0x32>
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 f830 	bl	8009fe8 <_getpid_r>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f92:	f000 b817 	b.w	8009fc4 <_kill_r>
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d00a      	beq.n	8009fb0 <_raise_r+0x4c>
 8009f9a:	1c59      	adds	r1, r3, #1
 8009f9c:	d103      	bne.n	8009fa6 <_raise_r+0x42>
 8009f9e:	2316      	movs	r3, #22
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	e7e7      	b.n	8009f76 <_raise_r+0x12>
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fac:	4620      	mov	r0, r4
 8009fae:	4798      	blx	r3
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7e0      	b.n	8009f76 <_raise_r+0x12>

08009fb4 <raise>:
 8009fb4:	4b02      	ldr	r3, [pc, #8]	@ (8009fc0 <raise+0xc>)
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	f7ff bfd3 	b.w	8009f64 <_raise_r>
 8009fbe:	bf00      	nop
 8009fc0:	20000034 	.word	0x20000034

08009fc4 <_kill_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d07      	ldr	r5, [pc, #28]	@ (8009fe4 <_kill_r+0x20>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4604      	mov	r4, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	602b      	str	r3, [r5, #0]
 8009fd2:	f7f7 fc0e 	bl	80017f2 <_kill>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d102      	bne.n	8009fe0 <_kill_r+0x1c>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	b103      	cbz	r3, 8009fe0 <_kill_r+0x1c>
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	bd38      	pop	{r3, r4, r5, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000854 	.word	0x20000854

08009fe8 <_getpid_r>:
 8009fe8:	f7f7 bbfb 	b.w	80017e2 <_getpid>

08009fec <__swhatbuf_r>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	460c      	mov	r4, r1
 8009ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	b096      	sub	sp, #88	@ 0x58
 8009ff8:	4615      	mov	r5, r2
 8009ffa:	461e      	mov	r6, r3
 8009ffc:	da0d      	bge.n	800a01a <__swhatbuf_r+0x2e>
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a004:	f04f 0100 	mov.w	r1, #0
 800a008:	bf14      	ite	ne
 800a00a:	2340      	movne	r3, #64	@ 0x40
 800a00c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a010:	2000      	movs	r0, #0
 800a012:	6031      	str	r1, [r6, #0]
 800a014:	602b      	str	r3, [r5, #0]
 800a016:	b016      	add	sp, #88	@ 0x58
 800a018:	bd70      	pop	{r4, r5, r6, pc}
 800a01a:	466a      	mov	r2, sp
 800a01c:	f000 f848 	bl	800a0b0 <_fstat_r>
 800a020:	2800      	cmp	r0, #0
 800a022:	dbec      	blt.n	8009ffe <__swhatbuf_r+0x12>
 800a024:	9901      	ldr	r1, [sp, #4]
 800a026:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a02a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a02e:	4259      	negs	r1, r3
 800a030:	4159      	adcs	r1, r3
 800a032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a036:	e7eb      	b.n	800a010 <__swhatbuf_r+0x24>

0800a038 <__smakebuf_r>:
 800a038:	898b      	ldrh	r3, [r1, #12]
 800a03a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a03c:	079d      	lsls	r5, r3, #30
 800a03e:	4606      	mov	r6, r0
 800a040:	460c      	mov	r4, r1
 800a042:	d507      	bpl.n	800a054 <__smakebuf_r+0x1c>
 800a044:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	6123      	str	r3, [r4, #16]
 800a04c:	2301      	movs	r3, #1
 800a04e:	6163      	str	r3, [r4, #20]
 800a050:	b003      	add	sp, #12
 800a052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a054:	ab01      	add	r3, sp, #4
 800a056:	466a      	mov	r2, sp
 800a058:	f7ff ffc8 	bl	8009fec <__swhatbuf_r>
 800a05c:	9f00      	ldr	r7, [sp, #0]
 800a05e:	4605      	mov	r5, r0
 800a060:	4639      	mov	r1, r7
 800a062:	4630      	mov	r0, r6
 800a064:	f7fd fbb8 	bl	80077d8 <_malloc_r>
 800a068:	b948      	cbnz	r0, 800a07e <__smakebuf_r+0x46>
 800a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06e:	059a      	lsls	r2, r3, #22
 800a070:	d4ee      	bmi.n	800a050 <__smakebuf_r+0x18>
 800a072:	f023 0303 	bic.w	r3, r3, #3
 800a076:	f043 0302 	orr.w	r3, r3, #2
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	e7e2      	b.n	800a044 <__smakebuf_r+0xc>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	6020      	str	r0, [r4, #0]
 800a082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a086:	81a3      	strh	r3, [r4, #12]
 800a088:	9b01      	ldr	r3, [sp, #4]
 800a08a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a08e:	b15b      	cbz	r3, 800a0a8 <__smakebuf_r+0x70>
 800a090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a094:	4630      	mov	r0, r6
 800a096:	f000 f81d 	bl	800a0d4 <_isatty_r>
 800a09a:	b128      	cbz	r0, 800a0a8 <__smakebuf_r+0x70>
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	f023 0303 	bic.w	r3, r3, #3
 800a0a2:	f043 0301 	orr.w	r3, r3, #1
 800a0a6:	81a3      	strh	r3, [r4, #12]
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	431d      	orrs	r5, r3
 800a0ac:	81a5      	strh	r5, [r4, #12]
 800a0ae:	e7cf      	b.n	800a050 <__smakebuf_r+0x18>

0800a0b0 <_fstat_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d07      	ldr	r5, [pc, #28]	@ (800a0d0 <_fstat_r+0x20>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	602b      	str	r3, [r5, #0]
 800a0be:	f7f7 fbf8 	bl	80018b2 <_fstat>
 800a0c2:	1c43      	adds	r3, r0, #1
 800a0c4:	d102      	bne.n	800a0cc <_fstat_r+0x1c>
 800a0c6:	682b      	ldr	r3, [r5, #0]
 800a0c8:	b103      	cbz	r3, 800a0cc <_fstat_r+0x1c>
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	bd38      	pop	{r3, r4, r5, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20000854 	.word	0x20000854

0800a0d4 <_isatty_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d06      	ldr	r5, [pc, #24]	@ (800a0f0 <_isatty_r+0x1c>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f7f7 fbf7 	bl	80018d2 <_isatty>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_isatty_r+0x1a>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_isatty_r+0x1a>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20000854 	.word	0x20000854

0800a0f4 <_init>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	bf00      	nop
 800a0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fa:	bc08      	pop	{r3}
 800a0fc:	469e      	mov	lr, r3
 800a0fe:	4770      	bx	lr

0800a100 <_fini>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	bf00      	nop
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr
