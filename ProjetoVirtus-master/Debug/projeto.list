
projeto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d0c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  08009ee0  08009ee0  0000aee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aab0  0800aab0  0000c1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aab0  0800aab0  0000bab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aab8  0800aab8  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aab8  0800aab8  0000bab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aabc  0800aabc  0000babc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800aac0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  200001f0  0800acb0  0000c1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  0800acb0  0000c844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e700  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229c  00000000  00000000  0001a920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0001cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bad  00000000  00000000  0001dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023401  00000000  00000000  0001e665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d37  00000000  00000000  00041a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3816  00000000  00000000  0005479d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127fb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005480  00000000  00000000  00127ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0012d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ec4 	.word	0x08009ec4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08009ec4 	.word	0x08009ec4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0a2      	sub	sp, #136	@ 0x88
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ca:	f001 fceb 	bl	8002aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ce:	f000 f89d 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d2:	f000 f987 	bl	80013e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010d6:	f000 f907 	bl	80012e8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010da:	f000 f933 	bl	8001344 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // Inicializa o display
 80010de:	f001 fa1b 	bl	8002518 <SSD1306_Init>


  bmp280_init_default_params(&bmp280.params);
 80010e2:	4840      	ldr	r0, [pc, #256]	@ (80011e4 <main+0x120>)
 80010e4:	f000 fbe9 	bl	80018ba <bmp280_init_default_params>
    bmp280.addr = BMP280_I2C_ADDRESS_0;
 80010e8:	4b3f      	ldr	r3, [pc, #252]	@ (80011e8 <main+0x124>)
 80010ea:	2276      	movs	r2, #118	@ 0x76
 80010ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    bmp280.i2c = &hi2c1;
 80010ee:	4b3e      	ldr	r3, [pc, #248]	@ (80011e8 <main+0x124>)
 80010f0:	4a3e      	ldr	r2, [pc, #248]	@ (80011ec <main+0x128>)
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28

    while (!bmp280_init(&bmp280, &bmp280.params)) {
 80010f4:	bf00      	nop
 80010f6:	493b      	ldr	r1, [pc, #236]	@ (80011e4 <main+0x120>)
 80010f8:	483b      	ldr	r0, [pc, #236]	@ (80011e8 <main+0x124>)
 80010fa:	f000 fd58 	bl	8001bae <bmp280_init>
 80010fe:	4603      	mov	r3, r0
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f5      	bne.n	80010f6 <main+0x32>
    }
    	bool bme280p = bmp280.id == BME280_CHIP_ID;
 800110a:	4b37      	ldr	r3, [pc, #220]	@ (80011e8 <main+0x124>)
 800110c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001110:	2b60      	cmp	r3, #96	@ 0x60
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {

  	HAL_Delay(100);
 800111c:	2064      	movs	r0, #100	@ 0x64
 800111e:	f001 fd33 	bl	8002b88 <HAL_Delay>
  	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001122:	e003      	b.n	800112c <main+0x68>
  		HAL_Delay(2000);
 8001124:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001128:	f001 fd2e 	bl	8002b88 <HAL_Delay>
  	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800112c:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <main+0x12c>)
 800112e:	4a31      	ldr	r2, [pc, #196]	@ (80011f4 <main+0x130>)
 8001130:	4931      	ldr	r1, [pc, #196]	@ (80011f8 <main+0x134>)
 8001132:	482d      	ldr	r0, [pc, #180]	@ (80011e8 <main+0x124>)
 8001134:	f001 f9a4 	bl	8002480 <bmp280_read_float>
 8001138:	4603      	mov	r3, r0
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1ef      	bne.n	8001124 <main+0x60>
  	}

  HAL_Delay(2000);
 8001144:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001148:	f001 fd1e 	bl	8002b88 <HAL_Delay>

  char temperature_msg[64];
  sprintf(temperature_msg, "Temperatura: %f",  temperature);
 800114c:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <main+0x134>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa19 	bl	8000588 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	1d38      	adds	r0, r7, #4
 800115c:	4927      	ldr	r1, [pc, #156]	@ (80011fc <main+0x138>)
 800115e:	f005 fa77 	bl	8006650 <siprintf>
  char pressure_msg[64];
  sprintf(pressure_msg, "Pressao: %f",  pressure);
 8001162:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <main+0x130>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fa0e 	bl	8000588 <__aeabi_f2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001174:	4922      	ldr	r1, [pc, #136]	@ (8001200 <main+0x13c>)
 8001176:	f005 fa6b 	bl	8006650 <siprintf>

  SSD1306_Clear(); //Seta todos os pixels do buffer para branco
 800117a:	f001 fbf0 	bl	800295e <SSD1306_Clear>
  SSD1306_GotoXY(2,0); //Posiciona o "cursor" no pixel correspondente
 800117e:	2100      	movs	r1, #0
 8001180:	2002      	movs	r0, #2
 8001182:	f001 fb33 	bl	80027ec <SSD1306_GotoXY>
  SSD1306_Puts(temperature_msg, &Font_7x10, 1); // Escreva a mensagem
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2201      	movs	r2, #1
 800118a:	491e      	ldr	r1, [pc, #120]	@ (8001204 <main+0x140>)
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fbc1 	bl	8002914 <SSD1306_Puts>
  SSD1306_GotoXY(2, 16);
 8001192:	2110      	movs	r1, #16
 8001194:	2002      	movs	r0, #2
 8001196:	f001 fb29 	bl	80027ec <SSD1306_GotoXY>
  SSD1306_Puts(pressure_msg, &Font_7x10, 1);
 800119a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800119e:	2201      	movs	r2, #1
 80011a0:	4918      	ldr	r1, [pc, #96]	@ (8001204 <main+0x140>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fbb6 	bl	8002914 <SSD1306_Puts>
  SSD1306_GotoXY(2, 26); // Defina a posição inicial
 80011a8:	211a      	movs	r1, #26
 80011aa:	2002      	movs	r0, #2
 80011ac:	f001 fb1e 	bl	80027ec <SSD1306_GotoXY>
  SSD1306_Puts(standard_msg_led, &Font_7x10, 1); // Escreva a mensagem
 80011b0:	2201      	movs	r2, #1
 80011b2:	4914      	ldr	r1, [pc, #80]	@ (8001204 <main+0x140>)
 80011b4:	4814      	ldr	r0, [pc, #80]	@ (8001208 <main+0x144>)
 80011b6:	f001 fbad 	bl	8002914 <SSD1306_Puts>
  SSD1306_GotoXY(2, 36); // Defina a posição inicial
 80011ba:	2124      	movs	r1, #36	@ 0x24
 80011bc:	2002      	movs	r0, #2
 80011be:	f001 fb15 	bl	80027ec <SSD1306_GotoXY>
  SSD1306_Puts(standard_msg_led, &Font_7x10, 1); // Escreva a mensagem
 80011c2:	2201      	movs	r2, #1
 80011c4:	490f      	ldr	r1, [pc, #60]	@ (8001204 <main+0x140>)
 80011c6:	4810      	ldr	r0, [pc, #64]	@ (8001208 <main+0x144>)
 80011c8:	f001 fba4 	bl	8002914 <SSD1306_Puts>
  SSD1306_GotoXY(2, 46); // Defina a posição inicial
 80011cc:	212e      	movs	r1, #46	@ 0x2e
 80011ce:	2002      	movs	r0, #2
 80011d0:	f001 fb0c 	bl	80027ec <SSD1306_GotoXY>
SSD1306_Puts(standard_msg_led, &Font_7x10, 1); // Escreva a mensagem
 80011d4:	2201      	movs	r2, #1
 80011d6:	490b      	ldr	r1, [pc, #44]	@ (8001204 <main+0x140>)
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <main+0x144>)
 80011da:	f001 fb9b 	bl	8002914 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // Atualize o display
 80011de:	f001 fa5f 	bl	80026a0 <SSD1306_UpdateScreen>
    {
 80011e2:	e79b      	b.n	800111c <main+0x58>
 80011e4:	200002d4 	.word	0x200002d4
 80011e8:	200002a8 	.word	0x200002a8
 80011ec:	2000020c 	.word	0x2000020c
 80011f0:	200002e4 	.word	0x200002e4
 80011f4:	200002dc 	.word	0x200002dc
 80011f8:	200002e0 	.word	0x200002e0
 80011fc:	08009ee0 	.word	0x08009ee0
 8001200:	08009ef0 	.word	0x08009ef0
 8001204:	20000018 	.word	0x20000018
 8001208:	20000000 	.word	0x20000000

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	@ 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	2234      	movs	r2, #52	@ 0x34
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f005 fa7b 	bl	8006716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b2a      	ldr	r3, [pc, #168]	@ (80012e0 <SystemClock_Config+0xd4>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	4a29      	ldr	r2, [pc, #164]	@ (80012e0 <SystemClock_Config+0xd4>)
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001240:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <SystemClock_Config+0xd4>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <SystemClock_Config+0xd8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001258:	4a22      	ldr	r2, [pc, #136]	@ (80012e4 <SystemClock_Config+0xd8>)
 800125a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <SystemClock_Config+0xd8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001280:	2310      	movs	r3, #16
 8001282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001284:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001288:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800128a:	2304      	movs	r3, #4
 800128c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800128e:	2302      	movs	r3, #2
 8001290:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001292:	2302      	movs	r3, #2
 8001294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fd34 	bl	8004d08 <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012a6:	f000 f93f 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012aa:	230f      	movs	r3, #15
 80012ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ae:	2302      	movs	r3, #2
 80012b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	2102      	movs	r1, #2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 f9e8 	bl	800469c <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012d2:	f000 f929 	bl	8001528 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3750      	adds	r7, #80	@ 0x50
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012ee:	4a13      	ldr	r2, [pc, #76]	@ (800133c <MX_I2C1_Init+0x54>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012f4:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <MX_I2C1_Init+0x58>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001306:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800130a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001326:	f001 fee7 	bl	80030f8 <HAL_I2C_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001330:	f000 f8fa 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000020c 	.word	0x2000020c
 800133c:	40005400 	.word	0x40005400
 8001340:	00061a80 	.word	0x00061a80

08001344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001362:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <MX_TIM1_Init+0x9c>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001368:	2253      	movs	r2, #83	@ 0x53
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_TIM1_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <MX_TIM1_Init+0x98>)
 800138e:	f003 ff59 	bl	8005244 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001398:	f000 f8c6 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <MX_TIM1_Init+0x98>)
 80013aa:	f003 ff9a 	bl	80052e2 <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013b4:	f000 f8b8 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_TIM1_Init+0x98>)
 80013c6:	f004 f999 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013d0:	f000 f8aa 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000260 	.word	0x20000260
 80013e0:	40010000 	.word	0x40010000

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b46      	ldr	r3, [pc, #280]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a45      	ldr	r2, [pc, #276]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b43      	ldr	r3, [pc, #268]	@ (8001518 <MX_GPIO_Init+0x134>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <MX_GPIO_Init+0x134>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a3e      	ldr	r2, [pc, #248]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a37      	ldr	r2, [pc, #220]	@ (8001518 <MX_GPIO_Init+0x134>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b35      	ldr	r3, [pc, #212]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a30      	ldr	r2, [pc, #192]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b2e      	ldr	r3, [pc, #184]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001470:	482a      	ldr	r0, [pc, #168]	@ (800151c <MX_GPIO_Init+0x138>)
 8001472:	f001 fe27 	bl	80030c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2101      	movs	r1, #1
 800147a:	4829      	ldr	r0, [pc, #164]	@ (8001520 <MX_GPIO_Init+0x13c>)
 800147c:	f001 fe22 	bl	80030c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001486:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4823      	ldr	r0, [pc, #140]	@ (8001524 <MX_GPIO_Init+0x140>)
 8001498:	f001 fc80 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800149c:	230c      	movs	r3, #12
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ac:	2307      	movs	r3, #7
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4819      	ldr	r0, [pc, #100]	@ (800151c <MX_GPIO_Init+0x138>)
 80014b8:	f001 fc70 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8;
 80014bc:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4811      	ldr	r0, [pc, #68]	@ (800151c <MX_GPIO_Init+0x138>)
 80014d6:	f001 fc61 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014da:	2340      	movs	r3, #64	@ 0x40
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480b      	ldr	r0, [pc, #44]	@ (800151c <MX_GPIO_Init+0x138>)
 80014ee:	f001 fc55 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f2:	2301      	movs	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_GPIO_Init+0x13c>)
 800150a:	f001 fc47 	bl	8002d9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	@ 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <Error_Handler+0x8>

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <HAL_MspInit+0x4c>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001548:	6453      	str	r3, [r2, #68]	@ 0x44
 800154a:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_MspInit+0x4c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	@ 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001572:	2007      	movs	r0, #7
 8001574:	f001 fbde 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	@ (8001608 <HAL_I2C_MspInit+0x84>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12c      	bne.n	8001600 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_I2C_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a17      	ldr	r2, [pc, #92]	@ (800160c <HAL_I2C_MspInit+0x88>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_I2C_MspInit+0x88>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c8:	2312      	movs	r3, #18
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d4:	2304      	movs	r3, #4
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	480c      	ldr	r0, [pc, #48]	@ (8001610 <HAL_I2C_MspInit+0x8c>)
 80015e0:	f001 fbdc 	bl	8002d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <HAL_I2C_MspInit+0x88>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_I2C_MspInit+0x88>)
 80015ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_I2C_MspInit+0x88>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	@ 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40005400 	.word	0x40005400
 800160c:	40023800 	.word	0x40023800
 8001610:	40020400 	.word	0x40020400

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_TIM_Base_MspInit+0x3c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10d      	bne.n	8001642 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_TIM_Base_MspInit+0x40>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <HAL_TIM_Base_MspInit+0x40>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6453      	str	r3, [r2, #68]	@ 0x44
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <HAL_TIM_Base_MspInit+0x40>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40010000 	.word	0x40010000
 8001654:	40023800 	.word	0x40023800

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <NMI_Handler+0x4>

08001660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <MemManage_Handler+0x4>

08001670 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <UsageFault_Handler+0x4>

08001680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ae:	f001 fa4b 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_kill>:

int _kill(int pid, int sig)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016d0:	f005 f874 	bl	80067bc <__errno>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2216      	movs	r2, #22
 80016d8:	601a      	str	r2, [r3, #0]
  return -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_exit>:

void _exit (int status)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ee:	f04f 31ff 	mov.w	r1, #4294967295
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffe7 	bl	80016c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <_exit+0x12>

080016fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00a      	b.n	8001724 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800170e:	f3af 8000 	nop.w
 8001712:	4601      	mov	r1, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	b2ca      	uxtb	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf0      	blt.n	800170e <_read+0x12>
  }

  return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e009      	b.n	800175c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	dbf1      	blt.n	8001748 <_write+0x12>
  }
  return len;
 8001764:	687b      	ldr	r3, [r7, #4]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_close>:

int _close(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001796:	605a      	str	r2, [r3, #4]
  return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_isatty>:

int _isatty(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f004 ffd8 	bl	80067bc <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20020000 	.word	0x20020000
 8001838:	00000400 	.word	0x00000400
 800183c:	200002e8 	.word	0x200002e8
 8001840:	20000848 	.word	0x20000848

08001844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800186c:	f7ff ffea 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	@ (80018a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	@ (80018b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001896:	f004 ff97 	bl	80067c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7ff fc13 	bl	80010c4 <main>
  bx  lr    
 800189e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80018ac:	0800aac0 	.word	0x0800aac0
  ldr r2, =_sbss
 80018b0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80018b4:	20000844 	.word	0x20000844

080018b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC_IRQHandler>

080018ba <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2203      	movs	r2, #3
 80018d2:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2203      	movs	r2, #3
 80018d8:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2203      	movs	r2, #3
 80018de:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	715a      	strb	r2, [r3, #5]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b08a      	sub	sp, #40	@ 0x28
 80018f6:	af04      	add	r7, sp, #16
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	460b      	mov	r3, r1
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800190c:	7afb      	ldrb	r3, [r7, #11]
 800190e:	b29a      	uxth	r2, r3
 8001910:	8af9      	ldrh	r1, [r7, #22]
 8001912:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	2302      	movs	r3, #2
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	f001 ff24 	bl	8003770 <HAL_I2C_Mem_Read>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10b      	bne.n	8001946 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800192e:	7d7b      	ldrb	r3, [r7, #21]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b21a      	sxth	r2, r3
 8001934:	7d3b      	ldrb	r3, [r7, #20]
 8001936:	b21b      	sxth	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	b29a      	uxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	801a      	strh	r2, [r3, #0]
		return true;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <read_register16+0x56>
	} else
		return false;
 8001946:	2300      	movs	r3, #0

}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08b      	sub	sp, #44	@ 0x2c
 8001954:	af04      	add	r7, sp, #16
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	461a      	mov	r2, r3
 800195c:	460b      	mov	r3, r1
 800195e:	72fb      	strb	r3, [r7, #11]
 8001960:	4613      	mov	r3, r2
 8001962:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001970:	7afb      	ldrb	r3, [r7, #11]
 8001972:	b29a      	uxth	r2, r3
 8001974:	7abb      	ldrb	r3, [r7, #10]
 8001976:	b29b      	uxth	r3, r3
 8001978:	8af9      	ldrh	r1, [r7, #22]
 800197a:	f241 3488 	movw	r4, #5000	@ 0x1388
 800197e:	9402      	str	r4, [sp, #8]
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	f001 fef2 	bl	8003770 <HAL_I2C_Mem_Read>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <read_data+0x46>
		return 0;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <read_data+0x48>
	else
		return 1;
 8001996:	2301      	movs	r3, #1

}
 8001998:	4618      	mov	r0, r3
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}

080019a0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	461a      	mov	r2, r3
 80019ac:	2188      	movs	r1, #136	@ 0x88
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff9f 	bl	80018f2 <read_register16>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d06f      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3302      	adds	r3, #2
 80019be:	461a      	mov	r2, r3
 80019c0:	218a      	movs	r1, #138	@ 0x8a
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff95 	bl	80018f2 <read_register16>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d065      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	461a      	mov	r2, r3
 80019d4:	218c      	movs	r1, #140	@ 0x8c
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff8b 	bl	80018f2 <read_register16>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d05b      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3306      	adds	r3, #6
 80019e6:	461a      	mov	r2, r3
 80019e8:	218e      	movs	r1, #142	@ 0x8e
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff81 	bl	80018f2 <read_register16>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d051      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3308      	adds	r3, #8
 80019fa:	461a      	mov	r2, r3
 80019fc:	2190      	movs	r1, #144	@ 0x90
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff77 	bl	80018f2 <read_register16>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d047      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	330a      	adds	r3, #10
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2192      	movs	r1, #146	@ 0x92
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff6d 	bl	80018f2 <read_register16>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d03d      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	330c      	adds	r3, #12
 8001a22:	461a      	mov	r2, r3
 8001a24:	2194      	movs	r1, #148	@ 0x94
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff63 	bl	80018f2 <read_register16>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d033      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	330e      	adds	r3, #14
 8001a36:	461a      	mov	r2, r3
 8001a38:	2196      	movs	r1, #150	@ 0x96
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff59 	bl	80018f2 <read_register16>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d029      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3310      	adds	r3, #16
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2198      	movs	r1, #152	@ 0x98
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff4f 	bl	80018f2 <read_register16>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01f      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3312      	adds	r3, #18
 8001a5e:	461a      	mov	r2, r3
 8001a60:	219a      	movs	r1, #154	@ 0x9a
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff45 	bl	80018f2 <read_register16>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d015      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3314      	adds	r3, #20
 8001a72:	461a      	mov	r2, r3
 8001a74:	219c      	movs	r1, #156	@ 0x9c
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff3b 	bl	80018f2 <read_register16>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001a86:	461a      	mov	r2, r3
 8001a88:	219e      	movs	r1, #158	@ 0x9e
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff31 	bl	80018f2 <read_register16>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <read_calibration_data+0xfa>

		return true;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <read_calibration_data+0xfc>
	}

	return false;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f103 0218 	add.w	r2, r3, #24
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	21a1      	movs	r1, #161	@ 0xa1
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ff4a 	bl	8001950 <read_data>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d14b      	bne.n	8001b5a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	331a      	adds	r3, #26
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	21e1      	movs	r1, #225	@ 0xe1
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff11 	bl	80018f2 <read_register16>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d041      	beq.n	8001b5a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f103 021c 	add.w	r2, r3, #28
 8001adc:	2301      	movs	r3, #1
 8001ade:	21e3      	movs	r1, #227	@ 0xe3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff35 	bl	8001950 <read_data>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d136      	bne.n	8001b5a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001aec:	f107 030e 	add.w	r3, r7, #14
 8001af0:	461a      	mov	r2, r3
 8001af2:	21e4      	movs	r1, #228	@ 0xe4
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fefc 	bl	80018f2 <read_register16>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d02c      	beq.n	8001b5a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	461a      	mov	r2, r3
 8001b06:	21e5      	movs	r1, #229	@ 0xe5
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fef2 	bl	80018f2 <read_register16>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d022      	beq.n	8001b5a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	21e7      	movs	r1, #231	@ 0xe7
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff16 	bl	8001950 <read_data>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d117      	bne.n	8001b5a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001b2a:	89fb      	ldrh	r3, [r7, #14]
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	89fb      	ldrh	r3, [r7, #14]
 8001b38:	121b      	asrs	r3, r3, #8
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001b4a:	89bb      	ldrh	r3, [r7, #12]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	841a      	strh	r2, [r3, #32]

		return true;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <read_hum_calibration_data+0xb8>
	}

	return false;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af04      	add	r7, sp, #16
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
 8001b70:	4613      	mov	r3, r2
 8001b72:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	89f9      	ldrh	r1, [r7, #14]
 8001b86:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	1cbb      	adds	r3, r7, #2
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	f001 fcf1 	bl	800357c <HAL_I2C_Mem_Write>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <write_register8+0x40>
		return false;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <write_register8+0x42>
	else
		return true;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001bbc:	2b76      	cmp	r3, #118	@ 0x76
 8001bbe:	d005      	beq.n	8001bcc <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001bc4:	2b77      	cmp	r3, #119	@ 0x77
 8001bc6:	d001      	beq.n	8001bcc <bmp280_init+0x1e>

		return false;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e099      	b.n	8001d00 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	21d0      	movs	r1, #208	@ 0xd0
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff feba 	bl	8001950 <read_data>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <bmp280_init+0x38>
		return false;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e08c      	b.n	8001d00 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001bec:	2b58      	cmp	r3, #88	@ 0x58
 8001bee:	d006      	beq.n	8001bfe <bmp280_init+0x50>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001bf6:	2b60      	cmp	r3, #96	@ 0x60
 8001bf8:	d001      	beq.n	8001bfe <bmp280_init+0x50>

		return false;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e080      	b.n	8001d00 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001bfe:	22b6      	movs	r2, #182	@ 0xb6
 8001c00:	21e0      	movs	r1, #224	@ 0xe0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffae 	bl	8001b64 <write_register8>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <bmp280_init+0x64>
		return false;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e076      	b.n	8001d00 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001c12:	f107 020c 	add.w	r2, r7, #12
 8001c16:	2301      	movs	r3, #1
 8001c18:	21f3      	movs	r1, #243	@ 0xf3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fe98 	bl	8001950 <read_data>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f5      	bne.n	8001c12 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001c26:	7b3b      	ldrb	r3, [r7, #12]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff feb5 	bl	80019a0 <read_calibration_data>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f083 0301 	eor.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d100      	bne.n	8001c44 <bmp280_init+0x96>
 8001c42:	e001      	b.n	8001c48 <bmp280_init+0x9a>
		return false;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e05b      	b.n	8001d00 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001c4e:	2b60      	cmp	r3, #96	@ 0x60
 8001c50:	d10a      	bne.n	8001c68 <bmp280_init+0xba>
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff26 	bl	8001aa4 <read_hum_calibration_data>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <bmp280_init+0xba>
		return false;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e04b      	b.n	8001d00 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	795b      	ldrb	r3, [r3, #5]
 8001c6c:	015b      	lsls	r3, r3, #5
 8001c6e:	b25a      	sxtb	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	461a      	mov	r2, r3
 8001c82:	21f5      	movs	r1, #245	@ 0xf5
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff6d 	bl	8001b64 <write_register8>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <bmp280_init+0xe6>
		return false;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e035      	b.n	8001d00 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d102      	bne.n	8001ca2 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	78db      	ldrb	r3, [r3, #3]
 8001ca6:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001ca8:	b25a      	sxtb	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	789b      	ldrb	r3, [r3, #2]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	b25b      	sxtb	r3, r3
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b25a      	sxtb	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001cc0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cc8:	2b60      	cmp	r3, #96	@ 0x60
 8001cca:	d10d      	bne.n	8001ce8 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	791b      	ldrb	r3, [r3, #4]
 8001cd0:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001cd2:	7b7b      	ldrb	r3, [r7, #13]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	21f2      	movs	r1, #242	@ 0xf2
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff43 	bl	8001b64 <write_register8>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <bmp280_init+0x13a>
			return false;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e00b      	b.n	8001d00 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	461a      	mov	r2, r3
 8001cec:	21f4      	movs	r1, #244	@ 0xf4
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff38 	bl	8001b64 <write_register8>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <bmp280_init+0x150>
		return false;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <bmp280_init+0x152>
	}

	return true;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	10da      	asrs	r2, r3, #3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001d2a:	12db      	asrs	r3, r3, #11
 8001d2c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	111b      	asrs	r3, r3, #4
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	8812      	ldrh	r2, [r2, #0]
 8001d36:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	1112      	asrs	r2, r2, #4
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	8809      	ldrh	r1, [r1, #0]
 8001d40:	1a52      	subs	r2, r2, r1
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001d52:	139b      	asrs	r3, r3, #14
 8001d54:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	441a      	add	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3380      	adds	r3, #128	@ 0x80
 8001d6c:	121b      	asrs	r3, r3, #8
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001d7a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d7e:	b0cc      	sub	sp, #304	@ 0x130
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001d86:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001d8a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001d92:	17da      	asrs	r2, r3, #31
 8001d94:	461c      	mov	r4, r3
 8001d96:	4615      	mov	r5, r2
 8001d98:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001d9c:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001da0:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001da4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001da8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001dac:	fb03 f102 	mul.w	r1, r3, r2
 8001db0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	18ca      	adds	r2, r1, r3
 8001dbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001dc2:	fba3 8903 	umull	r8, r9, r3, r3
 8001dc6:	eb02 0309 	add.w	r3, r2, r9
 8001dca:	4699      	mov	r9, r3
 8001dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001dd0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	17da      	asrs	r2, r3, #31
 8001dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001de0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001de4:	4603      	mov	r3, r0
 8001de6:	fb03 f209 	mul.w	r2, r3, r9
 8001dea:	460b      	mov	r3, r1
 8001dec:	fb08 f303 	mul.w	r3, r8, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	4602      	mov	r2, r0
 8001df4:	fba8 1202 	umull	r1, r2, r8, r2
 8001df8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001e06:	4413      	add	r3, r2
 8001e08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001e0c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001e10:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001e14:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	17da      	asrs	r2, r3, #31
 8001e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e28:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e30:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001e34:	462a      	mov	r2, r5
 8001e36:	fb02 f203 	mul.w	r2, r2, r3
 8001e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	441a      	add	r2, r3
 8001e46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	fba3 1301 	umull	r1, r3, r3, r1
 8001e50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001e54:	460b      	mov	r3, r1
 8001e56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001e5e:	18d3      	adds	r3, r2, r3
 8001e60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001e70:	462b      	mov	r3, r5
 8001e72:	0459      	lsls	r1, r3, #17
 8001e74:	4623      	mov	r3, r4
 8001e76:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	0458      	lsls	r0, r3, #17
 8001e7e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001e82:	1814      	adds	r4, r2, r0
 8001e84:	643c      	str	r4, [r7, #64]	@ 0x40
 8001e86:	414b      	adcs	r3, r1
 8001e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e8a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001e8e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	17da      	asrs	r2, r3, #31
 8001e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001ea2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001ea6:	f04f 0000 	mov.w	r0, #0
 8001eaa:	f04f 0100 	mov.w	r1, #0
 8001eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eb2:	00d9      	lsls	r1, r3, #3
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001eba:	1814      	adds	r4, r2, r0
 8001ebc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001ebe:	414b      	adcs	r3, r1
 8001ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ec2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ec6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001eca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ed2:	fb03 f102 	mul.w	r1, r3, r2
 8001ed6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	18ca      	adds	r2, r1, r3
 8001ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ee8:	fba3 1303 	umull	r1, r3, r3, r3
 8001eec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f04:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	17da      	asrs	r2, r3, #31
 8001f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f10:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f14:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001f18:	462b      	mov	r3, r5
 8001f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001f1e:	4642      	mov	r2, r8
 8001f20:	fb02 f203 	mul.w	r2, r2, r3
 8001f24:	464b      	mov	r3, r9
 8001f26:	4621      	mov	r1, r4
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4622      	mov	r2, r4
 8001f30:	4641      	mov	r1, r8
 8001f32:	fba2 1201 	umull	r1, r2, r2, r1
 8001f36:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001f3a:	460a      	mov	r2, r1
 8001f3c:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001f40:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001f44:	4413      	add	r3, r2
 8001f46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001f4a:	f04f 0000 	mov.w	r0, #0
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001f56:	4623      	mov	r3, r4
 8001f58:	0a18      	lsrs	r0, r3, #8
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f60:	462b      	mov	r3, r5
 8001f62:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	17da      	asrs	r2, r3, #31
 8001f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f74:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f7c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001f80:	464a      	mov	r2, r9
 8001f82:	fb02 f203 	mul.w	r2, r2, r3
 8001f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f8a:	4644      	mov	r4, r8
 8001f8c:	fb04 f303 	mul.w	r3, r4, r3
 8001f90:	441a      	add	r2, r3
 8001f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f96:	4644      	mov	r4, r8
 8001f98:	fba3 4304 	umull	r4, r3, r3, r4
 8001f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001fa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001faa:	18d3      	adds	r3, r2, r3
 8001fac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001fbc:	464c      	mov	r4, r9
 8001fbe:	0323      	lsls	r3, r4, #12
 8001fc0:	4644      	mov	r4, r8
 8001fc2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001fc6:	4644      	mov	r4, r8
 8001fc8:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001fca:	1884      	adds	r4, r0, r2
 8001fcc:	633c      	str	r4, [r7, #48]	@ 0x30
 8001fce:	eb41 0303 	adc.w	r3, r1, r3
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fd4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001fd8:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001fdc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001fe0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001fe4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001fe8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ff0:	88db      	ldrh	r3, [r3, #6]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ffa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002002:	462b      	mov	r3, r5
 8002004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002008:	4642      	mov	r2, r8
 800200a:	fb02 f203 	mul.w	r2, r2, r3
 800200e:	464b      	mov	r3, r9
 8002010:	4621      	mov	r1, r4
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	4622      	mov	r2, r4
 800201a:	4641      	mov	r1, r8
 800201c:	fba2 1201 	umull	r1, r2, r2, r1
 8002020:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8002024:	460a      	mov	r2, r1
 8002026:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800202a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800202e:	4413      	add	r3, r2
 8002030:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002040:	4629      	mov	r1, r5
 8002042:	104a      	asrs	r2, r1, #1
 8002044:	4629      	mov	r1, r5
 8002046:	17cb      	asrs	r3, r1, #31
 8002048:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800204c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002050:	4313      	orrs	r3, r2
 8002052:	d101      	bne.n	8002058 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8002054:	2300      	movs	r3, #0
 8002056:	e148      	b.n	80022ea <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8002058:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800205c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8002060:	17da      	asrs	r2, r3, #31
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002064:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002066:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800206a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800206e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002072:	105b      	asrs	r3, r3, #1
 8002074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002078:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800207c:	07db      	lsls	r3, r3, #31
 800207e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002082:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002086:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800208a:	4621      	mov	r1, r4
 800208c:	1a89      	subs	r1, r1, r2
 800208e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002090:	4629      	mov	r1, r5
 8002092:	eb61 0303 	sbc.w	r3, r1, r3
 8002096:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002098:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800209c:	4622      	mov	r2, r4
 800209e:	462b      	mov	r3, r5
 80020a0:	1891      	adds	r1, r2, r2
 80020a2:	6239      	str	r1, [r7, #32]
 80020a4:	415b      	adcs	r3, r3
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020ac:	4621      	mov	r1, r4
 80020ae:	1851      	adds	r1, r2, r1
 80020b0:	61b9      	str	r1, [r7, #24]
 80020b2:	4629      	mov	r1, r5
 80020b4:	414b      	adcs	r3, r1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80020c4:	4649      	mov	r1, r9
 80020c6:	018b      	lsls	r3, r1, #6
 80020c8:	4641      	mov	r1, r8
 80020ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ce:	4641      	mov	r1, r8
 80020d0:	018a      	lsls	r2, r1, #6
 80020d2:	4641      	mov	r1, r8
 80020d4:	1889      	adds	r1, r1, r2
 80020d6:	6139      	str	r1, [r7, #16]
 80020d8:	4649      	mov	r1, r9
 80020da:	eb43 0101 	adc.w	r1, r3, r1
 80020de:	6179      	str	r1, [r7, #20]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80020ec:	4649      	mov	r1, r9
 80020ee:	008b      	lsls	r3, r1, #2
 80020f0:	4641      	mov	r1, r8
 80020f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020f6:	4641      	mov	r1, r8
 80020f8:	008a      	lsls	r2, r1, #2
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	4622      	mov	r2, r4
 8002102:	189b      	adds	r3, r3, r2
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	460b      	mov	r3, r1
 8002108:	462a      	mov	r2, r5
 800210a:	eb42 0303 	adc.w	r3, r2, r3
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800211c:	4649      	mov	r1, r9
 800211e:	008b      	lsls	r3, r1, #2
 8002120:	4641      	mov	r1, r8
 8002122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002126:	4641      	mov	r1, r8
 8002128:	008a      	lsls	r2, r1, #2
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	4603      	mov	r3, r0
 8002130:	4622      	mov	r2, r4
 8002132:	189b      	adds	r3, r3, r2
 8002134:	673b      	str	r3, [r7, #112]	@ 0x70
 8002136:	462b      	mov	r3, r5
 8002138:	460a      	mov	r2, r1
 800213a:	eb42 0303 	adc.w	r3, r2, r3
 800213e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002140:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002144:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002148:	f7fe fdbe 	bl	8000cc8 <__aeabi_ldivmod>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002158:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800215c:	b21b      	sxth	r3, r3
 800215e:	17da      	asrs	r2, r3, #31
 8002160:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002162:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002164:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002168:	f04f 0000 	mov.w	r0, #0
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	0b50      	lsrs	r0, r2, #13
 8002172:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002176:	1359      	asrs	r1, r3, #13
 8002178:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800217c:	462b      	mov	r3, r5
 800217e:	fb00 f203 	mul.w	r2, r0, r3
 8002182:	4623      	mov	r3, r4
 8002184:	fb03 f301 	mul.w	r3, r3, r1
 8002188:	4413      	add	r3, r2
 800218a:	4622      	mov	r2, r4
 800218c:	fba2 1200 	umull	r1, r2, r2, r0
 8002190:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002194:	460a      	mov	r2, r1
 8002196:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800219a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800219e:	4413      	add	r3, r2
 80021a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80021a4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80021a8:	f04f 0000 	mov.w	r0, #0
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	0b50      	lsrs	r0, r2, #13
 80021b2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80021b6:	1359      	asrs	r1, r3, #13
 80021b8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80021bc:	462b      	mov	r3, r5
 80021be:	fb00 f203 	mul.w	r2, r0, r3
 80021c2:	4623      	mov	r3, r4
 80021c4:	fb03 f301 	mul.w	r3, r3, r1
 80021c8:	4413      	add	r3, r2
 80021ca:	4622      	mov	r2, r4
 80021cc:	fba2 1200 	umull	r1, r2, r2, r0
 80021d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80021d4:	460a      	mov	r2, r1
 80021d6:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80021da:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80021de:	4413      	add	r3, r2
 80021e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80021f0:	4621      	mov	r1, r4
 80021f2:	0e4a      	lsrs	r2, r1, #25
 80021f4:	4629      	mov	r1, r5
 80021f6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80021fa:	4629      	mov	r1, r5
 80021fc:	164b      	asrs	r3, r1, #25
 80021fe:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002206:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800220a:	b21b      	sxth	r3, r3
 800220c:	17da      	asrs	r2, r3, #31
 800220e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002210:	667a      	str	r2, [r7, #100]	@ 0x64
 8002212:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002216:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800221a:	462a      	mov	r2, r5
 800221c:	fb02 f203 	mul.w	r2, r2, r3
 8002220:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002224:	4621      	mov	r1, r4
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002230:	4621      	mov	r1, r4
 8002232:	fba2 1201 	umull	r1, r2, r2, r1
 8002236:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800223a:	460a      	mov	r2, r1
 800223c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8002240:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002244:	4413      	add	r3, r2
 8002246:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002256:	4621      	mov	r1, r4
 8002258:	0cca      	lsrs	r2, r1, #19
 800225a:	4629      	mov	r1, r5
 800225c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002260:	4629      	mov	r1, r5
 8002262:	14cb      	asrs	r3, r1, #19
 8002264:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002268:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800226c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002270:	1884      	adds	r4, r0, r2
 8002272:	65bc      	str	r4, [r7, #88]	@ 0x58
 8002274:	eb41 0303 	adc.w	r3, r1, r3
 8002278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800227a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800227e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002282:	4621      	mov	r1, r4
 8002284:	1889      	adds	r1, r1, r2
 8002286:	6539      	str	r1, [r7, #80]	@ 0x50
 8002288:	4629      	mov	r1, r5
 800228a:	eb43 0101 	adc.w	r1, r3, r1
 800228e:	6579      	str	r1, [r7, #84]	@ 0x54
 8002290:	f04f 0000 	mov.w	r0, #0
 8002294:	f04f 0100 	mov.w	r1, #0
 8002298:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800229c:	4623      	mov	r3, r4
 800229e:	0a18      	lsrs	r0, r3, #8
 80022a0:	462b      	mov	r3, r5
 80022a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80022a6:	462b      	mov	r3, r5
 80022a8:	1219      	asrs	r1, r3, #8
 80022aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	17da      	asrs	r2, r3, #31
 80022b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80022c6:	464c      	mov	r4, r9
 80022c8:	0123      	lsls	r3, r4, #4
 80022ca:	4644      	mov	r4, r8
 80022cc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80022d0:	4644      	mov	r4, r8
 80022d2:	0122      	lsls	r2, r4, #4
 80022d4:	1884      	adds	r4, r0, r2
 80022d6:	603c      	str	r4, [r7, #0]
 80022d8:	eb41 0303 	adc.w	r3, r1, r3
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80022e2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80022e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80022f0:	46bd      	mov	sp, r7
 80022f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022f6 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80022f6:	b480      	push	{r7}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002308:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	039a      	lsls	r2, r3, #14
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002314:	051b      	lsls	r3, r3, #20
 8002316:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800231e:	4619      	mov	r1, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800232c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8002334:	4611      	mov	r1, r2
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	fb01 f202 	mul.w	r2, r1, r2
 800233c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	7f09      	ldrb	r1, [r1, #28]
 8002342:	4608      	mov	r0, r1
 8002344:	6979      	ldr	r1, [r7, #20]
 8002346:	fb00 f101 	mul.w	r1, r0, r1
 800234a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800234c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002350:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002354:	1292      	asrs	r2, r2, #10
 8002356:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002360:	fb01 f202 	mul.w	r2, r1, r2
 8002364:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002368:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	13db      	asrs	r3, r3, #15
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	13d2      	asrs	r2, r2, #15
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	7e12      	ldrb	r2, [r2, #24]
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002394:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800239c:	bfa8      	it	ge
 800239e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80023a2:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	131b      	asrs	r3, r3, #12
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	@ 0x30
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80023c8:	2b60      	cmp	r3, #96	@ 0x60
 80023ca:	d007      	beq.n	80023dc <bmp280_read_fixed+0x28>
		if (humidity)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <bmp280_read_fixed+0x32>
 80023e2:	2308      	movs	r3, #8
 80023e4:	e000      	b.n	80023e8 <bmp280_read_fixed+0x34>
 80023e6:	2306      	movs	r3, #6
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80023ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f107 0218 	add.w	r2, r7, #24
 80023f2:	21f7      	movs	r1, #247	@ 0xf7
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7ff faab 	bl	8001950 <read_data>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <bmp280_read_fixed+0x50>
		return false;
 8002400:	2300      	movs	r3, #0
 8002402:	e038      	b.n	8002476 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002404:	7e3b      	ldrb	r3, [r7, #24]
 8002406:	031a      	lsls	r2, r3, #12
 8002408:	7e7b      	ldrb	r3, [r7, #25]
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	4313      	orrs	r3, r2
 800240e:	7eba      	ldrb	r2, [r7, #26]
 8002410:	0912      	lsrs	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	4313      	orrs	r3, r2
 8002416:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002418:	7efb      	ldrb	r3, [r7, #27]
 800241a:	031a      	lsls	r2, r3, #12
 800241c:	7f3b      	ldrb	r3, [r7, #28]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4313      	orrs	r3, r2
 8002422:	7f7a      	ldrb	r2, [r7, #29]
 8002424:	0912      	lsrs	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	4313      	orrs	r3, r2
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	461a      	mov	r2, r3
 8002432:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff fc67 	bl	8001d08 <compensate_temperature>
 800243a:	4602      	mov	r2, r0
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	461a      	mov	r2, r3
 8002444:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff fc97 	bl	8001d7a <compensate_pressure>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00d      	beq.n	8002474 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002458:	7fbb      	ldrb	r3, [r7, #30]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	7ffa      	ldrb	r2, [r7, #31]
 800245e:	4313      	orrs	r3, r2
 8002460:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	461a      	mov	r2, r3
 8002466:	6a39      	ldr	r1, [r7, #32]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f7ff ff44 	bl	80022f6 <compensate_humidity>
 800246e:	4602      	mov	r2, r0
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002474:	2301      	movs	r3, #1
}
 8002476:	4618      	mov	r0, r3
 8002478:	3730      	adds	r7, #48	@ 0x30
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <bmp280_read_float+0x1a>
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	e000      	b.n	800249c <bmp280_read_float+0x1c>
 800249a:	2300      	movs	r3, #0
 800249c:	f107 0218 	add.w	r2, r7, #24
 80024a0:	f107 011c 	add.w	r1, r7, #28
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff ff85 	bl	80023b4 <bmp280_read_fixed>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d028      	beq.n	8002502 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ba:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800250c <bmp280_read_float+0x8c>
 80024be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002510 <bmp280_read_float+0x90>
 80024d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024f0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002514 <bmp280_read_float+0x94>
 80024f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <bmp280_read_float+0x84>
	}

	return false;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	42c80000 	.word	0x42c80000
 8002510:	43800000 	.word	0x43800000
 8002514:	44800000 	.word	0x44800000

08002518 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800251e:	f000 fa27 	bl	8002970 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002522:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002526:	2201      	movs	r2, #1
 8002528:	2178      	movs	r1, #120	@ 0x78
 800252a:	485b      	ldr	r0, [pc, #364]	@ (8002698 <SSD1306_Init+0x180>)
 800252c:	f001 fb52 	bl	8003bd4 <HAL_I2C_IsDeviceReady>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002536:	2300      	movs	r3, #0
 8002538:	e0a9      	b.n	800268e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800253a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800253e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002540:	e002      	b.n	8002548 <SSD1306_Init+0x30>
		p--;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3b01      	subs	r3, #1
 8002546:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800254e:	22ae      	movs	r2, #174	@ 0xae
 8002550:	2100      	movs	r1, #0
 8002552:	2078      	movs	r0, #120	@ 0x78
 8002554:	f000 fa88 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002558:	2220      	movs	r2, #32
 800255a:	2100      	movs	r1, #0
 800255c:	2078      	movs	r0, #120	@ 0x78
 800255e:	f000 fa83 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002562:	2210      	movs	r2, #16
 8002564:	2100      	movs	r1, #0
 8002566:	2078      	movs	r0, #120	@ 0x78
 8002568:	f000 fa7e 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800256c:	22b0      	movs	r2, #176	@ 0xb0
 800256e:	2100      	movs	r1, #0
 8002570:	2078      	movs	r0, #120	@ 0x78
 8002572:	f000 fa79 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002576:	22c8      	movs	r2, #200	@ 0xc8
 8002578:	2100      	movs	r1, #0
 800257a:	2078      	movs	r0, #120	@ 0x78
 800257c:	f000 fa74 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	2078      	movs	r0, #120	@ 0x78
 8002586:	f000 fa6f 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800258a:	2210      	movs	r2, #16
 800258c:	2100      	movs	r1, #0
 800258e:	2078      	movs	r0, #120	@ 0x78
 8002590:	f000 fa6a 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002594:	2240      	movs	r2, #64	@ 0x40
 8002596:	2100      	movs	r1, #0
 8002598:	2078      	movs	r0, #120	@ 0x78
 800259a:	f000 fa65 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800259e:	2281      	movs	r2, #129	@ 0x81
 80025a0:	2100      	movs	r1, #0
 80025a2:	2078      	movs	r0, #120	@ 0x78
 80025a4:	f000 fa60 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80025a8:	22ff      	movs	r2, #255	@ 0xff
 80025aa:	2100      	movs	r1, #0
 80025ac:	2078      	movs	r0, #120	@ 0x78
 80025ae:	f000 fa5b 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80025b2:	22a1      	movs	r2, #161	@ 0xa1
 80025b4:	2100      	movs	r1, #0
 80025b6:	2078      	movs	r0, #120	@ 0x78
 80025b8:	f000 fa56 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80025bc:	22a6      	movs	r2, #166	@ 0xa6
 80025be:	2100      	movs	r1, #0
 80025c0:	2078      	movs	r0, #120	@ 0x78
 80025c2:	f000 fa51 	bl	8002a68 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80025c6:	22a8      	movs	r2, #168	@ 0xa8
 80025c8:	2100      	movs	r1, #0
 80025ca:	2078      	movs	r0, #120	@ 0x78
 80025cc:	f000 fa4c 	bl	8002a68 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80025d0:	223f      	movs	r2, #63	@ 0x3f
 80025d2:	2100      	movs	r1, #0
 80025d4:	2078      	movs	r0, #120	@ 0x78
 80025d6:	f000 fa47 	bl	8002a68 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80025da:	22a4      	movs	r2, #164	@ 0xa4
 80025dc:	2100      	movs	r1, #0
 80025de:	2078      	movs	r0, #120	@ 0x78
 80025e0:	f000 fa42 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80025e4:	22d3      	movs	r2, #211	@ 0xd3
 80025e6:	2100      	movs	r1, #0
 80025e8:	2078      	movs	r0, #120	@ 0x78
 80025ea:	f000 fa3d 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2078      	movs	r0, #120	@ 0x78
 80025f4:	f000 fa38 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80025f8:	22d5      	movs	r2, #213	@ 0xd5
 80025fa:	2100      	movs	r1, #0
 80025fc:	2078      	movs	r0, #120	@ 0x78
 80025fe:	f000 fa33 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002602:	22f0      	movs	r2, #240	@ 0xf0
 8002604:	2100      	movs	r1, #0
 8002606:	2078      	movs	r0, #120	@ 0x78
 8002608:	f000 fa2e 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800260c:	22d9      	movs	r2, #217	@ 0xd9
 800260e:	2100      	movs	r1, #0
 8002610:	2078      	movs	r0, #120	@ 0x78
 8002612:	f000 fa29 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002616:	2222      	movs	r2, #34	@ 0x22
 8002618:	2100      	movs	r1, #0
 800261a:	2078      	movs	r0, #120	@ 0x78
 800261c:	f000 fa24 	bl	8002a68 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002620:	22da      	movs	r2, #218	@ 0xda
 8002622:	2100      	movs	r1, #0
 8002624:	2078      	movs	r0, #120	@ 0x78
 8002626:	f000 fa1f 	bl	8002a68 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800262a:	2212      	movs	r2, #18
 800262c:	2100      	movs	r1, #0
 800262e:	2078      	movs	r0, #120	@ 0x78
 8002630:	f000 fa1a 	bl	8002a68 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002634:	22db      	movs	r2, #219	@ 0xdb
 8002636:	2100      	movs	r1, #0
 8002638:	2078      	movs	r0, #120	@ 0x78
 800263a:	f000 fa15 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800263e:	2220      	movs	r2, #32
 8002640:	2100      	movs	r1, #0
 8002642:	2078      	movs	r0, #120	@ 0x78
 8002644:	f000 fa10 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002648:	228d      	movs	r2, #141	@ 0x8d
 800264a:	2100      	movs	r1, #0
 800264c:	2078      	movs	r0, #120	@ 0x78
 800264e:	f000 fa0b 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002652:	2214      	movs	r2, #20
 8002654:	2100      	movs	r1, #0
 8002656:	2078      	movs	r0, #120	@ 0x78
 8002658:	f000 fa06 	bl	8002a68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800265c:	22af      	movs	r2, #175	@ 0xaf
 800265e:	2100      	movs	r1, #0
 8002660:	2078      	movs	r0, #120	@ 0x78
 8002662:	f000 fa01 	bl	8002a68 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002666:	222e      	movs	r2, #46	@ 0x2e
 8002668:	2100      	movs	r1, #0
 800266a:	2078      	movs	r0, #120	@ 0x78
 800266c:	f000 f9fc 	bl	8002a68 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002670:	2000      	movs	r0, #0
 8002672:	f000 f843 	bl	80026fc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002676:	f000 f813 	bl	80026a0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <SSD1306_Init+0x184>)
 800267c:	2200      	movs	r2, #0
 800267e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <SSD1306_Init+0x184>)
 8002682:	2200      	movs	r2, #0
 8002684:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002686:	4b05      	ldr	r3, [pc, #20]	@ (800269c <SSD1306_Init+0x184>)
 8002688:	2201      	movs	r2, #1
 800268a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800268c:	2301      	movs	r3, #1
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000020c 	.word	0x2000020c
 800269c:	200006ec 	.word	0x200006ec

080026a0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80026a6:	2300      	movs	r3, #0
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	e01d      	b.n	80026e8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	3b50      	subs	r3, #80	@ 0x50
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	2100      	movs	r1, #0
 80026b6:	2078      	movs	r0, #120	@ 0x78
 80026b8:	f000 f9d6 	bl	8002a68 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	2078      	movs	r0, #120	@ 0x78
 80026c2:	f000 f9d1 	bl	8002a68 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80026c6:	2210      	movs	r2, #16
 80026c8:	2100      	movs	r1, #0
 80026ca:	2078      	movs	r0, #120	@ 0x78
 80026cc:	f000 f9cc 	bl	8002a68 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	01db      	lsls	r3, r3, #7
 80026d4:	4a08      	ldr	r2, [pc, #32]	@ (80026f8 <SSD1306_UpdateScreen+0x58>)
 80026d6:	441a      	add	r2, r3
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	2140      	movs	r1, #64	@ 0x40
 80026dc:	2078      	movs	r0, #120	@ 0x78
 80026de:	f000 f95d 	bl	800299c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	3301      	adds	r3, #1
 80026e6:	71fb      	strb	r3, [r7, #7]
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	2b07      	cmp	r3, #7
 80026ec:	d9de      	bls.n	80026ac <SSD1306_UpdateScreen+0xc>
	}
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	200002ec 	.word	0x200002ec

080026fc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <SSD1306_Fill+0x14>
 800270c:	2300      	movs	r3, #0
 800270e:	e000      	b.n	8002712 <SSD1306_Fill+0x16>
 8002710:	23ff      	movs	r3, #255	@ 0xff
 8002712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002716:	4619      	mov	r1, r3
 8002718:	4803      	ldr	r0, [pc, #12]	@ (8002728 <SSD1306_Fill+0x2c>)
 800271a:	f003 fffc 	bl	8006716 <memset>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200002ec 	.word	0x200002ec

0800272c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
 8002736:	460b      	mov	r3, r1
 8002738:	80bb      	strh	r3, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	70fb      	strb	r3, [r7, #3]
	if (
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	2b7f      	cmp	r3, #127	@ 0x7f
 8002742:	d848      	bhi.n	80027d6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002744:	88bb      	ldrh	r3, [r7, #4]
 8002746:	2b3f      	cmp	r3, #63	@ 0x3f
 8002748:	d845      	bhi.n	80027d6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800274a:	4b26      	ldr	r3, [pc, #152]	@ (80027e4 <SSD1306_DrawPixel+0xb8>)
 800274c:	791b      	ldrb	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d006      	beq.n	8002760 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d11a      	bne.n	800279c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002766:	88fa      	ldrh	r2, [r7, #6]
 8002768:	88bb      	ldrh	r3, [r7, #4]
 800276a:	08db      	lsrs	r3, r3, #3
 800276c:	b298      	uxth	r0, r3
 800276e:	4603      	mov	r3, r0
 8002770:	01db      	lsls	r3, r3, #7
 8002772:	4413      	add	r3, r2
 8002774:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <SSD1306_DrawPixel+0xbc>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	b25a      	sxtb	r2, r3
 800277a:	88bb      	ldrh	r3, [r7, #4]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	b25b      	sxtb	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b259      	sxtb	r1, r3
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	4603      	mov	r3, r0
 8002790:	01db      	lsls	r3, r3, #7
 8002792:	4413      	add	r3, r2
 8002794:	b2c9      	uxtb	r1, r1
 8002796:	4a14      	ldr	r2, [pc, #80]	@ (80027e8 <SSD1306_DrawPixel+0xbc>)
 8002798:	54d1      	strb	r1, [r2, r3]
 800279a:	e01d      	b.n	80027d8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	88bb      	ldrh	r3, [r7, #4]
 80027a0:	08db      	lsrs	r3, r3, #3
 80027a2:	b298      	uxth	r0, r3
 80027a4:	4603      	mov	r3, r0
 80027a6:	01db      	lsls	r3, r3, #7
 80027a8:	4413      	add	r3, r2
 80027aa:	4a0f      	ldr	r2, [pc, #60]	@ (80027e8 <SSD1306_DrawPixel+0xbc>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	b25a      	sxtb	r2, r3
 80027b0:	88bb      	ldrh	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	4013      	ands	r3, r2
 80027c4:	b259      	sxtb	r1, r3
 80027c6:	88fa      	ldrh	r2, [r7, #6]
 80027c8:	4603      	mov	r3, r0
 80027ca:	01db      	lsls	r3, r3, #7
 80027cc:	4413      	add	r3, r2
 80027ce:	b2c9      	uxtb	r1, r1
 80027d0:	4a05      	ldr	r2, [pc, #20]	@ (80027e8 <SSD1306_DrawPixel+0xbc>)
 80027d2:	54d1      	strb	r1, [r2, r3]
 80027d4:	e000      	b.n	80027d8 <SSD1306_DrawPixel+0xac>
		return;
 80027d6:	bf00      	nop
	}
}
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	200006ec 	.word	0x200006ec
 80027e8:	200002ec 	.word	0x200002ec

080027ec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	460a      	mov	r2, r1
 80027f6:	80fb      	strh	r3, [r7, #6]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80027fc:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <SSD1306_GotoXY+0x28>)
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002802:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <SSD1306_GotoXY+0x28>)
 8002804:	88bb      	ldrh	r3, [r7, #4]
 8002806:	8053      	strh	r3, [r2, #2]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	200006ec 	.word	0x200006ec

08002818 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
 8002824:	4613      	mov	r3, r2
 8002826:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002828:	4b39      	ldr	r3, [pc, #228]	@ (8002910 <SSD1306_Putc+0xf8>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
	if (
 8002834:	2b7f      	cmp	r3, #127	@ 0x7f
 8002836:	dc07      	bgt.n	8002848 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002838:	4b35      	ldr	r3, [pc, #212]	@ (8002910 <SSD1306_Putc+0xf8>)
 800283a:	885b      	ldrh	r3, [r3, #2]
 800283c:	461a      	mov	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002844:	2b3f      	cmp	r3, #63	@ 0x3f
 8002846:	dd01      	ble.n	800284c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002848:	2300      	movs	r3, #0
 800284a:	e05d      	b.n	8002908 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e04b      	b.n	80028ea <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	3b20      	subs	r3, #32
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	7849      	ldrb	r1, [r1, #1]
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4619      	mov	r1, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	440b      	add	r3, r1
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	e030      	b.n	80028d8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d010      	beq.n	80028a8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002886:	4b22      	ldr	r3, [pc, #136]	@ (8002910 <SSD1306_Putc+0xf8>)
 8002888:	881a      	ldrh	r2, [r3, #0]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	b29b      	uxth	r3, r3
 800288e:	4413      	add	r3, r2
 8002890:	b298      	uxth	r0, r3
 8002892:	4b1f      	ldr	r3, [pc, #124]	@ (8002910 <SSD1306_Putc+0xf8>)
 8002894:	885a      	ldrh	r2, [r3, #2]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	b29b      	uxth	r3, r3
 800289a:	4413      	add	r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	79ba      	ldrb	r2, [r7, #6]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7ff ff43 	bl	800272c <SSD1306_DrawPixel>
 80028a6:	e014      	b.n	80028d2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80028a8:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <SSD1306_Putc+0xf8>)
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	b298      	uxth	r0, r3
 80028b4:	4b16      	ldr	r3, [pc, #88]	@ (8002910 <SSD1306_Putc+0xf8>)
 80028b6:	885a      	ldrh	r2, [r3, #2]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b299      	uxth	r1, r3
 80028c0:	79bb      	ldrb	r3, [r7, #6]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	f7ff ff2d 	bl	800272c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	3301      	adds	r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d3c8      	bcc.n	8002876 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	785b      	ldrb	r3, [r3, #1]
 80028ee:	461a      	mov	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d3ad      	bcc.n	8002852 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <SSD1306_Putc+0xf8>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <SSD1306_Putc+0xf8>)
 8002904:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002906:	79fb      	ldrb	r3, [r7, #7]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200006ec 	.word	0x200006ec

08002914 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002922:	e012      	b.n	800294a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	79fa      	ldrb	r2, [r7, #7]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff73 	bl	8002818 <SSD1306_Putc>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d002      	beq.n	8002944 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	e008      	b.n	8002956 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3301      	adds	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e8      	bne.n	8002924 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	781b      	ldrb	r3, [r3, #0]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002962:	2000      	movs	r0, #0
 8002964:	f7ff feca 	bl	80026fc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002968:	f7ff fe9a 	bl	80026a0 <SSD1306_UpdateScreen>
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002976:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <ssd1306_I2C_Init+0x28>)
 8002978:	607b      	str	r3, [r7, #4]
	while(p>0)
 800297a:	e002      	b.n	8002982 <ssd1306_I2C_Init+0x12>
		p--;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f9      	bne.n	800297c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	0003d090 	.word	0x0003d090

0800299c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b0c7      	sub	sp, #284	@ 0x11c
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	4604      	mov	r4, r0
 80029a4:	4608      	mov	r0, r1
 80029a6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80029aa:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80029ae:	600a      	str	r2, [r1, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029b6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80029ba:	4622      	mov	r2, r4
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029c2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80029c6:	4602      	mov	r2, r0
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029d2:	460a      	mov	r2, r1
 80029d4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80029d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80029e2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80029f0:	e015      	b.n	8002a1e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80029f2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80029f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80029fa:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	441a      	add	r2, r3
 8002a02:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002a06:	3301      	adds	r3, #1
 8002a08:	7811      	ldrb	r1, [r2, #0]
 8002a0a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002a0e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002a12:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002a14:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002a1e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002a28:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002a2c:	8812      	ldrh	r2, [r2, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d8df      	bhi.n	80029f2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8002a32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a36:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b299      	uxth	r1, r3
 8002a3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	200a      	movs	r0, #10
 8002a52:	9000      	str	r0, [sp, #0]
 8002a54:	4803      	ldr	r0, [pc, #12]	@ (8002a64 <ssd1306_I2C_WriteMulti+0xc8>)
 8002a56:	f000 fc93 	bl	8003380 <HAL_I2C_Master_Transmit>
}
 8002a5a:	bf00      	nop
 8002a5c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	2000020c 	.word	0x2000020c

08002a68 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
 8002a72:	460b      	mov	r3, r1
 8002a74:	71bb      	strb	r3, [r7, #6]
 8002a76:	4613      	mov	r3, r2
 8002a78:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002a7a:	79bb      	ldrb	r3, [r7, #6]
 8002a7c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002a7e:	797b      	ldrb	r3, [r7, #5]
 8002a80:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	b299      	uxth	r1, r3
 8002a86:	f107 020c 	add.w	r2, r7, #12
 8002a8a:	230a      	movs	r3, #10
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2302      	movs	r3, #2
 8002a90:	4803      	ldr	r0, [pc, #12]	@ (8002aa0 <ssd1306_I2C_Write+0x38>)
 8002a92:	f000 fc75 	bl	8003380 <HAL_I2C_Master_Transmit>
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000020c 	.word	0x2000020c

08002aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae4 <HAL_Init+0x40>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae4 <HAL_Init+0x40>)
 8002aba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac0:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a07      	ldr	r2, [pc, #28]	@ (8002ae4 <HAL_Init+0x40>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002acc:	2003      	movs	r0, #3
 8002ace:	f000 f931 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 f808 	bl	8002ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad8:	f7fe fd2c 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af0:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <HAL_InitTick+0x54>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <HAL_InitTick+0x58>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f93b 	bl	8002d82 <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00e      	b.n	8002b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f000 f911 	bl	8002d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4a06      	ldr	r2, [pc, #24]	@ (8002b44 <HAL_InitTick+0x5c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000014 	.word	0x20000014
 8002b40:	20000024 	.word	0x20000024
 8002b44:	20000020 	.word	0x20000020

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <HAL_IncTick+0x20>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_IncTick+0x24>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	@ (8002b6c <HAL_IncTick+0x24>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000024 	.word	0x20000024
 8002b6c:	200006f4 	.word	0x200006f4

08002b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b03      	ldr	r3, [pc, #12]	@ (8002b84 <HAL_GetTick+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	200006f4 	.word	0x200006f4

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff ffee 	bl	8002b70 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000024 	.word	0x20000024

08002bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c02:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	60d3      	str	r3, [r2, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <__NVIC_GetPriorityGrouping+0x18>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 0307 	and.w	r3, r3, #7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	@ (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	@ (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	@ 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d00:	d301      	bcc.n	8002d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00f      	b.n	8002d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d06:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <SysTick_Config+0x40>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0e:	210f      	movs	r1, #15
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f7ff ff8e 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <SysTick_Config+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1e:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <SysTick_Config+0x40>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	e000e010 	.word	0xe000e010

08002d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff47 	bl	8002bd0 <__NVIC_SetPriorityGrouping>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5c:	f7ff ff5c 	bl	8002c18 <__NVIC_GetPriorityGrouping>
 8002d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f7ff ff8e 	bl	8002c88 <NVIC_EncodePriority>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff5d 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ffb0 	bl	8002cf0 <SysTick_Config>
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	@ 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	e165      	b.n	8003084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	f040 8154 	bne.w	800307e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d005      	beq.n	8002dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d130      	bne.n	8002e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	2203      	movs	r2, #3
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e24:	2201      	movs	r2, #1
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 0201 	and.w	r2, r3, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d017      	beq.n	8002e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d123      	bne.n	8002ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	08da      	lsrs	r2, r3, #3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3208      	adds	r2, #8
 8002ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	220f      	movs	r2, #15
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	08da      	lsrs	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3208      	adds	r2, #8
 8002eda:	69b9      	ldr	r1, [r7, #24]
 8002edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0203 	and.w	r2, r3, #3
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80ae 	beq.w	800307e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	4b5d      	ldr	r3, [pc, #372]	@ (800309c <HAL_GPIO_Init+0x300>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800309c <HAL_GPIO_Init+0x300>)
 8002f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f32:	4b5a      	ldr	r3, [pc, #360]	@ (800309c <HAL_GPIO_Init+0x300>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f3e:	4a58      	ldr	r2, [pc, #352]	@ (80030a0 <HAL_GPIO_Init+0x304>)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3302      	adds	r3, #2
 8002f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4f      	ldr	r2, [pc, #316]	@ (80030a4 <HAL_GPIO_Init+0x308>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d025      	beq.n	8002fb6 <HAL_GPIO_Init+0x21a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4e      	ldr	r2, [pc, #312]	@ (80030a8 <HAL_GPIO_Init+0x30c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01f      	beq.n	8002fb2 <HAL_GPIO_Init+0x216>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4d      	ldr	r2, [pc, #308]	@ (80030ac <HAL_GPIO_Init+0x310>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d019      	beq.n	8002fae <HAL_GPIO_Init+0x212>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4c      	ldr	r2, [pc, #304]	@ (80030b0 <HAL_GPIO_Init+0x314>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_GPIO_Init+0x20e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4b      	ldr	r2, [pc, #300]	@ (80030b4 <HAL_GPIO_Init+0x318>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00d      	beq.n	8002fa6 <HAL_GPIO_Init+0x20a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80030b8 <HAL_GPIO_Init+0x31c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d007      	beq.n	8002fa2 <HAL_GPIO_Init+0x206>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a49      	ldr	r2, [pc, #292]	@ (80030bc <HAL_GPIO_Init+0x320>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <HAL_GPIO_Init+0x202>
 8002f9a:	2306      	movs	r3, #6
 8002f9c:	e00c      	b.n	8002fb8 <HAL_GPIO_Init+0x21c>
 8002f9e:	2307      	movs	r3, #7
 8002fa0:	e00a      	b.n	8002fb8 <HAL_GPIO_Init+0x21c>
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	e008      	b.n	8002fb8 <HAL_GPIO_Init+0x21c>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x21c>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e004      	b.n	8002fb8 <HAL_GPIO_Init+0x21c>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_Init+0x21c>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_Init+0x21c>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f002 0203 	and.w	r2, r2, #3
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc8:	4935      	ldr	r1, [pc, #212]	@ (80030a0 <HAL_GPIO_Init+0x304>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80030c0 <HAL_GPIO_Init+0x324>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffa:	4a31      	ldr	r2, [pc, #196]	@ (80030c0 <HAL_GPIO_Init+0x324>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003000:	4b2f      	ldr	r3, [pc, #188]	@ (80030c0 <HAL_GPIO_Init+0x324>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003024:	4a26      	ldr	r2, [pc, #152]	@ (80030c0 <HAL_GPIO_Init+0x324>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302a:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <HAL_GPIO_Init+0x324>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800304e:	4a1c      	ldr	r2, [pc, #112]	@ (80030c0 <HAL_GPIO_Init+0x324>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003054:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_GPIO_Init+0x324>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003078:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <HAL_GPIO_Init+0x324>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b0f      	cmp	r3, #15
 8003088:	f67f ae96 	bls.w	8002db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3724      	adds	r7, #36	@ 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40020400 	.word	0x40020400
 80030ac:	40020800 	.word	0x40020800
 80030b0:	40020c00 	.word	0x40020c00
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40021400 	.word	0x40021400
 80030bc:	40021800 	.word	0x40021800
 80030c0:	40013c00 	.word	0x40013c00

080030c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	807b      	strh	r3, [r7, #2]
 80030d0:	4613      	mov	r3, r2
 80030d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d4:	787b      	ldrb	r3, [r7, #1]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030e0:	e003      	b.n	80030ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030e2:	887b      	ldrh	r3, [r7, #2]
 80030e4:	041a      	lsls	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	619a      	str	r2, [r3, #24]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e12b      	b.n	8003362 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe fa30 	bl	8001584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2224      	movs	r2, #36	@ 0x24
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800314a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800315a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800315c:	f001 fb90 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 8003160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a81      	ldr	r2, [pc, #516]	@ (800336c <HAL_I2C_Init+0x274>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d807      	bhi.n	800317c <HAL_I2C_Init+0x84>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a80      	ldr	r2, [pc, #512]	@ (8003370 <HAL_I2C_Init+0x278>)
 8003170:	4293      	cmp	r3, r2
 8003172:	bf94      	ite	ls
 8003174:	2301      	movls	r3, #1
 8003176:	2300      	movhi	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e006      	b.n	800318a <HAL_I2C_Init+0x92>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a7d      	ldr	r2, [pc, #500]	@ (8003374 <HAL_I2C_Init+0x27c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	bf94      	ite	ls
 8003184:	2301      	movls	r3, #1
 8003186:	2300      	movhi	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0e7      	b.n	8003362 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a78      	ldr	r2, [pc, #480]	@ (8003378 <HAL_I2C_Init+0x280>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0c9b      	lsrs	r3, r3, #18
 800319c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a6a      	ldr	r2, [pc, #424]	@ (800336c <HAL_I2C_Init+0x274>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d802      	bhi.n	80031cc <HAL_I2C_Init+0xd4>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3301      	adds	r3, #1
 80031ca:	e009      	b.n	80031e0 <HAL_I2C_Init+0xe8>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	4a69      	ldr	r2, [pc, #420]	@ (800337c <HAL_I2C_Init+0x284>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	3301      	adds	r3, #1
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	495c      	ldr	r1, [pc, #368]	@ (800336c <HAL_I2C_Init+0x274>)
 80031fc:	428b      	cmp	r3, r1
 80031fe:	d819      	bhi.n	8003234 <HAL_I2C_Init+0x13c>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e59      	subs	r1, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fbb1 f3f3 	udiv	r3, r1, r3
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003214:	400b      	ands	r3, r1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_I2C_Init+0x138>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1e59      	subs	r1, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	fbb1 f3f3 	udiv	r3, r1, r3
 8003228:	3301      	adds	r3, #1
 800322a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322e:	e051      	b.n	80032d4 <HAL_I2C_Init+0x1dc>
 8003230:	2304      	movs	r3, #4
 8003232:	e04f      	b.n	80032d4 <HAL_I2C_Init+0x1dc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d111      	bne.n	8003260 <HAL_I2C_Init+0x168>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	e012      	b.n	8003286 <HAL_I2C_Init+0x18e>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e58      	subs	r0, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	0099      	lsls	r1, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	fbb0 f3f3 	udiv	r3, r0, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Init+0x196>
 800328a:	2301      	movs	r3, #1
 800328c:	e022      	b.n	80032d4 <HAL_I2C_Init+0x1dc>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10e      	bne.n	80032b4 <HAL_I2C_Init+0x1bc>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1e58      	subs	r0, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	440b      	add	r3, r1
 80032a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032b2:	e00f      	b.n	80032d4 <HAL_I2C_Init+0x1dc>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1e58      	subs	r0, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	0099      	lsls	r1, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	6809      	ldr	r1, [r1, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003302:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6911      	ldr	r1, [r2, #16]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68d2      	ldr	r2, [r2, #12]
 800330e:	4311      	orrs	r1, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	430b      	orrs	r3, r1
 8003316:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	000186a0 	.word	0x000186a0
 8003370:	001e847f 	.word	0x001e847f
 8003374:	003d08ff 	.word	0x003d08ff
 8003378:	431bde83 	.word	0x431bde83
 800337c:	10624dd3 	.word	0x10624dd3

08003380 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	461a      	mov	r2, r3
 800338c:	460b      	mov	r3, r1
 800338e:	817b      	strh	r3, [r7, #10]
 8003390:	4613      	mov	r3, r2
 8003392:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003394:	f7ff fbec 	bl	8002b70 <HAL_GetTick>
 8003398:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	f040 80e0 	bne.w	8003568 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	2319      	movs	r3, #25
 80033ae:	2201      	movs	r2, #1
 80033b0:	4970      	ldr	r1, [pc, #448]	@ (8003574 <HAL_I2C_Master_Transmit+0x1f4>)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 ff3c 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
 80033c0:	e0d3      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_I2C_Master_Transmit+0x50>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e0cc      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d007      	beq.n	80033f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003404:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2221      	movs	r2, #33	@ 0x21
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2210      	movs	r2, #16
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	893a      	ldrh	r2, [r7, #8]
 8003426:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a50      	ldr	r2, [pc, #320]	@ (8003578 <HAL_I2C_Master_Transmit+0x1f8>)
 8003436:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003438:	8979      	ldrh	r1, [r7, #10]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fcf6 	bl	8003e30 <I2C_MasterRequestWrite>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e08d      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003464:	e066      	b.n	8003534 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	6a39      	ldr	r1, [r7, #32]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fffa 	bl	8004464 <I2C_WaitOnTXEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	2b04      	cmp	r3, #4
 800347c:	d107      	bne.n	800348e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11b      	bne.n	8003508 <HAL_I2C_Master_Transmit+0x188>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d017      	beq.n	8003508 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	6a39      	ldr	r1, [r7, #32]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fff1 	bl	80044f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00d      	beq.n	8003534 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	2b04      	cmp	r3, #4
 800351e:	d107      	bne.n	8003530 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800352e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e01a      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	d194      	bne.n	8003466 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	00100002 	.word	0x00100002
 8003578:	ffff0000 	.word	0xffff0000

0800357c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	4608      	mov	r0, r1
 8003586:	4611      	mov	r1, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4603      	mov	r3, r0
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	460b      	mov	r3, r1
 8003590:	813b      	strh	r3, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003596:	f7ff faeb 	bl	8002b70 <HAL_GetTick>
 800359a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	f040 80d9 	bne.w	800375c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2319      	movs	r3, #25
 80035b0:	2201      	movs	r2, #1
 80035b2:	496d      	ldr	r1, [pc, #436]	@ (8003768 <HAL_I2C_Mem_Write+0x1ec>)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fe3b 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	e0cc      	b.n	800375e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_Mem_Write+0x56>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0c5      	b.n	800375e <HAL_I2C_Mem_Write+0x1e2>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d007      	beq.n	80035f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2221      	movs	r2, #33	@ 0x21
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2240      	movs	r2, #64	@ 0x40
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a3a      	ldr	r2, [r7, #32]
 8003622:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003628:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a4d      	ldr	r2, [pc, #308]	@ (800376c <HAL_I2C_Mem_Write+0x1f0>)
 8003638:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800363a:	88f8      	ldrh	r0, [r7, #6]
 800363c:	893a      	ldrh	r2, [r7, #8]
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4603      	mov	r3, r0
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fc72 	bl	8003f34 <I2C_RequestMemoryWrite>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d052      	beq.n	80036fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e081      	b.n	800375e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 ff00 	bl	8004464 <I2C_WaitOnTXEFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00d      	beq.n	8003686 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	2b04      	cmp	r3, #4
 8003670:	d107      	bne.n	8003682 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003680:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e06b      	b.n	800375e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	781a      	ldrb	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d11b      	bne.n	80036fc <HAL_I2C_Mem_Write+0x180>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d017      	beq.n	80036fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1aa      	bne.n	800365a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fef3 	bl	80044f4 <I2C_WaitOnBTFFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	2b04      	cmp	r3, #4
 800371a:	d107      	bne.n	800372c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e016      	b.n	800375e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	00100002 	.word	0x00100002
 800376c:	ffff0000 	.word	0xffff0000

08003770 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08c      	sub	sp, #48	@ 0x30
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	817b      	strh	r3, [r7, #10]
 8003782:	460b      	mov	r3, r1
 8003784:	813b      	strh	r3, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800378a:	f7ff f9f1 	bl	8002b70 <HAL_GetTick>
 800378e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b20      	cmp	r3, #32
 800379a:	f040 8214 	bne.w	8003bc6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2319      	movs	r3, #25
 80037a4:	2201      	movs	r2, #1
 80037a6:	497b      	ldr	r1, [pc, #492]	@ (8003994 <HAL_I2C_Mem_Read+0x224>)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fd41 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037b4:	2302      	movs	r3, #2
 80037b6:	e207      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_I2C_Mem_Read+0x56>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e200      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x458>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d007      	beq.n	80037ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2222      	movs	r2, #34	@ 0x22
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2240      	movs	r2, #64	@ 0x40
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003816:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4a5b      	ldr	r2, [pc, #364]	@ (8003998 <HAL_I2C_Mem_Read+0x228>)
 800382c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800382e:	88f8      	ldrh	r0, [r7, #6]
 8003830:	893a      	ldrh	r2, [r7, #8]
 8003832:	8979      	ldrh	r1, [r7, #10]
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	4603      	mov	r3, r0
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fc0e 	bl	8004060 <I2C_RequestMemoryRead>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e1bc      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d113      	bne.n	800387e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	623b      	str	r3, [r7, #32]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	623b      	str	r3, [r7, #32]
 800386a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e190      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003882:	2b01      	cmp	r3, #1
 8003884:	d11b      	bne.n	80038be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003894:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e170      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d11b      	bne.n	80038fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	e150      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003914:	e144      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	2b03      	cmp	r3, #3
 800391c:	f200 80f1 	bhi.w	8003b02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003924:	2b01      	cmp	r3, #1
 8003926:	d123      	bne.n	8003970 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fe29 	bl	8004584 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e145      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800396e:	e117      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003974:	2b02      	cmp	r3, #2
 8003976:	d14e      	bne.n	8003a16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397e:	2200      	movs	r2, #0
 8003980:	4906      	ldr	r1, [pc, #24]	@ (800399c <HAL_I2C_Mem_Read+0x22c>)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fc54 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e11a      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x458>
 8003992:	bf00      	nop
 8003994:	00100002 	.word	0x00100002
 8003998:	ffff0000 	.word	0xffff0000
 800399c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a14:	e0c4      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	496c      	ldr	r1, [pc, #432]	@ (8003bd0 <HAL_I2C_Mem_Read+0x460>)
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fc05 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0cb      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4955      	ldr	r1, [pc, #340]	@ (8003bd0 <HAL_I2C_Mem_Read+0x460>)
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fbd7 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e09d      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b00:	e04e      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fd3c 	bl	8004584 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e058      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d124      	bne.n	8003ba0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d107      	bne.n	8003b6e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b6c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f aeb6 	bne.w	8003916 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
  }
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3728      	adds	r7, #40	@ 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	00010004 	.word	0x00010004

08003bd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	@ 0x28
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	460b      	mov	r3, r1
 8003be2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003be4:	f7fe ffc4 	bl	8002b70 <HAL_GetTick>
 8003be8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	f040 8111 	bne.w	8003e1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2319      	movs	r3, #25
 8003c02:	2201      	movs	r2, #1
 8003c04:	4988      	ldr	r1, [pc, #544]	@ (8003e28 <HAL_I2C_IsDeviceReady+0x254>)
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fb12 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
 8003c14:	e104      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_I2C_IsDeviceReady+0x50>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0fd      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d007      	beq.n	8003c4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2224      	movs	r2, #36	@ 0x24
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a70      	ldr	r2, [pc, #448]	@ (8003e2c <HAL_I2C_IsDeviceReady+0x258>)
 8003c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fad0 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ca4:	d103      	bne.n	8003cae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0b6      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cb2:	897b      	ldrh	r3, [r7, #10]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cc0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cc2:	f7fe ff55 	bl	8002b70 <HAL_GetTick>
 8003cc6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cf6:	e025      	b.n	8003d44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cf8:	f7fe ff3a 	bl	8002b70 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d302      	bcc.n	8003d0e <HAL_I2C_IsDeviceReady+0x13a>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	22a0      	movs	r2, #160	@ 0xa0
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d4e:	d005      	beq.n	8003d5c <HAL_I2C_IsDeviceReady+0x188>
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <HAL_I2C_IsDeviceReady+0x188>
 8003d56:	7dbb      	ldrb	r3, [r7, #22]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0cd      	beq.n	8003cf8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d129      	bne.n	8003dc6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2319      	movs	r3, #25
 8003d9e:	2201      	movs	r2, #1
 8003da0:	4921      	ldr	r1, [pc, #132]	@ (8003e28 <HAL_I2C_IsDeviceReady+0x254>)
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fa44 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e036      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e02c      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dde:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	2319      	movs	r3, #25
 8003de6:	2201      	movs	r2, #1
 8003de8:	490f      	ldr	r1, [pc, #60]	@ (8003e28 <HAL_I2C_IsDeviceReady+0x254>)
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fa20 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e012      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	f4ff af32 	bcc.w	8003c6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
  }
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	00100002 	.word	0x00100002
 8003e2c:	ffff0000 	.word	0xffff0000

08003e30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d006      	beq.n	8003e5a <I2C_MasterRequestWrite+0x2a>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d003      	beq.n	8003e5a <I2C_MasterRequestWrite+0x2a>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e58:	d108      	bne.n	8003e6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e00b      	b.n	8003e84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	2b12      	cmp	r3, #18
 8003e72:	d107      	bne.n	8003e84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f9cd 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eaa:	d103      	bne.n	8003eb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e035      	b.n	8003f24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec0:	d108      	bne.n	8003ed4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec2:	897b      	ldrh	r3, [r7, #10]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	e01b      	b.n	8003f0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ed4:	897b      	ldrh	r3, [r7, #10]
 8003ed6:	11db      	asrs	r3, r3, #7
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0306 	and.w	r3, r3, #6
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f063 030f 	orn	r3, r3, #15
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	490e      	ldr	r1, [pc, #56]	@ (8003f2c <I2C_MasterRequestWrite+0xfc>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fa16 	bl	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e010      	b.n	8003f24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f02:	897b      	ldrh	r3, [r7, #10]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4907      	ldr	r1, [pc, #28]	@ (8003f30 <I2C_MasterRequestWrite+0x100>)
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa06 	bl	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	00010008 	.word	0x00010008
 8003f30:	00010002 	.word	0x00010002

08003f34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	817b      	strh	r3, [r7, #10]
 8003f46:	460b      	mov	r3, r1
 8003f48:	813b      	strh	r3, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f960 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f84:	d103      	bne.n	8003f8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e05f      	b.n	8004052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	492d      	ldr	r1, [pc, #180]	@ (800405c <I2C_RequestMemoryWrite+0x128>)
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f9bb 	bl	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e04c      	b.n	8004052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd0:	6a39      	ldr	r1, [r7, #32]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fa46 	bl	8004464 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e02b      	b.n	8004052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e021      	b.n	8004050 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b29b      	uxth	r3, r3
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401c:	6a39      	ldr	r1, [r7, #32]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fa20 	bl	8004464 <I2C_WaitOnTXEFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	2b04      	cmp	r3, #4
 8004030:	d107      	bne.n	8004042 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004040:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e005      	b.n	8004052 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004046:	893b      	ldrh	r3, [r7, #8]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	00010002 	.word	0x00010002

08004060 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	460b      	mov	r3, r1
 8004074:	813b      	strh	r3, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004088:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004098:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f8c2 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00d      	beq.n	80040ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c0:	d103      	bne.n	80040ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e0aa      	b.n	8004224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	4952      	ldr	r1, [pc, #328]	@ (800422c <I2C_RequestMemoryRead+0x1cc>)
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f91d 	bl	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e097      	b.n	8004224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800410a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410c:	6a39      	ldr	r1, [r7, #32]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f9a8 	bl	8004464 <I2C_WaitOnTXEFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	2b04      	cmp	r3, #4
 8004120:	d107      	bne.n	8004132 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004130:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e076      	b.n	8004224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]
 8004146:	e021      	b.n	800418c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004148:	893b      	ldrh	r3, [r7, #8]
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	b29b      	uxth	r3, r3
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004158:	6a39      	ldr	r1, [r7, #32]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f982 	bl	8004464 <I2C_WaitOnTXEFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	2b04      	cmp	r3, #4
 800416c:	d107      	bne.n	800417e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e050      	b.n	8004224 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004182:	893b      	ldrh	r3, [r7, #8]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800418c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418e:	6a39      	ldr	r1, [r7, #32]
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f967 	bl	8004464 <I2C_WaitOnTXEFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00d      	beq.n	80041b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d107      	bne.n	80041b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e035      	b.n	8004224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f82b 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ee:	d103      	bne.n	80041f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e013      	b.n	8004224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041fc:	897b      	ldrh	r3, [r7, #10]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	6a3a      	ldr	r2, [r7, #32]
 8004210:	4906      	ldr	r1, [pc, #24]	@ (800422c <I2C_RequestMemoryRead+0x1cc>)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f886 	bl	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	00010002 	.word	0x00010002

08004230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004240:	e048      	b.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d044      	beq.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fe fc91 	bl	8002b70 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d139      	bne.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	0c1b      	lsrs	r3, r3, #16
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	d10d      	bne.n	8004286 <I2C_WaitOnFlagUntilTimeout+0x56>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	43da      	mvns	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4013      	ands	r3, r2
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	e00c      	b.n	80042a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	43da      	mvns	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d116      	bne.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	f043 0220 	orr.w	r2, r3, #32
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e023      	b.n	800431c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d10d      	bne.n	80042fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	43da      	mvns	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	e00c      	b.n	8004314 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	43da      	mvns	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4013      	ands	r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	429a      	cmp	r2, r3
 8004318:	d093      	beq.n	8004242 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004332:	e071      	b.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004342:	d123      	bne.n	800438c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004352:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800435c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	f043 0204 	orr.w	r2, r3, #4
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e067      	b.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d041      	beq.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fe fbec 	bl	8002b70 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d136      	bne.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d10c      	bne.n	80043ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	43da      	mvns	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bf14      	ite	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	2300      	moveq	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	e00b      	b.n	80043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	43da      	mvns	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e021      	b.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d10c      	bne.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	43da      	mvns	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e00b      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	f47f af6d 	bne.w	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004470:	e034      	b.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f8e3 	bl	800463e <I2C_IsAcknowledgeFailed>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e034      	b.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d028      	beq.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448a:	f7fe fb71 	bl	8002b70 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	d302      	bcc.n	80044a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11d      	bne.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044aa:	2b80      	cmp	r3, #128	@ 0x80
 80044ac:	d016      	beq.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e007      	b.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e6:	2b80      	cmp	r3, #128	@ 0x80
 80044e8:	d1c3      	bne.n	8004472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004500:	e034      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f89b 	bl	800463e <I2C_IsAcknowledgeFailed>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e034      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d028      	beq.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fe fb29 	bl	8002b70 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11d      	bne.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b04      	cmp	r3, #4
 800453c:	d016      	beq.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b04      	cmp	r3, #4
 8004578:	d1c3      	bne.n	8004502 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004590:	e049      	b.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b10      	cmp	r3, #16
 800459e:	d119      	bne.n	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0210 	mvn.w	r2, #16
 80045a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e030      	b.n	8004636 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d4:	f7fe facc 	bl	8002b70 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11d      	bne.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b40      	cmp	r3, #64	@ 0x40
 80045f6:	d016      	beq.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	f043 0220 	orr.w	r2, r3, #32
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e007      	b.n	8004636 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004630:	2b40      	cmp	r3, #64	@ 0x40
 8004632:	d1ae      	bne.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004654:	d11b      	bne.n	800468e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800465e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f043 0204 	orr.w	r2, r3, #4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0cc      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b0:	4b68      	ldr	r3, [pc, #416]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d90c      	bls.n	80046d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b65      	ldr	r3, [pc, #404]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b63      	ldr	r3, [pc, #396]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0b8      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f0:	4b59      	ldr	r3, [pc, #356]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a58      	ldr	r2, [pc, #352]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004708:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a52      	ldr	r2, [pc, #328]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b50      	ldr	r3, [pc, #320]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	494d      	ldr	r1, [pc, #308]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d044      	beq.n	80047bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4b47      	ldr	r3, [pc, #284]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d119      	bne.n	800477a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07f      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d003      	beq.n	800475a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004756:	2b03      	cmp	r3, #3
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475a:	4b3f      	ldr	r3, [pc, #252]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e06f      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476a:	4b3b      	ldr	r3, [pc, #236]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e067      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477a:	4b37      	ldr	r3, [pc, #220]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4934      	ldr	r1, [pc, #208]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800478c:	f7fe f9f0 	bl	8002b70 <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	e00a      	b.n	80047aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004794:	f7fe f9ec 	bl	8002b70 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e04f      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 020c 	and.w	r2, r3, #12
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d1eb      	bne.n	8004794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047bc:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d20c      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b22      	ldr	r3, [pc, #136]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e032      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f0:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4916      	ldr	r1, [pc, #88]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800480e:	4b12      	ldr	r3, [pc, #72]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	490e      	ldr	r1, [pc, #56]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004822:	f000 f841 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004826:	4602      	mov	r2, r0
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	490a      	ldr	r1, [pc, #40]	@ (800485c <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	4a09      	ldr	r2, [pc, #36]	@ (8004860 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800483e:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe f950 	bl	8002ae8 <HAL_InitTick>

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023c00 	.word	0x40023c00
 8004858:	40023800 	.word	0x40023800
 800485c:	08009efc 	.word	0x08009efc
 8004860:	20000014 	.word	0x20000014
 8004864:	20000020 	.word	0x20000020

08004868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800486c:	4b03      	ldr	r3, [pc, #12]	@ (800487c <HAL_RCC_GetHCLKFreq+0x14>)
 800486e:	681b      	ldr	r3, [r3, #0]
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000014 	.word	0x20000014

08004880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004884:	f7ff fff0 	bl	8004868 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	0a9b      	lsrs	r3, r3, #10
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	@ (80048a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	08009f0c 	.word	0x08009f0c

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ac:	b0ae      	sub	sp, #184	@ 0xb8
 80048ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ce:	4bcb      	ldr	r3, [pc, #812]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x354>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	f200 8206 	bhi.w	8004ce8 <HAL_RCC_GetSysClockFreq+0x440>
 80048dc:	a201      	add	r2, pc, #4	@ (adr r2, 80048e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004919 	.word	0x08004919
 80048e8:	08004ce9 	.word	0x08004ce9
 80048ec:	08004ce9 	.word	0x08004ce9
 80048f0:	08004ce9 	.word	0x08004ce9
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004ce9 	.word	0x08004ce9
 80048fc:	08004ce9 	.word	0x08004ce9
 8004900:	08004ce9 	.word	0x08004ce9
 8004904:	08004929 	.word	0x08004929
 8004908:	08004ce9 	.word	0x08004ce9
 800490c:	08004ce9 	.word	0x08004ce9
 8004910:	08004ce9 	.word	0x08004ce9
 8004914:	08004b19 	.word	0x08004b19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4bb9      	ldr	r3, [pc, #740]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x358>)
 800491a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800491e:	e1e7      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004920:	4bb8      	ldr	r3, [pc, #736]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004926:	e1e3      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004928:	4bb4      	ldr	r3, [pc, #720]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x354>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004934:	4bb1      	ldr	r3, [pc, #708]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d071      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004940:	4bae      	ldr	r3, [pc, #696]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	099b      	lsrs	r3, r3, #6
 8004946:	2200      	movs	r2, #0
 8004948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800494c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004958:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800495c:	2300      	movs	r3, #0
 800495e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004966:	4622      	mov	r2, r4
 8004968:	462b      	mov	r3, r5
 800496a:	f04f 0000 	mov.w	r0, #0
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	0159      	lsls	r1, r3, #5
 8004974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004978:	0150      	lsls	r0, r2, #5
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4621      	mov	r1, r4
 8004980:	1a51      	subs	r1, r2, r1
 8004982:	6439      	str	r1, [r7, #64]	@ 0x40
 8004984:	4629      	mov	r1, r5
 8004986:	eb63 0301 	sbc.w	r3, r3, r1
 800498a:	647b      	str	r3, [r7, #68]	@ 0x44
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004998:	4649      	mov	r1, r9
 800499a:	018b      	lsls	r3, r1, #6
 800499c:	4641      	mov	r1, r8
 800499e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049a2:	4641      	mov	r1, r8
 80049a4:	018a      	lsls	r2, r1, #6
 80049a6:	4641      	mov	r1, r8
 80049a8:	1a51      	subs	r1, r2, r1
 80049aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049ac:	4649      	mov	r1, r9
 80049ae:	eb63 0301 	sbc.w	r3, r3, r1
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80049c0:	4649      	mov	r1, r9
 80049c2:	00cb      	lsls	r3, r1, #3
 80049c4:	4641      	mov	r1, r8
 80049c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ca:	4641      	mov	r1, r8
 80049cc:	00ca      	lsls	r2, r1, #3
 80049ce:	4610      	mov	r0, r2
 80049d0:	4619      	mov	r1, r3
 80049d2:	4603      	mov	r3, r0
 80049d4:	4622      	mov	r2, r4
 80049d6:	189b      	adds	r3, r3, r2
 80049d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049da:	462b      	mov	r3, r5
 80049dc:	460a      	mov	r2, r1
 80049de:	eb42 0303 	adc.w	r3, r2, r3
 80049e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049f0:	4629      	mov	r1, r5
 80049f2:	024b      	lsls	r3, r1, #9
 80049f4:	4621      	mov	r1, r4
 80049f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049fa:	4621      	mov	r1, r4
 80049fc:	024a      	lsls	r2, r1, #9
 80049fe:	4610      	mov	r0, r2
 8004a00:	4619      	mov	r1, r3
 8004a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004a14:	f7fc f9a8 	bl	8000d68 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a22:	e067      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a24:	4b75      	ldr	r3, [pc, #468]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a3e:	2300      	movs	r3, #0
 8004a40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004a46:	4622      	mov	r2, r4
 8004a48:	462b      	mov	r3, r5
 8004a4a:	f04f 0000 	mov.w	r0, #0
 8004a4e:	f04f 0100 	mov.w	r1, #0
 8004a52:	0159      	lsls	r1, r3, #5
 8004a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a58:	0150      	lsls	r0, r2, #5
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4621      	mov	r1, r4
 8004a60:	1a51      	subs	r1, r2, r1
 8004a62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a64:	4629      	mov	r1, r5
 8004a66:	eb63 0301 	sbc.w	r3, r3, r1
 8004a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004a78:	4649      	mov	r1, r9
 8004a7a:	018b      	lsls	r3, r1, #6
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a82:	4641      	mov	r1, r8
 8004a84:	018a      	lsls	r2, r1, #6
 8004a86:	4641      	mov	r1, r8
 8004a88:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa6:	4692      	mov	sl, r2
 8004aa8:	469b      	mov	fp, r3
 8004aaa:	4623      	mov	r3, r4
 8004aac:	eb1a 0303 	adds.w	r3, sl, r3
 8004ab0:	623b      	str	r3, [r7, #32]
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	028b      	lsls	r3, r1, #10
 8004aca:	4621      	mov	r1, r4
 8004acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	028a      	lsls	r2, r1, #10
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004adc:	2200      	movs	r2, #0
 8004ade:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ae0:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004ae6:	f7fc f93f 	bl	8000d68 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4613      	mov	r3, r2
 8004af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004af4:	4b41      	ldr	r3, [pc, #260]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b16:	e0eb      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b18:	4b38      	ldr	r3, [pc, #224]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b24:	4b35      	ldr	r3, [pc, #212]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d06b      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b30:	4b32      	ldr	r3, [pc, #200]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	2200      	movs	r2, #0
 8004b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b44:	2300      	movs	r3, #0
 8004b46:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004b4c:	4622      	mov	r2, r4
 8004b4e:	462b      	mov	r3, r5
 8004b50:	f04f 0000 	mov.w	r0, #0
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	0159      	lsls	r1, r3, #5
 8004b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5e:	0150      	lsls	r0, r2, #5
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4621      	mov	r1, r4
 8004b66:	1a51      	subs	r1, r2, r1
 8004b68:	61b9      	str	r1, [r7, #24]
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004b7e:	4659      	mov	r1, fp
 8004b80:	018b      	lsls	r3, r1, #6
 8004b82:	4651      	mov	r1, sl
 8004b84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b88:	4651      	mov	r1, sl
 8004b8a:	018a      	lsls	r2, r1, #6
 8004b8c:	4651      	mov	r1, sl
 8004b8e:	ebb2 0801 	subs.w	r8, r2, r1
 8004b92:	4659      	mov	r1, fp
 8004b94:	eb63 0901 	sbc.w	r9, r3, r1
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ba4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ba8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bac:	4690      	mov	r8, r2
 8004bae:	4699      	mov	r9, r3
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	eb18 0303 	adds.w	r3, r8, r3
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	462b      	mov	r3, r5
 8004bba:	eb49 0303 	adc.w	r3, r9, r3
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004bcc:	4629      	mov	r1, r5
 8004bce:	024b      	lsls	r3, r1, #9
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	024a      	lsls	r2, r1, #9
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004be2:	2200      	movs	r2, #0
 8004be4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004be6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004be8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bec:	f7fc f8bc 	bl	8000d68 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bfa:	e065      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x420>
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	00f42400 	.word	0x00f42400
 8004c04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c08:	4b3d      	ldr	r3, [pc, #244]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	099b      	lsrs	r3, r3, #6
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	4611      	mov	r1, r2
 8004c14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004c22:	4642      	mov	r2, r8
 8004c24:	464b      	mov	r3, r9
 8004c26:	f04f 0000 	mov.w	r0, #0
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	0159      	lsls	r1, r3, #5
 8004c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c34:	0150      	lsls	r0, r2, #5
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	1a51      	subs	r1, r2, r1
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	4649      	mov	r1, r9
 8004c42:	eb63 0301 	sbc.w	r3, r3, r1
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004c54:	4659      	mov	r1, fp
 8004c56:	018b      	lsls	r3, r1, #6
 8004c58:	4651      	mov	r1, sl
 8004c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c5e:	4651      	mov	r1, sl
 8004c60:	018a      	lsls	r2, r1, #6
 8004c62:	4651      	mov	r1, sl
 8004c64:	1a54      	subs	r4, r2, r1
 8004c66:	4659      	mov	r1, fp
 8004c68:	eb63 0501 	sbc.w	r5, r3, r1
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	00eb      	lsls	r3, r5, #3
 8004c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c7a:	00e2      	lsls	r2, r4, #3
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	461d      	mov	r5, r3
 8004c80:	4643      	mov	r3, r8
 8004c82:	18e3      	adds	r3, r4, r3
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	464b      	mov	r3, r9
 8004c88:	eb45 0303 	adc.w	r3, r5, r3
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	028b      	lsls	r3, r1, #10
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	028a      	lsls	r2, r1, #10
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4619      	mov	r1, r3
 8004cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cba:	f7fc f855 	bl	8000d68 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	0f1b      	lsrs	r3, r3, #28
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ce6:	e003      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	37b8      	adds	r7, #184	@ 0xb8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfe:	bf00      	nop
 8004d00:	40023800 	.word	0x40023800
 8004d04:	00f42400 	.word	0x00f42400

08004d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e28d      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8083 	beq.w	8004e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d28:	4b94      	ldr	r3, [pc, #592]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d019      	beq.n	8004d68 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d34:	4b91      	ldr	r3, [pc, #580]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d40:	4b8e      	ldr	r3, [pc, #568]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d4c:	d00c      	beq.n	8004d68 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d112      	bne.n	8004d80 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d5a:	4b88      	ldr	r3, [pc, #544]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d66:	d10b      	bne.n	8004d80 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	4b84      	ldr	r3, [pc, #528]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05b      	beq.n	8004e2c <HAL_RCC_OscConfig+0x124>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d157      	bne.n	8004e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e25a      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d88:	d106      	bne.n	8004d98 <HAL_RCC_OscConfig+0x90>
 8004d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e01d      	b.n	8004dd4 <HAL_RCC_OscConfig+0xcc>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0xb4>
 8004da2:	4b76      	ldr	r3, [pc, #472]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a75      	ldr	r2, [pc, #468]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b73      	ldr	r3, [pc, #460]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a72      	ldr	r2, [pc, #456]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_OscConfig+0xcc>
 8004dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d013      	beq.n	8004e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fd fec8 	bl	8002b70 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de4:	f7fd fec4 	bl	8002b70 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b64      	cmp	r3, #100	@ 0x64
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e21f      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	4b61      	ldr	r3, [pc, #388]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0xdc>
 8004e02:	e014      	b.n	8004e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fd feb4 	bl	8002b70 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7fd feb0 	bl	8002b70 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	@ 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e20b      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1e:	4b57      	ldr	r3, [pc, #348]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x104>
 8004e2a:	e000      	b.n	8004e2e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d06f      	beq.n	8004f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e3a:	4b50      	ldr	r3, [pc, #320]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d017      	beq.n	8004e76 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e46:	4b4d      	ldr	r3, [pc, #308]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d105      	bne.n	8004e5e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e52:	4b4a      	ldr	r3, [pc, #296]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e5e:	4b47      	ldr	r3, [pc, #284]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	d11c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6a:	4b44      	ldr	r3, [pc, #272]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d116      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	4b41      	ldr	r3, [pc, #260]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_RCC_OscConfig+0x186>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d001      	beq.n	8004e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e1d3      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	4937      	ldr	r1, [pc, #220]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea2:	e03a      	b.n	8004f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eac:	4b34      	ldr	r3, [pc, #208]	@ (8004f80 <HAL_RCC_OscConfig+0x278>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fd fe5d 	bl	8002b70 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eba:	f7fd fe59 	bl	8002b70 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e1b4      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed8:	4b28      	ldr	r3, [pc, #160]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4925      	ldr	r1, [pc, #148]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]
 8004eec:	e015      	b.n	8004f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eee:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <HAL_RCC_OscConfig+0x278>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fd fe3c 	bl	8002b70 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004efc:	f7fd fe38 	bl	8002b70 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e193      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d036      	beq.n	8004f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2e:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fd fe1c 	bl	8002b70 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7fd fe18 	bl	8002b70 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e173      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x234>
 8004f5a:	e01b      	b.n	8004f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f62:	f7fd fe05 	bl	8002b70 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f68:	e00e      	b.n	8004f88 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6a:	f7fd fe01 	bl	8002b70 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d907      	bls.n	8004f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e15c      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	42470000 	.word	0x42470000
 8004f84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	4b8a      	ldr	r3, [pc, #552]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ea      	bne.n	8004f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8097 	beq.w	80050d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa6:	4b83      	ldr	r3, [pc, #524]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	4a7e      	ldr	r2, [pc, #504]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd2:	4b79      	ldr	r3, [pc, #484]	@ (80051b8 <HAL_RCC_OscConfig+0x4b0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d118      	bne.n	8005010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fde:	4b76      	ldr	r3, [pc, #472]	@ (80051b8 <HAL_RCC_OscConfig+0x4b0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a75      	ldr	r2, [pc, #468]	@ (80051b8 <HAL_RCC_OscConfig+0x4b0>)
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fea:	f7fd fdc1 	bl	8002b70 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff2:	f7fd fdbd 	bl	8002b70 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e118      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005004:	4b6c      	ldr	r3, [pc, #432]	@ (80051b8 <HAL_RCC_OscConfig+0x4b0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d106      	bne.n	8005026 <HAL_RCC_OscConfig+0x31e>
 8005018:	4b66      	ldr	r3, [pc, #408]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501c:	4a65      	ldr	r2, [pc, #404]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	6713      	str	r3, [r2, #112]	@ 0x70
 8005024:	e01c      	b.n	8005060 <HAL_RCC_OscConfig+0x358>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b05      	cmp	r3, #5
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0x340>
 800502e:	4b61      	ldr	r3, [pc, #388]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	4a60      	ldr	r2, [pc, #384]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8005034:	f043 0304 	orr.w	r3, r3, #4
 8005038:	6713      	str	r3, [r2, #112]	@ 0x70
 800503a:	4b5e      	ldr	r3, [pc, #376]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	4a5d      	ldr	r2, [pc, #372]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6713      	str	r3, [r2, #112]	@ 0x70
 8005046:	e00b      	b.n	8005060 <HAL_RCC_OscConfig+0x358>
 8005048:	4b5a      	ldr	r3, [pc, #360]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504c:	4a59      	ldr	r2, [pc, #356]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	6713      	str	r3, [r2, #112]	@ 0x70
 8005054:	4b57      	ldr	r3, [pc, #348]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005058:	4a56      	ldr	r2, [pc, #344]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 800505a:	f023 0304 	bic.w	r3, r3, #4
 800505e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d015      	beq.n	8005094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fd fd82 	bl	8002b70 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fd fd7e 	bl	8002b70 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0d7      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005086:	4b4b      	ldr	r3, [pc, #300]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0ee      	beq.n	8005070 <HAL_RCC_OscConfig+0x368>
 8005092:	e014      	b.n	80050be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fd fd6c 	bl	8002b70 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fd fd68 	bl	8002b70 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0c1      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b2:	4b40      	ldr	r3, [pc, #256]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ee      	bne.n	800509c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d105      	bne.n	80050d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c4:	4b3b      	ldr	r3, [pc, #236]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 80050c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c8:	4a3a      	ldr	r2, [pc, #232]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 80050ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80ad 	beq.w	8005234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050da:	4b36      	ldr	r3, [pc, #216]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d060      	beq.n	80051a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d145      	bne.n	800517a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ee:	4b33      	ldr	r3, [pc, #204]	@ (80051bc <HAL_RCC_OscConfig+0x4b4>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fd fd3c 	bl	8002b70 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fd fd38 	bl	8002b70 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e093      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510e:	4b29      	ldr	r3, [pc, #164]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	019b      	lsls	r3, r3, #6
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	3b01      	subs	r3, #1
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	071b      	lsls	r3, r3, #28
 8005146:	491b      	ldr	r1, [pc, #108]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800514c:	4b1b      	ldr	r3, [pc, #108]	@ (80051bc <HAL_RCC_OscConfig+0x4b4>)
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005152:	f7fd fd0d 	bl	8002b70 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515a:	f7fd fd09 	bl	8002b70 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e064      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516c:	4b11      	ldr	r3, [pc, #68]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x452>
 8005178:	e05c      	b.n	8005234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517a:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <HAL_RCC_OscConfig+0x4b4>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd fcf6 	bl	8002b70 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005188:	f7fd fcf2 	bl	8002b70 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e04d      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519a:	4b06      	ldr	r3, [pc, #24]	@ (80051b4 <HAL_RCC_OscConfig+0x4ac>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x480>
 80051a6:	e045      	b.n	8005234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e040      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40007000 	.word	0x40007000
 80051bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005240 <HAL_RCC_OscConfig+0x538>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d030      	beq.n	8005230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d129      	bne.n	8005230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d122      	bne.n	8005230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051f0:	4013      	ands	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d119      	bne.n	8005230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	3b01      	subs	r3, #1
 800520a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d10f      	bne.n	8005230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d107      	bne.n	8005230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800

08005244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e041      	b.n	80052da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fc f9d2 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f000 f8f4 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_ConfigClockSource+0x1c>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e0b4      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x186>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800531c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005324:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005336:	d03e      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0xd4>
 8005338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800533c:	f200 8087 	bhi.w	800544e <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005344:	f000 8086 	beq.w	8005454 <HAL_TIM_ConfigClockSource+0x172>
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534c:	d87f      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x16c>
 800534e:	2b70      	cmp	r3, #112	@ 0x70
 8005350:	d01a      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0xa6>
 8005352:	2b70      	cmp	r3, #112	@ 0x70
 8005354:	d87b      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x16c>
 8005356:	2b60      	cmp	r3, #96	@ 0x60
 8005358:	d050      	beq.n	80053fc <HAL_TIM_ConfigClockSource+0x11a>
 800535a:	2b60      	cmp	r3, #96	@ 0x60
 800535c:	d877      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x16c>
 800535e:	2b50      	cmp	r3, #80	@ 0x50
 8005360:	d03c      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0xfa>
 8005362:	2b50      	cmp	r3, #80	@ 0x50
 8005364:	d873      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x16c>
 8005366:	2b40      	cmp	r3, #64	@ 0x40
 8005368:	d058      	beq.n	800541c <HAL_TIM_ConfigClockSource+0x13a>
 800536a:	2b40      	cmp	r3, #64	@ 0x40
 800536c:	d86f      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x16c>
 800536e:	2b30      	cmp	r3, #48	@ 0x30
 8005370:	d064      	beq.n	800543c <HAL_TIM_ConfigClockSource+0x15a>
 8005372:	2b30      	cmp	r3, #48	@ 0x30
 8005374:	d86b      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x16c>
 8005376:	2b20      	cmp	r3, #32
 8005378:	d060      	beq.n	800543c <HAL_TIM_ConfigClockSource+0x15a>
 800537a:	2b20      	cmp	r3, #32
 800537c:	d867      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x16c>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d05c      	beq.n	800543c <HAL_TIM_ConfigClockSource+0x15a>
 8005382:	2b10      	cmp	r3, #16
 8005384:	d05a      	beq.n	800543c <HAL_TIM_ConfigClockSource+0x15a>
 8005386:	e062      	b.n	800544e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005398:	f000 f990 	bl	80056bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	609a      	str	r2, [r3, #8]
      break;
 80053b4:	e04f      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c6:	f000 f979 	bl	80056bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053d8:	609a      	str	r2, [r3, #8]
      break;
 80053da:	e03c      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e8:	461a      	mov	r2, r3
 80053ea:	f000 f8ed 	bl	80055c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2150      	movs	r1, #80	@ 0x50
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f946 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 80053fa:	e02c      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005408:	461a      	mov	r2, r3
 800540a:	f000 f90c 	bl	8005626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2160      	movs	r1, #96	@ 0x60
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f936 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 800541a:	e01c      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005428:	461a      	mov	r2, r3
 800542a:	f000 f8cd 	bl	80055c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2140      	movs	r1, #64	@ 0x40
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f926 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 800543a:	e00c      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f000 f91d 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 800544c:	e003      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
      break;
 8005452:	e000      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005454:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a46      	ldr	r2, [pc, #280]	@ (800559c <TIM_Base_SetConfig+0x12c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800548e:	d00f      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a43      	ldr	r2, [pc, #268]	@ (80055a0 <TIM_Base_SetConfig+0x130>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00b      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a42      	ldr	r2, [pc, #264]	@ (80055a4 <TIM_Base_SetConfig+0x134>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a41      	ldr	r2, [pc, #260]	@ (80055a8 <TIM_Base_SetConfig+0x138>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a40      	ldr	r2, [pc, #256]	@ (80055ac <TIM_Base_SetConfig+0x13c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a35      	ldr	r2, [pc, #212]	@ (800559c <TIM_Base_SetConfig+0x12c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d0:	d027      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a32      	ldr	r2, [pc, #200]	@ (80055a0 <TIM_Base_SetConfig+0x130>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d023      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a31      	ldr	r2, [pc, #196]	@ (80055a4 <TIM_Base_SetConfig+0x134>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01f      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a30      	ldr	r2, [pc, #192]	@ (80055a8 <TIM_Base_SetConfig+0x138>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2f      	ldr	r2, [pc, #188]	@ (80055ac <TIM_Base_SetConfig+0x13c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d017      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2e      	ldr	r2, [pc, #184]	@ (80055b0 <TIM_Base_SetConfig+0x140>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2d      	ldr	r2, [pc, #180]	@ (80055b4 <TIM_Base_SetConfig+0x144>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2c      	ldr	r2, [pc, #176]	@ (80055b8 <TIM_Base_SetConfig+0x148>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2b      	ldr	r2, [pc, #172]	@ (80055bc <TIM_Base_SetConfig+0x14c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2a      	ldr	r2, [pc, #168]	@ (80055c0 <TIM_Base_SetConfig+0x150>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a29      	ldr	r2, [pc, #164]	@ (80055c4 <TIM_Base_SetConfig+0x154>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d108      	bne.n	8005534 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a10      	ldr	r2, [pc, #64]	@ (800559c <TIM_Base_SetConfig+0x12c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0xf8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a12      	ldr	r2, [pc, #72]	@ (80055ac <TIM_Base_SetConfig+0x13c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d103      	bne.n	8005570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b01      	cmp	r3, #1
 8005580:	d105      	bne.n	800558e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]
  }
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40010400 	.word	0x40010400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40014400 	.word	0x40014400
 80055b8:	40014800 	.word	0x40014800
 80055bc:	40001800 	.word	0x40001800
 80055c0:	40001c00 	.word	0x40001c00
 80055c4:	40002000 	.word	0x40002000

080055c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f023 030a 	bic.w	r3, r3, #10
 8005604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	621a      	str	r2, [r3, #32]
}
 800561a:	bf00      	nop
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005626:	b480      	push	{r7}
 8005628:	b087      	sub	sp, #28
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f023 0210 	bic.w	r2, r3, #16
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	031b      	lsls	r3, r3, #12
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005662:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f043 0307 	orr.w	r3, r3, #7
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	431a      	orrs	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	609a      	str	r2, [r3, #8]
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005710:	2302      	movs	r3, #2
 8005712:	e05a      	b.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a21      	ldr	r2, [pc, #132]	@ (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d022      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005760:	d01d      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1d      	ldr	r2, [pc, #116]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d018      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1b      	ldr	r2, [pc, #108]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1a      	ldr	r2, [pc, #104]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00e      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a18      	ldr	r2, [pc, #96]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d009      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a17      	ldr	r2, [pc, #92]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a15      	ldr	r2, [pc, #84]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d10c      	bne.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40010400 	.word	0x40010400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40001800 	.word	0x40001800

080057f4 <__cvt>:
 80057f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	ec57 6b10 	vmov	r6, r7, d0
 80057fc:	2f00      	cmp	r7, #0
 80057fe:	460c      	mov	r4, r1
 8005800:	4619      	mov	r1, r3
 8005802:	463b      	mov	r3, r7
 8005804:	bfbb      	ittet	lt
 8005806:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800580a:	461f      	movlt	r7, r3
 800580c:	2300      	movge	r3, #0
 800580e:	232d      	movlt	r3, #45	@ 0x2d
 8005810:	700b      	strb	r3, [r1, #0]
 8005812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005814:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005818:	4691      	mov	r9, r2
 800581a:	f023 0820 	bic.w	r8, r3, #32
 800581e:	bfbc      	itt	lt
 8005820:	4632      	movlt	r2, r6
 8005822:	4616      	movlt	r6, r2
 8005824:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005828:	d005      	beq.n	8005836 <__cvt+0x42>
 800582a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800582e:	d100      	bne.n	8005832 <__cvt+0x3e>
 8005830:	3401      	adds	r4, #1
 8005832:	2102      	movs	r1, #2
 8005834:	e000      	b.n	8005838 <__cvt+0x44>
 8005836:	2103      	movs	r1, #3
 8005838:	ab03      	add	r3, sp, #12
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	ab02      	add	r3, sp, #8
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	ec47 6b10 	vmov	d0, r6, r7
 8005844:	4653      	mov	r3, sl
 8005846:	4622      	mov	r2, r4
 8005848:	f001 f876 	bl	8006938 <_dtoa_r>
 800584c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005850:	4605      	mov	r5, r0
 8005852:	d119      	bne.n	8005888 <__cvt+0x94>
 8005854:	f019 0f01 	tst.w	r9, #1
 8005858:	d00e      	beq.n	8005878 <__cvt+0x84>
 800585a:	eb00 0904 	add.w	r9, r0, r4
 800585e:	2200      	movs	r2, #0
 8005860:	2300      	movs	r3, #0
 8005862:	4630      	mov	r0, r6
 8005864:	4639      	mov	r1, r7
 8005866:	f7fb f94f 	bl	8000b08 <__aeabi_dcmpeq>
 800586a:	b108      	cbz	r0, 8005870 <__cvt+0x7c>
 800586c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005870:	2230      	movs	r2, #48	@ 0x30
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	454b      	cmp	r3, r9
 8005876:	d31e      	bcc.n	80058b6 <__cvt+0xc2>
 8005878:	9b03      	ldr	r3, [sp, #12]
 800587a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800587c:	1b5b      	subs	r3, r3, r5
 800587e:	4628      	mov	r0, r5
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	b004      	add	sp, #16
 8005884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005888:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800588c:	eb00 0904 	add.w	r9, r0, r4
 8005890:	d1e5      	bne.n	800585e <__cvt+0x6a>
 8005892:	7803      	ldrb	r3, [r0, #0]
 8005894:	2b30      	cmp	r3, #48	@ 0x30
 8005896:	d10a      	bne.n	80058ae <__cvt+0xba>
 8005898:	2200      	movs	r2, #0
 800589a:	2300      	movs	r3, #0
 800589c:	4630      	mov	r0, r6
 800589e:	4639      	mov	r1, r7
 80058a0:	f7fb f932 	bl	8000b08 <__aeabi_dcmpeq>
 80058a4:	b918      	cbnz	r0, 80058ae <__cvt+0xba>
 80058a6:	f1c4 0401 	rsb	r4, r4, #1
 80058aa:	f8ca 4000 	str.w	r4, [sl]
 80058ae:	f8da 3000 	ldr.w	r3, [sl]
 80058b2:	4499      	add	r9, r3
 80058b4:	e7d3      	b.n	800585e <__cvt+0x6a>
 80058b6:	1c59      	adds	r1, r3, #1
 80058b8:	9103      	str	r1, [sp, #12]
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e7d9      	b.n	8005872 <__cvt+0x7e>

080058be <__exponent>:
 80058be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058c0:	2900      	cmp	r1, #0
 80058c2:	bfba      	itte	lt
 80058c4:	4249      	neglt	r1, r1
 80058c6:	232d      	movlt	r3, #45	@ 0x2d
 80058c8:	232b      	movge	r3, #43	@ 0x2b
 80058ca:	2909      	cmp	r1, #9
 80058cc:	7002      	strb	r2, [r0, #0]
 80058ce:	7043      	strb	r3, [r0, #1]
 80058d0:	dd29      	ble.n	8005926 <__exponent+0x68>
 80058d2:	f10d 0307 	add.w	r3, sp, #7
 80058d6:	461d      	mov	r5, r3
 80058d8:	270a      	movs	r7, #10
 80058da:	461a      	mov	r2, r3
 80058dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80058e0:	fb07 1416 	mls	r4, r7, r6, r1
 80058e4:	3430      	adds	r4, #48	@ 0x30
 80058e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058ea:	460c      	mov	r4, r1
 80058ec:	2c63      	cmp	r4, #99	@ 0x63
 80058ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80058f2:	4631      	mov	r1, r6
 80058f4:	dcf1      	bgt.n	80058da <__exponent+0x1c>
 80058f6:	3130      	adds	r1, #48	@ 0x30
 80058f8:	1e94      	subs	r4, r2, #2
 80058fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058fe:	1c41      	adds	r1, r0, #1
 8005900:	4623      	mov	r3, r4
 8005902:	42ab      	cmp	r3, r5
 8005904:	d30a      	bcc.n	800591c <__exponent+0x5e>
 8005906:	f10d 0309 	add.w	r3, sp, #9
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	42ac      	cmp	r4, r5
 800590e:	bf88      	it	hi
 8005910:	2300      	movhi	r3, #0
 8005912:	3302      	adds	r3, #2
 8005914:	4403      	add	r3, r0
 8005916:	1a18      	subs	r0, r3, r0
 8005918:	b003      	add	sp, #12
 800591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005920:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005924:	e7ed      	b.n	8005902 <__exponent+0x44>
 8005926:	2330      	movs	r3, #48	@ 0x30
 8005928:	3130      	adds	r1, #48	@ 0x30
 800592a:	7083      	strb	r3, [r0, #2]
 800592c:	70c1      	strb	r1, [r0, #3]
 800592e:	1d03      	adds	r3, r0, #4
 8005930:	e7f1      	b.n	8005916 <__exponent+0x58>
	...

08005934 <_printf_float>:
 8005934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	b08d      	sub	sp, #52	@ 0x34
 800593a:	460c      	mov	r4, r1
 800593c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005940:	4616      	mov	r6, r2
 8005942:	461f      	mov	r7, r3
 8005944:	4605      	mov	r5, r0
 8005946:	f000 feef 	bl	8006728 <_localeconv_r>
 800594a:	6803      	ldr	r3, [r0, #0]
 800594c:	9304      	str	r3, [sp, #16]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fa fcae 	bl	80002b0 <strlen>
 8005954:	2300      	movs	r3, #0
 8005956:	930a      	str	r3, [sp, #40]	@ 0x28
 8005958:	f8d8 3000 	ldr.w	r3, [r8]
 800595c:	9005      	str	r0, [sp, #20]
 800595e:	3307      	adds	r3, #7
 8005960:	f023 0307 	bic.w	r3, r3, #7
 8005964:	f103 0208 	add.w	r2, r3, #8
 8005968:	f894 a018 	ldrb.w	sl, [r4, #24]
 800596c:	f8d4 b000 	ldr.w	fp, [r4]
 8005970:	f8c8 2000 	str.w	r2, [r8]
 8005974:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005978:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005982:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800598a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bfc <_printf_float+0x2c8>)
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	f7fb f8ec 	bl	8000b6c <__aeabi_dcmpun>
 8005994:	bb70      	cbnz	r0, 80059f4 <_printf_float+0xc0>
 8005996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800599a:	4b98      	ldr	r3, [pc, #608]	@ (8005bfc <_printf_float+0x2c8>)
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	f7fb f8c6 	bl	8000b30 <__aeabi_dcmple>
 80059a4:	bb30      	cbnz	r0, 80059f4 <_printf_float+0xc0>
 80059a6:	2200      	movs	r2, #0
 80059a8:	2300      	movs	r3, #0
 80059aa:	4640      	mov	r0, r8
 80059ac:	4649      	mov	r1, r9
 80059ae:	f7fb f8b5 	bl	8000b1c <__aeabi_dcmplt>
 80059b2:	b110      	cbz	r0, 80059ba <_printf_float+0x86>
 80059b4:	232d      	movs	r3, #45	@ 0x2d
 80059b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ba:	4a91      	ldr	r2, [pc, #580]	@ (8005c00 <_printf_float+0x2cc>)
 80059bc:	4b91      	ldr	r3, [pc, #580]	@ (8005c04 <_printf_float+0x2d0>)
 80059be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80059c2:	bf94      	ite	ls
 80059c4:	4690      	movls	r8, r2
 80059c6:	4698      	movhi	r8, r3
 80059c8:	2303      	movs	r3, #3
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	f02b 0304 	bic.w	r3, fp, #4
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	9700      	str	r7, [sp, #0]
 80059d8:	4633      	mov	r3, r6
 80059da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80059dc:	4621      	mov	r1, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 f9d2 	bl	8005d88 <_printf_common>
 80059e4:	3001      	adds	r0, #1
 80059e6:	f040 808d 	bne.w	8005b04 <_printf_float+0x1d0>
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
 80059ee:	b00d      	add	sp, #52	@ 0x34
 80059f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f4:	4642      	mov	r2, r8
 80059f6:	464b      	mov	r3, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	4649      	mov	r1, r9
 80059fc:	f7fb f8b6 	bl	8000b6c <__aeabi_dcmpun>
 8005a00:	b140      	cbz	r0, 8005a14 <_printf_float+0xe0>
 8005a02:	464b      	mov	r3, r9
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bfbc      	itt	lt
 8005a08:	232d      	movlt	r3, #45	@ 0x2d
 8005a0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c08 <_printf_float+0x2d4>)
 8005a10:	4b7e      	ldr	r3, [pc, #504]	@ (8005c0c <_printf_float+0x2d8>)
 8005a12:	e7d4      	b.n	80059be <_printf_float+0x8a>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a1a:	9206      	str	r2, [sp, #24]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	d13b      	bne.n	8005a98 <_printf_float+0x164>
 8005a20:	2306      	movs	r3, #6
 8005a22:	6063      	str	r3, [r4, #4]
 8005a24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6022      	str	r2, [r4, #0]
 8005a2c:	9303      	str	r3, [sp, #12]
 8005a2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a34:	ab09      	add	r3, sp, #36	@ 0x24
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	6861      	ldr	r1, [r4, #4]
 8005a3a:	ec49 8b10 	vmov	d0, r8, r9
 8005a3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a42:	4628      	mov	r0, r5
 8005a44:	f7ff fed6 	bl	80057f4 <__cvt>
 8005a48:	9b06      	ldr	r3, [sp, #24]
 8005a4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a4c:	2b47      	cmp	r3, #71	@ 0x47
 8005a4e:	4680      	mov	r8, r0
 8005a50:	d129      	bne.n	8005aa6 <_printf_float+0x172>
 8005a52:	1cc8      	adds	r0, r1, #3
 8005a54:	db02      	blt.n	8005a5c <_printf_float+0x128>
 8005a56:	6863      	ldr	r3, [r4, #4]
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	dd41      	ble.n	8005ae0 <_printf_float+0x1ac>
 8005a5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a60:	fa5f fa8a 	uxtb.w	sl, sl
 8005a64:	3901      	subs	r1, #1
 8005a66:	4652      	mov	r2, sl
 8005a68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a6e:	f7ff ff26 	bl	80058be <__exponent>
 8005a72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a74:	1813      	adds	r3, r2, r0
 8005a76:	2a01      	cmp	r2, #1
 8005a78:	4681      	mov	r9, r0
 8005a7a:	6123      	str	r3, [r4, #16]
 8005a7c:	dc02      	bgt.n	8005a84 <_printf_float+0x150>
 8005a7e:	6822      	ldr	r2, [r4, #0]
 8005a80:	07d2      	lsls	r2, r2, #31
 8005a82:	d501      	bpl.n	8005a88 <_printf_float+0x154>
 8005a84:	3301      	adds	r3, #1
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0a2      	beq.n	80059d6 <_printf_float+0xa2>
 8005a90:	232d      	movs	r3, #45	@ 0x2d
 8005a92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a96:	e79e      	b.n	80059d6 <_printf_float+0xa2>
 8005a98:	9a06      	ldr	r2, [sp, #24]
 8005a9a:	2a47      	cmp	r2, #71	@ 0x47
 8005a9c:	d1c2      	bne.n	8005a24 <_printf_float+0xf0>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1c0      	bne.n	8005a24 <_printf_float+0xf0>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e7bd      	b.n	8005a22 <_printf_float+0xee>
 8005aa6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005aaa:	d9db      	bls.n	8005a64 <_printf_float+0x130>
 8005aac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ab0:	d118      	bne.n	8005ae4 <_printf_float+0x1b0>
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	6863      	ldr	r3, [r4, #4]
 8005ab6:	dd0b      	ble.n	8005ad0 <_printf_float+0x19c>
 8005ab8:	6121      	str	r1, [r4, #16]
 8005aba:	b913      	cbnz	r3, 8005ac2 <_printf_float+0x18e>
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	07d0      	lsls	r0, r2, #31
 8005ac0:	d502      	bpl.n	8005ac8 <_printf_float+0x194>
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	440b      	add	r3, r1
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005aca:	f04f 0900 	mov.w	r9, #0
 8005ace:	e7db      	b.n	8005a88 <_printf_float+0x154>
 8005ad0:	b913      	cbnz	r3, 8005ad8 <_printf_float+0x1a4>
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	07d2      	lsls	r2, r2, #31
 8005ad6:	d501      	bpl.n	8005adc <_printf_float+0x1a8>
 8005ad8:	3302      	adds	r3, #2
 8005ada:	e7f4      	b.n	8005ac6 <_printf_float+0x192>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e7f2      	b.n	8005ac6 <_printf_float+0x192>
 8005ae0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	db05      	blt.n	8005af6 <_printf_float+0x1c2>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	6121      	str	r1, [r4, #16]
 8005aee:	07d8      	lsls	r0, r3, #31
 8005af0:	d5ea      	bpl.n	8005ac8 <_printf_float+0x194>
 8005af2:	1c4b      	adds	r3, r1, #1
 8005af4:	e7e7      	b.n	8005ac6 <_printf_float+0x192>
 8005af6:	2900      	cmp	r1, #0
 8005af8:	bfd4      	ite	le
 8005afa:	f1c1 0202 	rsble	r2, r1, #2
 8005afe:	2201      	movgt	r2, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	e7e0      	b.n	8005ac6 <_printf_float+0x192>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	055a      	lsls	r2, r3, #21
 8005b08:	d407      	bmi.n	8005b1a <_printf_float+0x1e6>
 8005b0a:	6923      	ldr	r3, [r4, #16]
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	d12b      	bne.n	8005b70 <_printf_float+0x23c>
 8005b18:	e767      	b.n	80059ea <_printf_float+0xb6>
 8005b1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b1e:	f240 80dd 	bls.w	8005cdc <_printf_float+0x3a8>
 8005b22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b26:	2200      	movs	r2, #0
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f7fa ffed 	bl	8000b08 <__aeabi_dcmpeq>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d033      	beq.n	8005b9a <_printf_float+0x266>
 8005b32:	4a37      	ldr	r2, [pc, #220]	@ (8005c10 <_printf_float+0x2dc>)
 8005b34:	2301      	movs	r3, #1
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f43f af54 	beq.w	80059ea <_printf_float+0xb6>
 8005b42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b46:	4543      	cmp	r3, r8
 8005b48:	db02      	blt.n	8005b50 <_printf_float+0x21c>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	07d8      	lsls	r0, r3, #31
 8005b4e:	d50f      	bpl.n	8005b70 <_printf_float+0x23c>
 8005b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b54:	4631      	mov	r1, r6
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	f43f af45 	beq.w	80059ea <_printf_float+0xb6>
 8005b60:	f04f 0900 	mov.w	r9, #0
 8005b64:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b68:	f104 0a1a 	add.w	sl, r4, #26
 8005b6c:	45c8      	cmp	r8, r9
 8005b6e:	dc09      	bgt.n	8005b84 <_printf_float+0x250>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	079b      	lsls	r3, r3, #30
 8005b74:	f100 8103 	bmi.w	8005d7e <_printf_float+0x44a>
 8005b78:	68e0      	ldr	r0, [r4, #12]
 8005b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b7c:	4298      	cmp	r0, r3
 8005b7e:	bfb8      	it	lt
 8005b80:	4618      	movlt	r0, r3
 8005b82:	e734      	b.n	80059ee <_printf_float+0xba>
 8005b84:	2301      	movs	r3, #1
 8005b86:	4652      	mov	r2, sl
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f af2b 	beq.w	80059ea <_printf_float+0xb6>
 8005b94:	f109 0901 	add.w	r9, r9, #1
 8005b98:	e7e8      	b.n	8005b6c <_printf_float+0x238>
 8005b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dc39      	bgt.n	8005c14 <_printf_float+0x2e0>
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <_printf_float+0x2dc>)
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f af1d 	beq.w	80059ea <_printf_float+0xb6>
 8005bb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005bb4:	ea59 0303 	orrs.w	r3, r9, r3
 8005bb8:	d102      	bne.n	8005bc0 <_printf_float+0x28c>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	07d9      	lsls	r1, r3, #31
 8005bbe:	d5d7      	bpl.n	8005b70 <_printf_float+0x23c>
 8005bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f af0d 	beq.w	80059ea <_printf_float+0xb6>
 8005bd0:	f04f 0a00 	mov.w	sl, #0
 8005bd4:	f104 0b1a 	add.w	fp, r4, #26
 8005bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bda:	425b      	negs	r3, r3
 8005bdc:	4553      	cmp	r3, sl
 8005bde:	dc01      	bgt.n	8005be4 <_printf_float+0x2b0>
 8005be0:	464b      	mov	r3, r9
 8005be2:	e793      	b.n	8005b0c <_printf_float+0x1d8>
 8005be4:	2301      	movs	r3, #1
 8005be6:	465a      	mov	r2, fp
 8005be8:	4631      	mov	r1, r6
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b8      	blx	r7
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f43f aefb 	beq.w	80059ea <_printf_float+0xb6>
 8005bf4:	f10a 0a01 	add.w	sl, sl, #1
 8005bf8:	e7ee      	b.n	8005bd8 <_printf_float+0x2a4>
 8005bfa:	bf00      	nop
 8005bfc:	7fefffff 	.word	0x7fefffff
 8005c00:	0800a680 	.word	0x0800a680
 8005c04:	0800a684 	.word	0x0800a684
 8005c08:	0800a688 	.word	0x0800a688
 8005c0c:	0800a68c 	.word	0x0800a68c
 8005c10:	0800a690 	.word	0x0800a690
 8005c14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c1a:	4553      	cmp	r3, sl
 8005c1c:	bfa8      	it	ge
 8005c1e:	4653      	movge	r3, sl
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	4699      	mov	r9, r3
 8005c24:	dc36      	bgt.n	8005c94 <_printf_float+0x360>
 8005c26:	f04f 0b00 	mov.w	fp, #0
 8005c2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c2e:	f104 021a 	add.w	r2, r4, #26
 8005c32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c34:	9306      	str	r3, [sp, #24]
 8005c36:	eba3 0309 	sub.w	r3, r3, r9
 8005c3a:	455b      	cmp	r3, fp
 8005c3c:	dc31      	bgt.n	8005ca2 <_printf_float+0x36e>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c40:	459a      	cmp	sl, r3
 8005c42:	dc3a      	bgt.n	8005cba <_printf_float+0x386>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	07da      	lsls	r2, r3, #31
 8005c48:	d437      	bmi.n	8005cba <_printf_float+0x386>
 8005c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c4c:	ebaa 0903 	sub.w	r9, sl, r3
 8005c50:	9b06      	ldr	r3, [sp, #24]
 8005c52:	ebaa 0303 	sub.w	r3, sl, r3
 8005c56:	4599      	cmp	r9, r3
 8005c58:	bfa8      	it	ge
 8005c5a:	4699      	movge	r9, r3
 8005c5c:	f1b9 0f00 	cmp.w	r9, #0
 8005c60:	dc33      	bgt.n	8005cca <_printf_float+0x396>
 8005c62:	f04f 0800 	mov.w	r8, #0
 8005c66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c6a:	f104 0b1a 	add.w	fp, r4, #26
 8005c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c70:	ebaa 0303 	sub.w	r3, sl, r3
 8005c74:	eba3 0309 	sub.w	r3, r3, r9
 8005c78:	4543      	cmp	r3, r8
 8005c7a:	f77f af79 	ble.w	8005b70 <_printf_float+0x23c>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	465a      	mov	r2, fp
 8005c82:	4631      	mov	r1, r6
 8005c84:	4628      	mov	r0, r5
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f43f aeae 	beq.w	80059ea <_printf_float+0xb6>
 8005c8e:	f108 0801 	add.w	r8, r8, #1
 8005c92:	e7ec      	b.n	8005c6e <_printf_float+0x33a>
 8005c94:	4642      	mov	r2, r8
 8005c96:	4631      	mov	r1, r6
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b8      	blx	r7
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d1c2      	bne.n	8005c26 <_printf_float+0x2f2>
 8005ca0:	e6a3      	b.n	80059ea <_printf_float+0xb6>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	9206      	str	r2, [sp, #24]
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f ae9c 	beq.w	80059ea <_printf_float+0xb6>
 8005cb2:	9a06      	ldr	r2, [sp, #24]
 8005cb4:	f10b 0b01 	add.w	fp, fp, #1
 8005cb8:	e7bb      	b.n	8005c32 <_printf_float+0x2fe>
 8005cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d1c0      	bne.n	8005c4a <_printf_float+0x316>
 8005cc8:	e68f      	b.n	80059ea <_printf_float+0xb6>
 8005cca:	9a06      	ldr	r2, [sp, #24]
 8005ccc:	464b      	mov	r3, r9
 8005cce:	4442      	add	r2, r8
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d1c3      	bne.n	8005c62 <_printf_float+0x32e>
 8005cda:	e686      	b.n	80059ea <_printf_float+0xb6>
 8005cdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ce0:	f1ba 0f01 	cmp.w	sl, #1
 8005ce4:	dc01      	bgt.n	8005cea <_printf_float+0x3b6>
 8005ce6:	07db      	lsls	r3, r3, #31
 8005ce8:	d536      	bpl.n	8005d58 <_printf_float+0x424>
 8005cea:	2301      	movs	r3, #1
 8005cec:	4642      	mov	r2, r8
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f ae78 	beq.w	80059ea <_printf_float+0xb6>
 8005cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	f43f ae70 	beq.w	80059ea <_printf_float+0xb6>
 8005d0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2300      	movs	r3, #0
 8005d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d16:	f7fa fef7 	bl	8000b08 <__aeabi_dcmpeq>
 8005d1a:	b9c0      	cbnz	r0, 8005d4e <_printf_float+0x41a>
 8005d1c:	4653      	mov	r3, sl
 8005d1e:	f108 0201 	add.w	r2, r8, #1
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b8      	blx	r7
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d10c      	bne.n	8005d46 <_printf_float+0x412>
 8005d2c:	e65d      	b.n	80059ea <_printf_float+0xb6>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	465a      	mov	r2, fp
 8005d32:	4631      	mov	r1, r6
 8005d34:	4628      	mov	r0, r5
 8005d36:	47b8      	blx	r7
 8005d38:	3001      	adds	r0, #1
 8005d3a:	f43f ae56 	beq.w	80059ea <_printf_float+0xb6>
 8005d3e:	f108 0801 	add.w	r8, r8, #1
 8005d42:	45d0      	cmp	r8, sl
 8005d44:	dbf3      	blt.n	8005d2e <_printf_float+0x3fa>
 8005d46:	464b      	mov	r3, r9
 8005d48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d4c:	e6df      	b.n	8005b0e <_printf_float+0x1da>
 8005d4e:	f04f 0800 	mov.w	r8, #0
 8005d52:	f104 0b1a 	add.w	fp, r4, #26
 8005d56:	e7f4      	b.n	8005d42 <_printf_float+0x40e>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4642      	mov	r2, r8
 8005d5c:	e7e1      	b.n	8005d22 <_printf_float+0x3ee>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	464a      	mov	r2, r9
 8005d62:	4631      	mov	r1, r6
 8005d64:	4628      	mov	r0, r5
 8005d66:	47b8      	blx	r7
 8005d68:	3001      	adds	r0, #1
 8005d6a:	f43f ae3e 	beq.w	80059ea <_printf_float+0xb6>
 8005d6e:	f108 0801 	add.w	r8, r8, #1
 8005d72:	68e3      	ldr	r3, [r4, #12]
 8005d74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d76:	1a5b      	subs	r3, r3, r1
 8005d78:	4543      	cmp	r3, r8
 8005d7a:	dcf0      	bgt.n	8005d5e <_printf_float+0x42a>
 8005d7c:	e6fc      	b.n	8005b78 <_printf_float+0x244>
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	f104 0919 	add.w	r9, r4, #25
 8005d86:	e7f4      	b.n	8005d72 <_printf_float+0x43e>

08005d88 <_printf_common>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	4698      	mov	r8, r3
 8005d90:	688a      	ldr	r2, [r1, #8]
 8005d92:	690b      	ldr	r3, [r1, #16]
 8005d94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	bfb8      	it	lt
 8005d9c:	4613      	movlt	r3, r2
 8005d9e:	6033      	str	r3, [r6, #0]
 8005da0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005da4:	4607      	mov	r7, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	b10a      	cbz	r2, 8005dae <_printf_common+0x26>
 8005daa:	3301      	adds	r3, #1
 8005dac:	6033      	str	r3, [r6, #0]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	0699      	lsls	r1, r3, #26
 8005db2:	bf42      	ittt	mi
 8005db4:	6833      	ldrmi	r3, [r6, #0]
 8005db6:	3302      	addmi	r3, #2
 8005db8:	6033      	strmi	r3, [r6, #0]
 8005dba:	6825      	ldr	r5, [r4, #0]
 8005dbc:	f015 0506 	ands.w	r5, r5, #6
 8005dc0:	d106      	bne.n	8005dd0 <_printf_common+0x48>
 8005dc2:	f104 0a19 	add.w	sl, r4, #25
 8005dc6:	68e3      	ldr	r3, [r4, #12]
 8005dc8:	6832      	ldr	r2, [r6, #0]
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	42ab      	cmp	r3, r5
 8005dce:	dc26      	bgt.n	8005e1e <_printf_common+0x96>
 8005dd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	3b00      	subs	r3, #0
 8005dd8:	bf18      	it	ne
 8005dda:	2301      	movne	r3, #1
 8005ddc:	0692      	lsls	r2, r2, #26
 8005dde:	d42b      	bmi.n	8005e38 <_printf_common+0xb0>
 8005de0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005de4:	4641      	mov	r1, r8
 8005de6:	4638      	mov	r0, r7
 8005de8:	47c8      	blx	r9
 8005dea:	3001      	adds	r0, #1
 8005dec:	d01e      	beq.n	8005e2c <_printf_common+0xa4>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	6922      	ldr	r2, [r4, #16]
 8005df2:	f003 0306 	and.w	r3, r3, #6
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	bf02      	ittt	eq
 8005dfa:	68e5      	ldreq	r5, [r4, #12]
 8005dfc:	6833      	ldreq	r3, [r6, #0]
 8005dfe:	1aed      	subeq	r5, r5, r3
 8005e00:	68a3      	ldr	r3, [r4, #8]
 8005e02:	bf0c      	ite	eq
 8005e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e08:	2500      	movne	r5, #0
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	bfc4      	itt	gt
 8005e0e:	1a9b      	subgt	r3, r3, r2
 8005e10:	18ed      	addgt	r5, r5, r3
 8005e12:	2600      	movs	r6, #0
 8005e14:	341a      	adds	r4, #26
 8005e16:	42b5      	cmp	r5, r6
 8005e18:	d11a      	bne.n	8005e50 <_printf_common+0xc8>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	e008      	b.n	8005e30 <_printf_common+0xa8>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4652      	mov	r2, sl
 8005e22:	4641      	mov	r1, r8
 8005e24:	4638      	mov	r0, r7
 8005e26:	47c8      	blx	r9
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d103      	bne.n	8005e34 <_printf_common+0xac>
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e34:	3501      	adds	r5, #1
 8005e36:	e7c6      	b.n	8005dc6 <_printf_common+0x3e>
 8005e38:	18e1      	adds	r1, r4, r3
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	2030      	movs	r0, #48	@ 0x30
 8005e3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e42:	4422      	add	r2, r4
 8005e44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	e7c7      	b.n	8005de0 <_printf_common+0x58>
 8005e50:	2301      	movs	r3, #1
 8005e52:	4622      	mov	r2, r4
 8005e54:	4641      	mov	r1, r8
 8005e56:	4638      	mov	r0, r7
 8005e58:	47c8      	blx	r9
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d0e6      	beq.n	8005e2c <_printf_common+0xa4>
 8005e5e:	3601      	adds	r6, #1
 8005e60:	e7d9      	b.n	8005e16 <_printf_common+0x8e>
	...

08005e64 <_printf_i>:
 8005e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	7e0f      	ldrb	r7, [r1, #24]
 8005e6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e6c:	2f78      	cmp	r7, #120	@ 0x78
 8005e6e:	4691      	mov	r9, r2
 8005e70:	4680      	mov	r8, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	469a      	mov	sl, r3
 8005e76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e7a:	d807      	bhi.n	8005e8c <_printf_i+0x28>
 8005e7c:	2f62      	cmp	r7, #98	@ 0x62
 8005e7e:	d80a      	bhi.n	8005e96 <_printf_i+0x32>
 8005e80:	2f00      	cmp	r7, #0
 8005e82:	f000 80d2 	beq.w	800602a <_printf_i+0x1c6>
 8005e86:	2f58      	cmp	r7, #88	@ 0x58
 8005e88:	f000 80b9 	beq.w	8005ffe <_printf_i+0x19a>
 8005e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e94:	e03a      	b.n	8005f0c <_printf_i+0xa8>
 8005e96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e9a:	2b15      	cmp	r3, #21
 8005e9c:	d8f6      	bhi.n	8005e8c <_printf_i+0x28>
 8005e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005ea4 <_printf_i+0x40>)
 8005ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ea4:	08005efd 	.word	0x08005efd
 8005ea8:	08005f11 	.word	0x08005f11
 8005eac:	08005e8d 	.word	0x08005e8d
 8005eb0:	08005e8d 	.word	0x08005e8d
 8005eb4:	08005e8d 	.word	0x08005e8d
 8005eb8:	08005e8d 	.word	0x08005e8d
 8005ebc:	08005f11 	.word	0x08005f11
 8005ec0:	08005e8d 	.word	0x08005e8d
 8005ec4:	08005e8d 	.word	0x08005e8d
 8005ec8:	08005e8d 	.word	0x08005e8d
 8005ecc:	08005e8d 	.word	0x08005e8d
 8005ed0:	08006011 	.word	0x08006011
 8005ed4:	08005f3b 	.word	0x08005f3b
 8005ed8:	08005fcb 	.word	0x08005fcb
 8005edc:	08005e8d 	.word	0x08005e8d
 8005ee0:	08005e8d 	.word	0x08005e8d
 8005ee4:	08006033 	.word	0x08006033
 8005ee8:	08005e8d 	.word	0x08005e8d
 8005eec:	08005f3b 	.word	0x08005f3b
 8005ef0:	08005e8d 	.word	0x08005e8d
 8005ef4:	08005e8d 	.word	0x08005e8d
 8005ef8:	08005fd3 	.word	0x08005fd3
 8005efc:	6833      	ldr	r3, [r6, #0]
 8005efe:	1d1a      	adds	r2, r3, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6032      	str	r2, [r6, #0]
 8005f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e09d      	b.n	800604c <_printf_i+0x1e8>
 8005f10:	6833      	ldr	r3, [r6, #0]
 8005f12:	6820      	ldr	r0, [r4, #0]
 8005f14:	1d19      	adds	r1, r3, #4
 8005f16:	6031      	str	r1, [r6, #0]
 8005f18:	0606      	lsls	r6, r0, #24
 8005f1a:	d501      	bpl.n	8005f20 <_printf_i+0xbc>
 8005f1c:	681d      	ldr	r5, [r3, #0]
 8005f1e:	e003      	b.n	8005f28 <_printf_i+0xc4>
 8005f20:	0645      	lsls	r5, r0, #25
 8005f22:	d5fb      	bpl.n	8005f1c <_printf_i+0xb8>
 8005f24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f28:	2d00      	cmp	r5, #0
 8005f2a:	da03      	bge.n	8005f34 <_printf_i+0xd0>
 8005f2c:	232d      	movs	r3, #45	@ 0x2d
 8005f2e:	426d      	negs	r5, r5
 8005f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f34:	4859      	ldr	r0, [pc, #356]	@ (800609c <_printf_i+0x238>)
 8005f36:	230a      	movs	r3, #10
 8005f38:	e011      	b.n	8005f5e <_printf_i+0xfa>
 8005f3a:	6821      	ldr	r1, [r4, #0]
 8005f3c:	6833      	ldr	r3, [r6, #0]
 8005f3e:	0608      	lsls	r0, r1, #24
 8005f40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f44:	d402      	bmi.n	8005f4c <_printf_i+0xe8>
 8005f46:	0649      	lsls	r1, r1, #25
 8005f48:	bf48      	it	mi
 8005f4a:	b2ad      	uxthmi	r5, r5
 8005f4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f4e:	4853      	ldr	r0, [pc, #332]	@ (800609c <_printf_i+0x238>)
 8005f50:	6033      	str	r3, [r6, #0]
 8005f52:	bf14      	ite	ne
 8005f54:	230a      	movne	r3, #10
 8005f56:	2308      	moveq	r3, #8
 8005f58:	2100      	movs	r1, #0
 8005f5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f5e:	6866      	ldr	r6, [r4, #4]
 8005f60:	60a6      	str	r6, [r4, #8]
 8005f62:	2e00      	cmp	r6, #0
 8005f64:	bfa2      	ittt	ge
 8005f66:	6821      	ldrge	r1, [r4, #0]
 8005f68:	f021 0104 	bicge.w	r1, r1, #4
 8005f6c:	6021      	strge	r1, [r4, #0]
 8005f6e:	b90d      	cbnz	r5, 8005f74 <_printf_i+0x110>
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	d04b      	beq.n	800600c <_printf_i+0x1a8>
 8005f74:	4616      	mov	r6, r2
 8005f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f7e:	5dc7      	ldrb	r7, [r0, r7]
 8005f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f84:	462f      	mov	r7, r5
 8005f86:	42bb      	cmp	r3, r7
 8005f88:	460d      	mov	r5, r1
 8005f8a:	d9f4      	bls.n	8005f76 <_printf_i+0x112>
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d10b      	bne.n	8005fa8 <_printf_i+0x144>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	07df      	lsls	r7, r3, #31
 8005f94:	d508      	bpl.n	8005fa8 <_printf_i+0x144>
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	6861      	ldr	r1, [r4, #4]
 8005f9a:	4299      	cmp	r1, r3
 8005f9c:	bfde      	ittt	le
 8005f9e:	2330      	movle	r3, #48	@ 0x30
 8005fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fa8:	1b92      	subs	r2, r2, r6
 8005faa:	6122      	str	r2, [r4, #16]
 8005fac:	f8cd a000 	str.w	sl, [sp]
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	aa03      	add	r2, sp, #12
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f7ff fee6 	bl	8005d88 <_printf_common>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d14a      	bne.n	8006056 <_printf_i+0x1f2>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	b004      	add	sp, #16
 8005fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	f043 0320 	orr.w	r3, r3, #32
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	4833      	ldr	r0, [pc, #204]	@ (80060a0 <_printf_i+0x23c>)
 8005fd4:	2778      	movs	r7, #120	@ 0x78
 8005fd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	6831      	ldr	r1, [r6, #0]
 8005fde:	061f      	lsls	r7, r3, #24
 8005fe0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fe4:	d402      	bmi.n	8005fec <_printf_i+0x188>
 8005fe6:	065f      	lsls	r7, r3, #25
 8005fe8:	bf48      	it	mi
 8005fea:	b2ad      	uxthmi	r5, r5
 8005fec:	6031      	str	r1, [r6, #0]
 8005fee:	07d9      	lsls	r1, r3, #31
 8005ff0:	bf44      	itt	mi
 8005ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ff6:	6023      	strmi	r3, [r4, #0]
 8005ff8:	b11d      	cbz	r5, 8006002 <_printf_i+0x19e>
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	e7ac      	b.n	8005f58 <_printf_i+0xf4>
 8005ffe:	4827      	ldr	r0, [pc, #156]	@ (800609c <_printf_i+0x238>)
 8006000:	e7e9      	b.n	8005fd6 <_printf_i+0x172>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	f023 0320 	bic.w	r3, r3, #32
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	e7f6      	b.n	8005ffa <_printf_i+0x196>
 800600c:	4616      	mov	r6, r2
 800600e:	e7bd      	b.n	8005f8c <_printf_i+0x128>
 8006010:	6833      	ldr	r3, [r6, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	6961      	ldr	r1, [r4, #20]
 8006016:	1d18      	adds	r0, r3, #4
 8006018:	6030      	str	r0, [r6, #0]
 800601a:	062e      	lsls	r6, r5, #24
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	d501      	bpl.n	8006024 <_printf_i+0x1c0>
 8006020:	6019      	str	r1, [r3, #0]
 8006022:	e002      	b.n	800602a <_printf_i+0x1c6>
 8006024:	0668      	lsls	r0, r5, #25
 8006026:	d5fb      	bpl.n	8006020 <_printf_i+0x1bc>
 8006028:	8019      	strh	r1, [r3, #0]
 800602a:	2300      	movs	r3, #0
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	4616      	mov	r6, r2
 8006030:	e7bc      	b.n	8005fac <_printf_i+0x148>
 8006032:	6833      	ldr	r3, [r6, #0]
 8006034:	1d1a      	adds	r2, r3, #4
 8006036:	6032      	str	r2, [r6, #0]
 8006038:	681e      	ldr	r6, [r3, #0]
 800603a:	6862      	ldr	r2, [r4, #4]
 800603c:	2100      	movs	r1, #0
 800603e:	4630      	mov	r0, r6
 8006040:	f7fa f8e6 	bl	8000210 <memchr>
 8006044:	b108      	cbz	r0, 800604a <_printf_i+0x1e6>
 8006046:	1b80      	subs	r0, r0, r6
 8006048:	6060      	str	r0, [r4, #4]
 800604a:	6863      	ldr	r3, [r4, #4]
 800604c:	6123      	str	r3, [r4, #16]
 800604e:	2300      	movs	r3, #0
 8006050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006054:	e7aa      	b.n	8005fac <_printf_i+0x148>
 8006056:	6923      	ldr	r3, [r4, #16]
 8006058:	4632      	mov	r2, r6
 800605a:	4649      	mov	r1, r9
 800605c:	4640      	mov	r0, r8
 800605e:	47d0      	blx	sl
 8006060:	3001      	adds	r0, #1
 8006062:	d0ad      	beq.n	8005fc0 <_printf_i+0x15c>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	079b      	lsls	r3, r3, #30
 8006068:	d413      	bmi.n	8006092 <_printf_i+0x22e>
 800606a:	68e0      	ldr	r0, [r4, #12]
 800606c:	9b03      	ldr	r3, [sp, #12]
 800606e:	4298      	cmp	r0, r3
 8006070:	bfb8      	it	lt
 8006072:	4618      	movlt	r0, r3
 8006074:	e7a6      	b.n	8005fc4 <_printf_i+0x160>
 8006076:	2301      	movs	r3, #1
 8006078:	4632      	mov	r2, r6
 800607a:	4649      	mov	r1, r9
 800607c:	4640      	mov	r0, r8
 800607e:	47d0      	blx	sl
 8006080:	3001      	adds	r0, #1
 8006082:	d09d      	beq.n	8005fc0 <_printf_i+0x15c>
 8006084:	3501      	adds	r5, #1
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	9903      	ldr	r1, [sp, #12]
 800608a:	1a5b      	subs	r3, r3, r1
 800608c:	42ab      	cmp	r3, r5
 800608e:	dcf2      	bgt.n	8006076 <_printf_i+0x212>
 8006090:	e7eb      	b.n	800606a <_printf_i+0x206>
 8006092:	2500      	movs	r5, #0
 8006094:	f104 0619 	add.w	r6, r4, #25
 8006098:	e7f5      	b.n	8006086 <_printf_i+0x222>
 800609a:	bf00      	nop
 800609c:	0800a692 	.word	0x0800a692
 80060a0:	0800a6a3 	.word	0x0800a6a3

080060a4 <_scanf_float>:
 80060a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a8:	b087      	sub	sp, #28
 80060aa:	4617      	mov	r7, r2
 80060ac:	9303      	str	r3, [sp, #12]
 80060ae:	688b      	ldr	r3, [r1, #8]
 80060b0:	1e5a      	subs	r2, r3, #1
 80060b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80060b6:	bf81      	itttt	hi
 80060b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80060bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80060c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80060c4:	608b      	strhi	r3, [r1, #8]
 80060c6:	680b      	ldr	r3, [r1, #0]
 80060c8:	460a      	mov	r2, r1
 80060ca:	f04f 0500 	mov.w	r5, #0
 80060ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80060d2:	f842 3b1c 	str.w	r3, [r2], #28
 80060d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80060da:	4680      	mov	r8, r0
 80060dc:	460c      	mov	r4, r1
 80060de:	bf98      	it	ls
 80060e0:	f04f 0b00 	movls.w	fp, #0
 80060e4:	9201      	str	r2, [sp, #4]
 80060e6:	4616      	mov	r6, r2
 80060e8:	46aa      	mov	sl, r5
 80060ea:	46a9      	mov	r9, r5
 80060ec:	9502      	str	r5, [sp, #8]
 80060ee:	68a2      	ldr	r2, [r4, #8]
 80060f0:	b152      	cbz	r2, 8006108 <_scanf_float+0x64>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80060f8:	d864      	bhi.n	80061c4 <_scanf_float+0x120>
 80060fa:	2b40      	cmp	r3, #64	@ 0x40
 80060fc:	d83c      	bhi.n	8006178 <_scanf_float+0xd4>
 80060fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006102:	b2c8      	uxtb	r0, r1
 8006104:	280e      	cmp	r0, #14
 8006106:	d93a      	bls.n	800617e <_scanf_float+0xda>
 8006108:	f1b9 0f00 	cmp.w	r9, #0
 800610c:	d003      	beq.n	8006116 <_scanf_float+0x72>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	f10a 3aff 	add.w	sl, sl, #4294967295
 800611a:	f1ba 0f01 	cmp.w	sl, #1
 800611e:	f200 8117 	bhi.w	8006350 <_scanf_float+0x2ac>
 8006122:	9b01      	ldr	r3, [sp, #4]
 8006124:	429e      	cmp	r6, r3
 8006126:	f200 8108 	bhi.w	800633a <_scanf_float+0x296>
 800612a:	2001      	movs	r0, #1
 800612c:	b007      	add	sp, #28
 800612e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006132:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006136:	2a0d      	cmp	r2, #13
 8006138:	d8e6      	bhi.n	8006108 <_scanf_float+0x64>
 800613a:	a101      	add	r1, pc, #4	@ (adr r1, 8006140 <_scanf_float+0x9c>)
 800613c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006140:	08006287 	.word	0x08006287
 8006144:	08006109 	.word	0x08006109
 8006148:	08006109 	.word	0x08006109
 800614c:	08006109 	.word	0x08006109
 8006150:	080062e7 	.word	0x080062e7
 8006154:	080062bf 	.word	0x080062bf
 8006158:	08006109 	.word	0x08006109
 800615c:	08006109 	.word	0x08006109
 8006160:	08006295 	.word	0x08006295
 8006164:	08006109 	.word	0x08006109
 8006168:	08006109 	.word	0x08006109
 800616c:	08006109 	.word	0x08006109
 8006170:	08006109 	.word	0x08006109
 8006174:	0800624d 	.word	0x0800624d
 8006178:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800617c:	e7db      	b.n	8006136 <_scanf_float+0x92>
 800617e:	290e      	cmp	r1, #14
 8006180:	d8c2      	bhi.n	8006108 <_scanf_float+0x64>
 8006182:	a001      	add	r0, pc, #4	@ (adr r0, 8006188 <_scanf_float+0xe4>)
 8006184:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006188:	0800623d 	.word	0x0800623d
 800618c:	08006109 	.word	0x08006109
 8006190:	0800623d 	.word	0x0800623d
 8006194:	080062d3 	.word	0x080062d3
 8006198:	08006109 	.word	0x08006109
 800619c:	080061e5 	.word	0x080061e5
 80061a0:	08006223 	.word	0x08006223
 80061a4:	08006223 	.word	0x08006223
 80061a8:	08006223 	.word	0x08006223
 80061ac:	08006223 	.word	0x08006223
 80061b0:	08006223 	.word	0x08006223
 80061b4:	08006223 	.word	0x08006223
 80061b8:	08006223 	.word	0x08006223
 80061bc:	08006223 	.word	0x08006223
 80061c0:	08006223 	.word	0x08006223
 80061c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80061c6:	d809      	bhi.n	80061dc <_scanf_float+0x138>
 80061c8:	2b60      	cmp	r3, #96	@ 0x60
 80061ca:	d8b2      	bhi.n	8006132 <_scanf_float+0x8e>
 80061cc:	2b54      	cmp	r3, #84	@ 0x54
 80061ce:	d07b      	beq.n	80062c8 <_scanf_float+0x224>
 80061d0:	2b59      	cmp	r3, #89	@ 0x59
 80061d2:	d199      	bne.n	8006108 <_scanf_float+0x64>
 80061d4:	2d07      	cmp	r5, #7
 80061d6:	d197      	bne.n	8006108 <_scanf_float+0x64>
 80061d8:	2508      	movs	r5, #8
 80061da:	e02c      	b.n	8006236 <_scanf_float+0x192>
 80061dc:	2b74      	cmp	r3, #116	@ 0x74
 80061de:	d073      	beq.n	80062c8 <_scanf_float+0x224>
 80061e0:	2b79      	cmp	r3, #121	@ 0x79
 80061e2:	e7f6      	b.n	80061d2 <_scanf_float+0x12e>
 80061e4:	6821      	ldr	r1, [r4, #0]
 80061e6:	05c8      	lsls	r0, r1, #23
 80061e8:	d51b      	bpl.n	8006222 <_scanf_float+0x17e>
 80061ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80061ee:	6021      	str	r1, [r4, #0]
 80061f0:	f109 0901 	add.w	r9, r9, #1
 80061f4:	f1bb 0f00 	cmp.w	fp, #0
 80061f8:	d003      	beq.n	8006202 <_scanf_float+0x15e>
 80061fa:	3201      	adds	r2, #1
 80061fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006200:	60a2      	str	r2, [r4, #8]
 8006202:	68a3      	ldr	r3, [r4, #8]
 8006204:	3b01      	subs	r3, #1
 8006206:	60a3      	str	r3, [r4, #8]
 8006208:	6923      	ldr	r3, [r4, #16]
 800620a:	3301      	adds	r3, #1
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3b01      	subs	r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
 8006216:	f340 8087 	ble.w	8006328 <_scanf_float+0x284>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	3301      	adds	r3, #1
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	e765      	b.n	80060ee <_scanf_float+0x4a>
 8006222:	eb1a 0105 	adds.w	r1, sl, r5
 8006226:	f47f af6f 	bne.w	8006108 <_scanf_float+0x64>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006230:	6022      	str	r2, [r4, #0]
 8006232:	460d      	mov	r5, r1
 8006234:	468a      	mov	sl, r1
 8006236:	f806 3b01 	strb.w	r3, [r6], #1
 800623a:	e7e2      	b.n	8006202 <_scanf_float+0x15e>
 800623c:	6822      	ldr	r2, [r4, #0]
 800623e:	0610      	lsls	r0, r2, #24
 8006240:	f57f af62 	bpl.w	8006108 <_scanf_float+0x64>
 8006244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006248:	6022      	str	r2, [r4, #0]
 800624a:	e7f4      	b.n	8006236 <_scanf_float+0x192>
 800624c:	f1ba 0f00 	cmp.w	sl, #0
 8006250:	d10e      	bne.n	8006270 <_scanf_float+0x1cc>
 8006252:	f1b9 0f00 	cmp.w	r9, #0
 8006256:	d10e      	bne.n	8006276 <_scanf_float+0x1d2>
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800625e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006262:	d108      	bne.n	8006276 <_scanf_float+0x1d2>
 8006264:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006268:	6022      	str	r2, [r4, #0]
 800626a:	f04f 0a01 	mov.w	sl, #1
 800626e:	e7e2      	b.n	8006236 <_scanf_float+0x192>
 8006270:	f1ba 0f02 	cmp.w	sl, #2
 8006274:	d055      	beq.n	8006322 <_scanf_float+0x27e>
 8006276:	2d01      	cmp	r5, #1
 8006278:	d002      	beq.n	8006280 <_scanf_float+0x1dc>
 800627a:	2d04      	cmp	r5, #4
 800627c:	f47f af44 	bne.w	8006108 <_scanf_float+0x64>
 8006280:	3501      	adds	r5, #1
 8006282:	b2ed      	uxtb	r5, r5
 8006284:	e7d7      	b.n	8006236 <_scanf_float+0x192>
 8006286:	f1ba 0f01 	cmp.w	sl, #1
 800628a:	f47f af3d 	bne.w	8006108 <_scanf_float+0x64>
 800628e:	f04f 0a02 	mov.w	sl, #2
 8006292:	e7d0      	b.n	8006236 <_scanf_float+0x192>
 8006294:	b97d      	cbnz	r5, 80062b6 <_scanf_float+0x212>
 8006296:	f1b9 0f00 	cmp.w	r9, #0
 800629a:	f47f af38 	bne.w	800610e <_scanf_float+0x6a>
 800629e:	6822      	ldr	r2, [r4, #0]
 80062a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80062a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80062a8:	f040 8108 	bne.w	80064bc <_scanf_float+0x418>
 80062ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80062b0:	6022      	str	r2, [r4, #0]
 80062b2:	2501      	movs	r5, #1
 80062b4:	e7bf      	b.n	8006236 <_scanf_float+0x192>
 80062b6:	2d03      	cmp	r5, #3
 80062b8:	d0e2      	beq.n	8006280 <_scanf_float+0x1dc>
 80062ba:	2d05      	cmp	r5, #5
 80062bc:	e7de      	b.n	800627c <_scanf_float+0x1d8>
 80062be:	2d02      	cmp	r5, #2
 80062c0:	f47f af22 	bne.w	8006108 <_scanf_float+0x64>
 80062c4:	2503      	movs	r5, #3
 80062c6:	e7b6      	b.n	8006236 <_scanf_float+0x192>
 80062c8:	2d06      	cmp	r5, #6
 80062ca:	f47f af1d 	bne.w	8006108 <_scanf_float+0x64>
 80062ce:	2507      	movs	r5, #7
 80062d0:	e7b1      	b.n	8006236 <_scanf_float+0x192>
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	0591      	lsls	r1, r2, #22
 80062d6:	f57f af17 	bpl.w	8006108 <_scanf_float+0x64>
 80062da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80062de:	6022      	str	r2, [r4, #0]
 80062e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80062e4:	e7a7      	b.n	8006236 <_scanf_float+0x192>
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80062ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80062f0:	d006      	beq.n	8006300 <_scanf_float+0x25c>
 80062f2:	0550      	lsls	r0, r2, #21
 80062f4:	f57f af08 	bpl.w	8006108 <_scanf_float+0x64>
 80062f8:	f1b9 0f00 	cmp.w	r9, #0
 80062fc:	f000 80de 	beq.w	80064bc <_scanf_float+0x418>
 8006300:	0591      	lsls	r1, r2, #22
 8006302:	bf58      	it	pl
 8006304:	9902      	ldrpl	r1, [sp, #8]
 8006306:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800630a:	bf58      	it	pl
 800630c:	eba9 0101 	subpl.w	r1, r9, r1
 8006310:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006314:	bf58      	it	pl
 8006316:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800631a:	6022      	str	r2, [r4, #0]
 800631c:	f04f 0900 	mov.w	r9, #0
 8006320:	e789      	b.n	8006236 <_scanf_float+0x192>
 8006322:	f04f 0a03 	mov.w	sl, #3
 8006326:	e786      	b.n	8006236 <_scanf_float+0x192>
 8006328:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800632c:	4639      	mov	r1, r7
 800632e:	4640      	mov	r0, r8
 8006330:	4798      	blx	r3
 8006332:	2800      	cmp	r0, #0
 8006334:	f43f aedb 	beq.w	80060ee <_scanf_float+0x4a>
 8006338:	e6e6      	b.n	8006108 <_scanf_float+0x64>
 800633a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800633e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006342:	463a      	mov	r2, r7
 8006344:	4640      	mov	r0, r8
 8006346:	4798      	blx	r3
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	3b01      	subs	r3, #1
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	e6e8      	b.n	8006122 <_scanf_float+0x7e>
 8006350:	1e6b      	subs	r3, r5, #1
 8006352:	2b06      	cmp	r3, #6
 8006354:	d824      	bhi.n	80063a0 <_scanf_float+0x2fc>
 8006356:	2d02      	cmp	r5, #2
 8006358:	d836      	bhi.n	80063c8 <_scanf_float+0x324>
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	429e      	cmp	r6, r3
 800635e:	f67f aee4 	bls.w	800612a <_scanf_float+0x86>
 8006362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800636a:	463a      	mov	r2, r7
 800636c:	4640      	mov	r0, r8
 800636e:	4798      	blx	r3
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	3b01      	subs	r3, #1
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	e7f0      	b.n	800635a <_scanf_float+0x2b6>
 8006378:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800637c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006380:	463a      	mov	r2, r7
 8006382:	4640      	mov	r0, r8
 8006384:	4798      	blx	r3
 8006386:	6923      	ldr	r3, [r4, #16]
 8006388:	3b01      	subs	r3, #1
 800638a:	6123      	str	r3, [r4, #16]
 800638c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006390:	fa5f fa8a 	uxtb.w	sl, sl
 8006394:	f1ba 0f02 	cmp.w	sl, #2
 8006398:	d1ee      	bne.n	8006378 <_scanf_float+0x2d4>
 800639a:	3d03      	subs	r5, #3
 800639c:	b2ed      	uxtb	r5, r5
 800639e:	1b76      	subs	r6, r6, r5
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	05da      	lsls	r2, r3, #23
 80063a4:	d530      	bpl.n	8006408 <_scanf_float+0x364>
 80063a6:	055b      	lsls	r3, r3, #21
 80063a8:	d511      	bpl.n	80063ce <_scanf_float+0x32a>
 80063aa:	9b01      	ldr	r3, [sp, #4]
 80063ac:	429e      	cmp	r6, r3
 80063ae:	f67f aebc 	bls.w	800612a <_scanf_float+0x86>
 80063b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063ba:	463a      	mov	r2, r7
 80063bc:	4640      	mov	r0, r8
 80063be:	4798      	blx	r3
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	6123      	str	r3, [r4, #16]
 80063c6:	e7f0      	b.n	80063aa <_scanf_float+0x306>
 80063c8:	46aa      	mov	sl, r5
 80063ca:	46b3      	mov	fp, r6
 80063cc:	e7de      	b.n	800638c <_scanf_float+0x2e8>
 80063ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	2965      	cmp	r1, #101	@ 0x65
 80063d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80063da:	f106 35ff 	add.w	r5, r6, #4294967295
 80063de:	6123      	str	r3, [r4, #16]
 80063e0:	d00c      	beq.n	80063fc <_scanf_float+0x358>
 80063e2:	2945      	cmp	r1, #69	@ 0x45
 80063e4:	d00a      	beq.n	80063fc <_scanf_float+0x358>
 80063e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063ea:	463a      	mov	r2, r7
 80063ec:	4640      	mov	r0, r8
 80063ee:	4798      	blx	r3
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	1eb5      	subs	r5, r6, #2
 80063fa:	6123      	str	r3, [r4, #16]
 80063fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006400:	463a      	mov	r2, r7
 8006402:	4640      	mov	r0, r8
 8006404:	4798      	blx	r3
 8006406:	462e      	mov	r6, r5
 8006408:	6822      	ldr	r2, [r4, #0]
 800640a:	f012 0210 	ands.w	r2, r2, #16
 800640e:	d001      	beq.n	8006414 <_scanf_float+0x370>
 8006410:	2000      	movs	r0, #0
 8006412:	e68b      	b.n	800612c <_scanf_float+0x88>
 8006414:	7032      	strb	r2, [r6, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006420:	d11c      	bne.n	800645c <_scanf_float+0x3b8>
 8006422:	9b02      	ldr	r3, [sp, #8]
 8006424:	454b      	cmp	r3, r9
 8006426:	eba3 0209 	sub.w	r2, r3, r9
 800642a:	d123      	bne.n	8006474 <_scanf_float+0x3d0>
 800642c:	9901      	ldr	r1, [sp, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	4640      	mov	r0, r8
 8006432:	f002 fbf9 	bl	8008c28 <_strtod_r>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	6821      	ldr	r1, [r4, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f011 0f02 	tst.w	r1, #2
 8006440:	ec57 6b10 	vmov	r6, r7, d0
 8006444:	f103 0204 	add.w	r2, r3, #4
 8006448:	d01f      	beq.n	800648a <_scanf_float+0x3e6>
 800644a:	9903      	ldr	r1, [sp, #12]
 800644c:	600a      	str	r2, [r1, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	e9c3 6700 	strd	r6, r7, [r3]
 8006454:	68e3      	ldr	r3, [r4, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	60e3      	str	r3, [r4, #12]
 800645a:	e7d9      	b.n	8006410 <_scanf_float+0x36c>
 800645c:	9b04      	ldr	r3, [sp, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0e4      	beq.n	800642c <_scanf_float+0x388>
 8006462:	9905      	ldr	r1, [sp, #20]
 8006464:	230a      	movs	r3, #10
 8006466:	3101      	adds	r1, #1
 8006468:	4640      	mov	r0, r8
 800646a:	f002 fc5d 	bl	8008d28 <_strtol_r>
 800646e:	9b04      	ldr	r3, [sp, #16]
 8006470:	9e05      	ldr	r6, [sp, #20]
 8006472:	1ac2      	subs	r2, r0, r3
 8006474:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006478:	429e      	cmp	r6, r3
 800647a:	bf28      	it	cs
 800647c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006480:	4910      	ldr	r1, [pc, #64]	@ (80064c4 <_scanf_float+0x420>)
 8006482:	4630      	mov	r0, r6
 8006484:	f000 f8e4 	bl	8006650 <siprintf>
 8006488:	e7d0      	b.n	800642c <_scanf_float+0x388>
 800648a:	f011 0f04 	tst.w	r1, #4
 800648e:	9903      	ldr	r1, [sp, #12]
 8006490:	600a      	str	r2, [r1, #0]
 8006492:	d1dc      	bne.n	800644e <_scanf_float+0x3aa>
 8006494:	681d      	ldr	r5, [r3, #0]
 8006496:	4632      	mov	r2, r6
 8006498:	463b      	mov	r3, r7
 800649a:	4630      	mov	r0, r6
 800649c:	4639      	mov	r1, r7
 800649e:	f7fa fb65 	bl	8000b6c <__aeabi_dcmpun>
 80064a2:	b128      	cbz	r0, 80064b0 <_scanf_float+0x40c>
 80064a4:	4808      	ldr	r0, [pc, #32]	@ (80064c8 <_scanf_float+0x424>)
 80064a6:	f000 f9b7 	bl	8006818 <nanf>
 80064aa:	ed85 0a00 	vstr	s0, [r5]
 80064ae:	e7d1      	b.n	8006454 <_scanf_float+0x3b0>
 80064b0:	4630      	mov	r0, r6
 80064b2:	4639      	mov	r1, r7
 80064b4:	f7fa fbb8 	bl	8000c28 <__aeabi_d2f>
 80064b8:	6028      	str	r0, [r5, #0]
 80064ba:	e7cb      	b.n	8006454 <_scanf_float+0x3b0>
 80064bc:	f04f 0900 	mov.w	r9, #0
 80064c0:	e629      	b.n	8006116 <_scanf_float+0x72>
 80064c2:	bf00      	nop
 80064c4:	0800a6b4 	.word	0x0800a6b4
 80064c8:	0800aa4d 	.word	0x0800aa4d

080064cc <std>:
 80064cc:	2300      	movs	r3, #0
 80064ce:	b510      	push	{r4, lr}
 80064d0:	4604      	mov	r4, r0
 80064d2:	e9c0 3300 	strd	r3, r3, [r0]
 80064d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064da:	6083      	str	r3, [r0, #8]
 80064dc:	8181      	strh	r1, [r0, #12]
 80064de:	6643      	str	r3, [r0, #100]	@ 0x64
 80064e0:	81c2      	strh	r2, [r0, #14]
 80064e2:	6183      	str	r3, [r0, #24]
 80064e4:	4619      	mov	r1, r3
 80064e6:	2208      	movs	r2, #8
 80064e8:	305c      	adds	r0, #92	@ 0x5c
 80064ea:	f000 f914 	bl	8006716 <memset>
 80064ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006524 <std+0x58>)
 80064f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <std+0x5c>)
 80064f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064f6:	4b0d      	ldr	r3, [pc, #52]	@ (800652c <std+0x60>)
 80064f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006530 <std+0x64>)
 80064fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80064fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006534 <std+0x68>)
 8006500:	6224      	str	r4, [r4, #32]
 8006502:	429c      	cmp	r4, r3
 8006504:	d006      	beq.n	8006514 <std+0x48>
 8006506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800650a:	4294      	cmp	r4, r2
 800650c:	d002      	beq.n	8006514 <std+0x48>
 800650e:	33d0      	adds	r3, #208	@ 0xd0
 8006510:	429c      	cmp	r4, r3
 8006512:	d105      	bne.n	8006520 <std+0x54>
 8006514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800651c:	f000 b978 	b.w	8006810 <__retarget_lock_init_recursive>
 8006520:	bd10      	pop	{r4, pc}
 8006522:	bf00      	nop
 8006524:	08006691 	.word	0x08006691
 8006528:	080066b3 	.word	0x080066b3
 800652c:	080066eb 	.word	0x080066eb
 8006530:	0800670f 	.word	0x0800670f
 8006534:	200006f8 	.word	0x200006f8

08006538 <stdio_exit_handler>:
 8006538:	4a02      	ldr	r2, [pc, #8]	@ (8006544 <stdio_exit_handler+0xc>)
 800653a:	4903      	ldr	r1, [pc, #12]	@ (8006548 <stdio_exit_handler+0x10>)
 800653c:	4803      	ldr	r0, [pc, #12]	@ (800654c <stdio_exit_handler+0x14>)
 800653e:	f000 b869 	b.w	8006614 <_fwalk_sglue>
 8006542:	bf00      	nop
 8006544:	20000028 	.word	0x20000028
 8006548:	080090e5 	.word	0x080090e5
 800654c:	20000038 	.word	0x20000038

08006550 <cleanup_stdio>:
 8006550:	6841      	ldr	r1, [r0, #4]
 8006552:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <cleanup_stdio+0x34>)
 8006554:	4299      	cmp	r1, r3
 8006556:	b510      	push	{r4, lr}
 8006558:	4604      	mov	r4, r0
 800655a:	d001      	beq.n	8006560 <cleanup_stdio+0x10>
 800655c:	f002 fdc2 	bl	80090e4 <_fflush_r>
 8006560:	68a1      	ldr	r1, [r4, #8]
 8006562:	4b09      	ldr	r3, [pc, #36]	@ (8006588 <cleanup_stdio+0x38>)
 8006564:	4299      	cmp	r1, r3
 8006566:	d002      	beq.n	800656e <cleanup_stdio+0x1e>
 8006568:	4620      	mov	r0, r4
 800656a:	f002 fdbb 	bl	80090e4 <_fflush_r>
 800656e:	68e1      	ldr	r1, [r4, #12]
 8006570:	4b06      	ldr	r3, [pc, #24]	@ (800658c <cleanup_stdio+0x3c>)
 8006572:	4299      	cmp	r1, r3
 8006574:	d004      	beq.n	8006580 <cleanup_stdio+0x30>
 8006576:	4620      	mov	r0, r4
 8006578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800657c:	f002 bdb2 	b.w	80090e4 <_fflush_r>
 8006580:	bd10      	pop	{r4, pc}
 8006582:	bf00      	nop
 8006584:	200006f8 	.word	0x200006f8
 8006588:	20000760 	.word	0x20000760
 800658c:	200007c8 	.word	0x200007c8

08006590 <global_stdio_init.part.0>:
 8006590:	b510      	push	{r4, lr}
 8006592:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <global_stdio_init.part.0+0x30>)
 8006594:	4c0b      	ldr	r4, [pc, #44]	@ (80065c4 <global_stdio_init.part.0+0x34>)
 8006596:	4a0c      	ldr	r2, [pc, #48]	@ (80065c8 <global_stdio_init.part.0+0x38>)
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	4620      	mov	r0, r4
 800659c:	2200      	movs	r2, #0
 800659e:	2104      	movs	r1, #4
 80065a0:	f7ff ff94 	bl	80064cc <std>
 80065a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065a8:	2201      	movs	r2, #1
 80065aa:	2109      	movs	r1, #9
 80065ac:	f7ff ff8e 	bl	80064cc <std>
 80065b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065b4:	2202      	movs	r2, #2
 80065b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ba:	2112      	movs	r1, #18
 80065bc:	f7ff bf86 	b.w	80064cc <std>
 80065c0:	20000830 	.word	0x20000830
 80065c4:	200006f8 	.word	0x200006f8
 80065c8:	08006539 	.word	0x08006539

080065cc <__sfp_lock_acquire>:
 80065cc:	4801      	ldr	r0, [pc, #4]	@ (80065d4 <__sfp_lock_acquire+0x8>)
 80065ce:	f000 b920 	b.w	8006812 <__retarget_lock_acquire_recursive>
 80065d2:	bf00      	nop
 80065d4:	20000839 	.word	0x20000839

080065d8 <__sfp_lock_release>:
 80065d8:	4801      	ldr	r0, [pc, #4]	@ (80065e0 <__sfp_lock_release+0x8>)
 80065da:	f000 b91b 	b.w	8006814 <__retarget_lock_release_recursive>
 80065de:	bf00      	nop
 80065e0:	20000839 	.word	0x20000839

080065e4 <__sinit>:
 80065e4:	b510      	push	{r4, lr}
 80065e6:	4604      	mov	r4, r0
 80065e8:	f7ff fff0 	bl	80065cc <__sfp_lock_acquire>
 80065ec:	6a23      	ldr	r3, [r4, #32]
 80065ee:	b11b      	cbz	r3, 80065f8 <__sinit+0x14>
 80065f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f4:	f7ff bff0 	b.w	80065d8 <__sfp_lock_release>
 80065f8:	4b04      	ldr	r3, [pc, #16]	@ (800660c <__sinit+0x28>)
 80065fa:	6223      	str	r3, [r4, #32]
 80065fc:	4b04      	ldr	r3, [pc, #16]	@ (8006610 <__sinit+0x2c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f5      	bne.n	80065f0 <__sinit+0xc>
 8006604:	f7ff ffc4 	bl	8006590 <global_stdio_init.part.0>
 8006608:	e7f2      	b.n	80065f0 <__sinit+0xc>
 800660a:	bf00      	nop
 800660c:	08006551 	.word	0x08006551
 8006610:	20000830 	.word	0x20000830

08006614 <_fwalk_sglue>:
 8006614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006618:	4607      	mov	r7, r0
 800661a:	4688      	mov	r8, r1
 800661c:	4614      	mov	r4, r2
 800661e:	2600      	movs	r6, #0
 8006620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006624:	f1b9 0901 	subs.w	r9, r9, #1
 8006628:	d505      	bpl.n	8006636 <_fwalk_sglue+0x22>
 800662a:	6824      	ldr	r4, [r4, #0]
 800662c:	2c00      	cmp	r4, #0
 800662e:	d1f7      	bne.n	8006620 <_fwalk_sglue+0xc>
 8006630:	4630      	mov	r0, r6
 8006632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006636:	89ab      	ldrh	r3, [r5, #12]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d907      	bls.n	800664c <_fwalk_sglue+0x38>
 800663c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006640:	3301      	adds	r3, #1
 8006642:	d003      	beq.n	800664c <_fwalk_sglue+0x38>
 8006644:	4629      	mov	r1, r5
 8006646:	4638      	mov	r0, r7
 8006648:	47c0      	blx	r8
 800664a:	4306      	orrs	r6, r0
 800664c:	3568      	adds	r5, #104	@ 0x68
 800664e:	e7e9      	b.n	8006624 <_fwalk_sglue+0x10>

08006650 <siprintf>:
 8006650:	b40e      	push	{r1, r2, r3}
 8006652:	b500      	push	{lr}
 8006654:	b09c      	sub	sp, #112	@ 0x70
 8006656:	ab1d      	add	r3, sp, #116	@ 0x74
 8006658:	9002      	str	r0, [sp, #8]
 800665a:	9006      	str	r0, [sp, #24]
 800665c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006660:	4809      	ldr	r0, [pc, #36]	@ (8006688 <siprintf+0x38>)
 8006662:	9107      	str	r1, [sp, #28]
 8006664:	9104      	str	r1, [sp, #16]
 8006666:	4909      	ldr	r1, [pc, #36]	@ (800668c <siprintf+0x3c>)
 8006668:	f853 2b04 	ldr.w	r2, [r3], #4
 800666c:	9105      	str	r1, [sp, #20]
 800666e:	6800      	ldr	r0, [r0, #0]
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	a902      	add	r1, sp, #8
 8006674:	f002 fbb6 	bl	8008de4 <_svfiprintf_r>
 8006678:	9b02      	ldr	r3, [sp, #8]
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	b01c      	add	sp, #112	@ 0x70
 8006680:	f85d eb04 	ldr.w	lr, [sp], #4
 8006684:	b003      	add	sp, #12
 8006686:	4770      	bx	lr
 8006688:	20000034 	.word	0x20000034
 800668c:	ffff0208 	.word	0xffff0208

08006690 <__sread>:
 8006690:	b510      	push	{r4, lr}
 8006692:	460c      	mov	r4, r1
 8006694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006698:	f000 f86c 	bl	8006774 <_read_r>
 800669c:	2800      	cmp	r0, #0
 800669e:	bfab      	itete	ge
 80066a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066a2:	89a3      	ldrhlt	r3, [r4, #12]
 80066a4:	181b      	addge	r3, r3, r0
 80066a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066aa:	bfac      	ite	ge
 80066ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066ae:	81a3      	strhlt	r3, [r4, #12]
 80066b0:	bd10      	pop	{r4, pc}

080066b2 <__swrite>:
 80066b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	461f      	mov	r7, r3
 80066b8:	898b      	ldrh	r3, [r1, #12]
 80066ba:	05db      	lsls	r3, r3, #23
 80066bc:	4605      	mov	r5, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	4616      	mov	r6, r2
 80066c2:	d505      	bpl.n	80066d0 <__swrite+0x1e>
 80066c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c8:	2302      	movs	r3, #2
 80066ca:	2200      	movs	r2, #0
 80066cc:	f000 f840 	bl	8006750 <_lseek_r>
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	4632      	mov	r2, r6
 80066de:	463b      	mov	r3, r7
 80066e0:	4628      	mov	r0, r5
 80066e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066e6:	f000 b857 	b.w	8006798 <_write_r>

080066ea <__sseek>:
 80066ea:	b510      	push	{r4, lr}
 80066ec:	460c      	mov	r4, r1
 80066ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f2:	f000 f82d 	bl	8006750 <_lseek_r>
 80066f6:	1c43      	adds	r3, r0, #1
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	bf15      	itete	ne
 80066fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006702:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006706:	81a3      	strheq	r3, [r4, #12]
 8006708:	bf18      	it	ne
 800670a:	81a3      	strhne	r3, [r4, #12]
 800670c:	bd10      	pop	{r4, pc}

0800670e <__sclose>:
 800670e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006712:	f000 b80d 	b.w	8006730 <_close_r>

08006716 <memset>:
 8006716:	4402      	add	r2, r0
 8006718:	4603      	mov	r3, r0
 800671a:	4293      	cmp	r3, r2
 800671c:	d100      	bne.n	8006720 <memset+0xa>
 800671e:	4770      	bx	lr
 8006720:	f803 1b01 	strb.w	r1, [r3], #1
 8006724:	e7f9      	b.n	800671a <memset+0x4>
	...

08006728 <_localeconv_r>:
 8006728:	4800      	ldr	r0, [pc, #0]	@ (800672c <_localeconv_r+0x4>)
 800672a:	4770      	bx	lr
 800672c:	20000174 	.word	0x20000174

08006730 <_close_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d06      	ldr	r5, [pc, #24]	@ (800674c <_close_r+0x1c>)
 8006734:	2300      	movs	r3, #0
 8006736:	4604      	mov	r4, r0
 8006738:	4608      	mov	r0, r1
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	f7fb f817 	bl	800176e <_close>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_close_r+0x1a>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_close_r+0x1a>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	20000834 	.word	0x20000834

08006750 <_lseek_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d07      	ldr	r5, [pc, #28]	@ (8006770 <_lseek_r+0x20>)
 8006754:	4604      	mov	r4, r0
 8006756:	4608      	mov	r0, r1
 8006758:	4611      	mov	r1, r2
 800675a:	2200      	movs	r2, #0
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fb f82c 	bl	80017bc <_lseek>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_lseek_r+0x1e>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_lseek_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20000834 	.word	0x20000834

08006774 <_read_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d07      	ldr	r5, [pc, #28]	@ (8006794 <_read_r+0x20>)
 8006778:	4604      	mov	r4, r0
 800677a:	4608      	mov	r0, r1
 800677c:	4611      	mov	r1, r2
 800677e:	2200      	movs	r2, #0
 8006780:	602a      	str	r2, [r5, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	f7fa ffba 	bl	80016fc <_read>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_read_r+0x1e>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_read_r+0x1e>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	20000834 	.word	0x20000834

08006798 <_write_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4d07      	ldr	r5, [pc, #28]	@ (80067b8 <_write_r+0x20>)
 800679c:	4604      	mov	r4, r0
 800679e:	4608      	mov	r0, r1
 80067a0:	4611      	mov	r1, r2
 80067a2:	2200      	movs	r2, #0
 80067a4:	602a      	str	r2, [r5, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f7fa ffc5 	bl	8001736 <_write>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d102      	bne.n	80067b6 <_write_r+0x1e>
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	b103      	cbz	r3, 80067b6 <_write_r+0x1e>
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	bd38      	pop	{r3, r4, r5, pc}
 80067b8:	20000834 	.word	0x20000834

080067bc <__errno>:
 80067bc:	4b01      	ldr	r3, [pc, #4]	@ (80067c4 <__errno+0x8>)
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000034 	.word	0x20000034

080067c8 <__libc_init_array>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006800 <__libc_init_array+0x38>)
 80067cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006804 <__libc_init_array+0x3c>)
 80067ce:	1b64      	subs	r4, r4, r5
 80067d0:	10a4      	asrs	r4, r4, #2
 80067d2:	2600      	movs	r6, #0
 80067d4:	42a6      	cmp	r6, r4
 80067d6:	d109      	bne.n	80067ec <__libc_init_array+0x24>
 80067d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006808 <__libc_init_array+0x40>)
 80067da:	4c0c      	ldr	r4, [pc, #48]	@ (800680c <__libc_init_array+0x44>)
 80067dc:	f003 fb72 	bl	8009ec4 <_init>
 80067e0:	1b64      	subs	r4, r4, r5
 80067e2:	10a4      	asrs	r4, r4, #2
 80067e4:	2600      	movs	r6, #0
 80067e6:	42a6      	cmp	r6, r4
 80067e8:	d105      	bne.n	80067f6 <__libc_init_array+0x2e>
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f0:	4798      	blx	r3
 80067f2:	3601      	adds	r6, #1
 80067f4:	e7ee      	b.n	80067d4 <__libc_init_array+0xc>
 80067f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fa:	4798      	blx	r3
 80067fc:	3601      	adds	r6, #1
 80067fe:	e7f2      	b.n	80067e6 <__libc_init_array+0x1e>
 8006800:	0800aab8 	.word	0x0800aab8
 8006804:	0800aab8 	.word	0x0800aab8
 8006808:	0800aab8 	.word	0x0800aab8
 800680c:	0800aabc 	.word	0x0800aabc

08006810 <__retarget_lock_init_recursive>:
 8006810:	4770      	bx	lr

08006812 <__retarget_lock_acquire_recursive>:
 8006812:	4770      	bx	lr

08006814 <__retarget_lock_release_recursive>:
 8006814:	4770      	bx	lr
	...

08006818 <nanf>:
 8006818:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006820 <nanf+0x8>
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	7fc00000 	.word	0x7fc00000

08006824 <quorem>:
 8006824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	6903      	ldr	r3, [r0, #16]
 800682a:	690c      	ldr	r4, [r1, #16]
 800682c:	42a3      	cmp	r3, r4
 800682e:	4607      	mov	r7, r0
 8006830:	db7e      	blt.n	8006930 <quorem+0x10c>
 8006832:	3c01      	subs	r4, #1
 8006834:	f101 0814 	add.w	r8, r1, #20
 8006838:	00a3      	lsls	r3, r4, #2
 800683a:	f100 0514 	add.w	r5, r0, #20
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800684a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800684e:	3301      	adds	r3, #1
 8006850:	429a      	cmp	r2, r3
 8006852:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006856:	fbb2 f6f3 	udiv	r6, r2, r3
 800685a:	d32e      	bcc.n	80068ba <quorem+0x96>
 800685c:	f04f 0a00 	mov.w	sl, #0
 8006860:	46c4      	mov	ip, r8
 8006862:	46ae      	mov	lr, r5
 8006864:	46d3      	mov	fp, sl
 8006866:	f85c 3b04 	ldr.w	r3, [ip], #4
 800686a:	b298      	uxth	r0, r3
 800686c:	fb06 a000 	mla	r0, r6, r0, sl
 8006870:	0c02      	lsrs	r2, r0, #16
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	fb06 2303 	mla	r3, r6, r3, r2
 8006878:	f8de 2000 	ldr.w	r2, [lr]
 800687c:	b280      	uxth	r0, r0
 800687e:	b292      	uxth	r2, r2
 8006880:	1a12      	subs	r2, r2, r0
 8006882:	445a      	add	r2, fp
 8006884:	f8de 0000 	ldr.w	r0, [lr]
 8006888:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800688c:	b29b      	uxth	r3, r3
 800688e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006892:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006896:	b292      	uxth	r2, r2
 8006898:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800689c:	45e1      	cmp	r9, ip
 800689e:	f84e 2b04 	str.w	r2, [lr], #4
 80068a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80068a6:	d2de      	bcs.n	8006866 <quorem+0x42>
 80068a8:	9b00      	ldr	r3, [sp, #0]
 80068aa:	58eb      	ldr	r3, [r5, r3]
 80068ac:	b92b      	cbnz	r3, 80068ba <quorem+0x96>
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	3b04      	subs	r3, #4
 80068b2:	429d      	cmp	r5, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	d32f      	bcc.n	8006918 <quorem+0xf4>
 80068b8:	613c      	str	r4, [r7, #16]
 80068ba:	4638      	mov	r0, r7
 80068bc:	f001 f9c4 	bl	8007c48 <__mcmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	db25      	blt.n	8006910 <quorem+0xec>
 80068c4:	4629      	mov	r1, r5
 80068c6:	2000      	movs	r0, #0
 80068c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80068cc:	f8d1 c000 	ldr.w	ip, [r1]
 80068d0:	fa1f fe82 	uxth.w	lr, r2
 80068d4:	fa1f f38c 	uxth.w	r3, ip
 80068d8:	eba3 030e 	sub.w	r3, r3, lr
 80068dc:	4403      	add	r3, r0
 80068de:	0c12      	lsrs	r2, r2, #16
 80068e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068ee:	45c1      	cmp	r9, r8
 80068f0:	f841 3b04 	str.w	r3, [r1], #4
 80068f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068f8:	d2e6      	bcs.n	80068c8 <quorem+0xa4>
 80068fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006902:	b922      	cbnz	r2, 800690e <quorem+0xea>
 8006904:	3b04      	subs	r3, #4
 8006906:	429d      	cmp	r5, r3
 8006908:	461a      	mov	r2, r3
 800690a:	d30b      	bcc.n	8006924 <quorem+0x100>
 800690c:	613c      	str	r4, [r7, #16]
 800690e:	3601      	adds	r6, #1
 8006910:	4630      	mov	r0, r6
 8006912:	b003      	add	sp, #12
 8006914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	3b04      	subs	r3, #4
 800691c:	2a00      	cmp	r2, #0
 800691e:	d1cb      	bne.n	80068b8 <quorem+0x94>
 8006920:	3c01      	subs	r4, #1
 8006922:	e7c6      	b.n	80068b2 <quorem+0x8e>
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	3b04      	subs	r3, #4
 8006928:	2a00      	cmp	r2, #0
 800692a:	d1ef      	bne.n	800690c <quorem+0xe8>
 800692c:	3c01      	subs	r4, #1
 800692e:	e7ea      	b.n	8006906 <quorem+0xe2>
 8006930:	2000      	movs	r0, #0
 8006932:	e7ee      	b.n	8006912 <quorem+0xee>
 8006934:	0000      	movs	r0, r0
	...

08006938 <_dtoa_r>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	69c7      	ldr	r7, [r0, #28]
 800693e:	b099      	sub	sp, #100	@ 0x64
 8006940:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006944:	ec55 4b10 	vmov	r4, r5, d0
 8006948:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800694a:	9109      	str	r1, [sp, #36]	@ 0x24
 800694c:	4683      	mov	fp, r0
 800694e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006950:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006952:	b97f      	cbnz	r7, 8006974 <_dtoa_r+0x3c>
 8006954:	2010      	movs	r0, #16
 8006956:	f000 fdfd 	bl	8007554 <malloc>
 800695a:	4602      	mov	r2, r0
 800695c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006960:	b920      	cbnz	r0, 800696c <_dtoa_r+0x34>
 8006962:	4ba7      	ldr	r3, [pc, #668]	@ (8006c00 <_dtoa_r+0x2c8>)
 8006964:	21ef      	movs	r1, #239	@ 0xef
 8006966:	48a7      	ldr	r0, [pc, #668]	@ (8006c04 <_dtoa_r+0x2cc>)
 8006968:	f002 fc36 	bl	80091d8 <__assert_func>
 800696c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006970:	6007      	str	r7, [r0, #0]
 8006972:	60c7      	str	r7, [r0, #12]
 8006974:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006978:	6819      	ldr	r1, [r3, #0]
 800697a:	b159      	cbz	r1, 8006994 <_dtoa_r+0x5c>
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	604a      	str	r2, [r1, #4]
 8006980:	2301      	movs	r3, #1
 8006982:	4093      	lsls	r3, r2
 8006984:	608b      	str	r3, [r1, #8]
 8006986:	4658      	mov	r0, fp
 8006988:	f000 feda 	bl	8007740 <_Bfree>
 800698c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	1e2b      	subs	r3, r5, #0
 8006996:	bfb9      	ittee	lt
 8006998:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800699c:	9303      	strlt	r3, [sp, #12]
 800699e:	2300      	movge	r3, #0
 80069a0:	6033      	strge	r3, [r6, #0]
 80069a2:	9f03      	ldr	r7, [sp, #12]
 80069a4:	4b98      	ldr	r3, [pc, #608]	@ (8006c08 <_dtoa_r+0x2d0>)
 80069a6:	bfbc      	itt	lt
 80069a8:	2201      	movlt	r2, #1
 80069aa:	6032      	strlt	r2, [r6, #0]
 80069ac:	43bb      	bics	r3, r7
 80069ae:	d112      	bne.n	80069d6 <_dtoa_r+0x9e>
 80069b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069bc:	4323      	orrs	r3, r4
 80069be:	f000 854d 	beq.w	800745c <_dtoa_r+0xb24>
 80069c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006c1c <_dtoa_r+0x2e4>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 854f 	beq.w	800746c <_dtoa_r+0xb34>
 80069ce:	f10a 0303 	add.w	r3, sl, #3
 80069d2:	f000 bd49 	b.w	8007468 <_dtoa_r+0xb30>
 80069d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069da:	2200      	movs	r2, #0
 80069dc:	ec51 0b17 	vmov	r0, r1, d7
 80069e0:	2300      	movs	r3, #0
 80069e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80069e6:	f7fa f88f 	bl	8000b08 <__aeabi_dcmpeq>
 80069ea:	4680      	mov	r8, r0
 80069ec:	b158      	cbz	r0, 8006a06 <_dtoa_r+0xce>
 80069ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069f0:	2301      	movs	r3, #1
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069f6:	b113      	cbz	r3, 80069fe <_dtoa_r+0xc6>
 80069f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069fa:	4b84      	ldr	r3, [pc, #528]	@ (8006c0c <_dtoa_r+0x2d4>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006c20 <_dtoa_r+0x2e8>
 8006a02:	f000 bd33 	b.w	800746c <_dtoa_r+0xb34>
 8006a06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a0a:	aa16      	add	r2, sp, #88	@ 0x58
 8006a0c:	a917      	add	r1, sp, #92	@ 0x5c
 8006a0e:	4658      	mov	r0, fp
 8006a10:	f001 fa3a 	bl	8007e88 <__d2b>
 8006a14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006a18:	4681      	mov	r9, r0
 8006a1a:	2e00      	cmp	r6, #0
 8006a1c:	d077      	beq.n	8006b0e <_dtoa_r+0x1d6>
 8006a1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a38:	4619      	mov	r1, r3
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	4b74      	ldr	r3, [pc, #464]	@ (8006c10 <_dtoa_r+0x2d8>)
 8006a3e:	f7f9 fc43 	bl	80002c8 <__aeabi_dsub>
 8006a42:	a369      	add	r3, pc, #420	@ (adr r3, 8006be8 <_dtoa_r+0x2b0>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f7f9 fdf6 	bl	8000638 <__aeabi_dmul>
 8006a4c:	a368      	add	r3, pc, #416	@ (adr r3, 8006bf0 <_dtoa_r+0x2b8>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f7f9 fc3b 	bl	80002cc <__adddf3>
 8006a56:	4604      	mov	r4, r0
 8006a58:	4630      	mov	r0, r6
 8006a5a:	460d      	mov	r5, r1
 8006a5c:	f7f9 fd82 	bl	8000564 <__aeabi_i2d>
 8006a60:	a365      	add	r3, pc, #404	@ (adr r3, 8006bf8 <_dtoa_r+0x2c0>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f7f9 fde7 	bl	8000638 <__aeabi_dmul>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7f9 fc2b 	bl	80002cc <__adddf3>
 8006a76:	4604      	mov	r4, r0
 8006a78:	460d      	mov	r5, r1
 8006a7a:	f7fa f88d 	bl	8000b98 <__aeabi_d2iz>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	4607      	mov	r7, r0
 8006a82:	2300      	movs	r3, #0
 8006a84:	4620      	mov	r0, r4
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7fa f848 	bl	8000b1c <__aeabi_dcmplt>
 8006a8c:	b140      	cbz	r0, 8006aa0 <_dtoa_r+0x168>
 8006a8e:	4638      	mov	r0, r7
 8006a90:	f7f9 fd68 	bl	8000564 <__aeabi_i2d>
 8006a94:	4622      	mov	r2, r4
 8006a96:	462b      	mov	r3, r5
 8006a98:	f7fa f836 	bl	8000b08 <__aeabi_dcmpeq>
 8006a9c:	b900      	cbnz	r0, 8006aa0 <_dtoa_r+0x168>
 8006a9e:	3f01      	subs	r7, #1
 8006aa0:	2f16      	cmp	r7, #22
 8006aa2:	d851      	bhi.n	8006b48 <_dtoa_r+0x210>
 8006aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8006c14 <_dtoa_r+0x2dc>)
 8006aa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ab2:	f7fa f833 	bl	8000b1c <__aeabi_dcmplt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d048      	beq.n	8006b4c <_dtoa_r+0x214>
 8006aba:	3f01      	subs	r7, #1
 8006abc:	2300      	movs	r3, #0
 8006abe:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ac0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ac2:	1b9b      	subs	r3, r3, r6
 8006ac4:	1e5a      	subs	r2, r3, #1
 8006ac6:	bf44      	itt	mi
 8006ac8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006acc:	2300      	movmi	r3, #0
 8006ace:	9208      	str	r2, [sp, #32]
 8006ad0:	bf54      	ite	pl
 8006ad2:	f04f 0800 	movpl.w	r8, #0
 8006ad6:	9308      	strmi	r3, [sp, #32]
 8006ad8:	2f00      	cmp	r7, #0
 8006ada:	db39      	blt.n	8006b50 <_dtoa_r+0x218>
 8006adc:	9b08      	ldr	r3, [sp, #32]
 8006ade:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ae0:	443b      	add	r3, r7
 8006ae2:	9308      	str	r3, [sp, #32]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	d864      	bhi.n	8006bb8 <_dtoa_r+0x280>
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	bfc4      	itt	gt
 8006af2:	3b04      	subgt	r3, #4
 8006af4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af8:	f1a3 0302 	sub.w	r3, r3, #2
 8006afc:	bfcc      	ite	gt
 8006afe:	2400      	movgt	r4, #0
 8006b00:	2401      	movle	r4, #1
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d863      	bhi.n	8006bce <_dtoa_r+0x296>
 8006b06:	e8df f003 	tbb	[pc, r3]
 8006b0a:	372a      	.short	0x372a
 8006b0c:	5535      	.short	0x5535
 8006b0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006b12:	441e      	add	r6, r3
 8006b14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	bfc1      	itttt	gt
 8006b1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006b20:	409f      	lslgt	r7, r3
 8006b22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b2a:	bfd6      	itet	le
 8006b2c:	f1c3 0320 	rsble	r3, r3, #32
 8006b30:	ea47 0003 	orrgt.w	r0, r7, r3
 8006b34:	fa04 f003 	lslle.w	r0, r4, r3
 8006b38:	f7f9 fd04 	bl	8000544 <__aeabi_ui2d>
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b42:	3e01      	subs	r6, #1
 8006b44:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b46:	e777      	b.n	8006a38 <_dtoa_r+0x100>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e7b8      	b.n	8006abe <_dtoa_r+0x186>
 8006b4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b4e:	e7b7      	b.n	8006ac0 <_dtoa_r+0x188>
 8006b50:	427b      	negs	r3, r7
 8006b52:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b54:	2300      	movs	r3, #0
 8006b56:	eba8 0807 	sub.w	r8, r8, r7
 8006b5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b5c:	e7c4      	b.n	8006ae8 <_dtoa_r+0x1b0>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dc35      	bgt.n	8006bd4 <_dtoa_r+0x29c>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b72:	e00b      	b.n	8006b8c <_dtoa_r+0x254>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e7f3      	b.n	8006b60 <_dtoa_r+0x228>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	3301      	adds	r3, #1
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	bfb8      	it	lt
 8006b8a:	2301      	movlt	r3, #1
 8006b8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b90:	2100      	movs	r1, #0
 8006b92:	2204      	movs	r2, #4
 8006b94:	f102 0514 	add.w	r5, r2, #20
 8006b98:	429d      	cmp	r5, r3
 8006b9a:	d91f      	bls.n	8006bdc <_dtoa_r+0x2a4>
 8006b9c:	6041      	str	r1, [r0, #4]
 8006b9e:	4658      	mov	r0, fp
 8006ba0:	f000 fd8e 	bl	80076c0 <_Balloc>
 8006ba4:	4682      	mov	sl, r0
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d13c      	bne.n	8006c24 <_dtoa_r+0x2ec>
 8006baa:	4b1b      	ldr	r3, [pc, #108]	@ (8006c18 <_dtoa_r+0x2e0>)
 8006bac:	4602      	mov	r2, r0
 8006bae:	f240 11af 	movw	r1, #431	@ 0x1af
 8006bb2:	e6d8      	b.n	8006966 <_dtoa_r+0x2e>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e7e0      	b.n	8006b7a <_dtoa_r+0x242>
 8006bb8:	2401      	movs	r4, #1
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	9307      	str	r3, [sp, #28]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2312      	movs	r3, #18
 8006bcc:	e7d0      	b.n	8006b70 <_dtoa_r+0x238>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bd2:	e7f5      	b.n	8006bc0 <_dtoa_r+0x288>
 8006bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	9307      	str	r3, [sp, #28]
 8006bda:	e7d7      	b.n	8006b8c <_dtoa_r+0x254>
 8006bdc:	3101      	adds	r1, #1
 8006bde:	0052      	lsls	r2, r2, #1
 8006be0:	e7d8      	b.n	8006b94 <_dtoa_r+0x25c>
 8006be2:	bf00      	nop
 8006be4:	f3af 8000 	nop.w
 8006be8:	636f4361 	.word	0x636f4361
 8006bec:	3fd287a7 	.word	0x3fd287a7
 8006bf0:	8b60c8b3 	.word	0x8b60c8b3
 8006bf4:	3fc68a28 	.word	0x3fc68a28
 8006bf8:	509f79fb 	.word	0x509f79fb
 8006bfc:	3fd34413 	.word	0x3fd34413
 8006c00:	0800a6c6 	.word	0x0800a6c6
 8006c04:	0800a6dd 	.word	0x0800a6dd
 8006c08:	7ff00000 	.word	0x7ff00000
 8006c0c:	0800a691 	.word	0x0800a691
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	0800a7d8 	.word	0x0800a7d8
 8006c18:	0800a735 	.word	0x0800a735
 8006c1c:	0800a6c2 	.word	0x0800a6c2
 8006c20:	0800a690 	.word	0x0800a690
 8006c24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c28:	6018      	str	r0, [r3, #0]
 8006c2a:	9b07      	ldr	r3, [sp, #28]
 8006c2c:	2b0e      	cmp	r3, #14
 8006c2e:	f200 80a4 	bhi.w	8006d7a <_dtoa_r+0x442>
 8006c32:	2c00      	cmp	r4, #0
 8006c34:	f000 80a1 	beq.w	8006d7a <_dtoa_r+0x442>
 8006c38:	2f00      	cmp	r7, #0
 8006c3a:	dd33      	ble.n	8006ca4 <_dtoa_r+0x36c>
 8006c3c:	4bad      	ldr	r3, [pc, #692]	@ (8006ef4 <_dtoa_r+0x5bc>)
 8006c3e:	f007 020f 	and.w	r2, r7, #15
 8006c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c46:	ed93 7b00 	vldr	d7, [r3]
 8006c4a:	05f8      	lsls	r0, r7, #23
 8006c4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c54:	d516      	bpl.n	8006c84 <_dtoa_r+0x34c>
 8006c56:	4ba8      	ldr	r3, [pc, #672]	@ (8006ef8 <_dtoa_r+0x5c0>)
 8006c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c60:	f7f9 fe14 	bl	800088c <__aeabi_ddiv>
 8006c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c68:	f004 040f 	and.w	r4, r4, #15
 8006c6c:	2603      	movs	r6, #3
 8006c6e:	4da2      	ldr	r5, [pc, #648]	@ (8006ef8 <_dtoa_r+0x5c0>)
 8006c70:	b954      	cbnz	r4, 8006c88 <_dtoa_r+0x350>
 8006c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c7a:	f7f9 fe07 	bl	800088c <__aeabi_ddiv>
 8006c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c82:	e028      	b.n	8006cd6 <_dtoa_r+0x39e>
 8006c84:	2602      	movs	r6, #2
 8006c86:	e7f2      	b.n	8006c6e <_dtoa_r+0x336>
 8006c88:	07e1      	lsls	r1, r4, #31
 8006c8a:	d508      	bpl.n	8006c9e <_dtoa_r+0x366>
 8006c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c94:	f7f9 fcd0 	bl	8000638 <__aeabi_dmul>
 8006c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	1064      	asrs	r4, r4, #1
 8006ca0:	3508      	adds	r5, #8
 8006ca2:	e7e5      	b.n	8006c70 <_dtoa_r+0x338>
 8006ca4:	f000 80d2 	beq.w	8006e4c <_dtoa_r+0x514>
 8006ca8:	427c      	negs	r4, r7
 8006caa:	4b92      	ldr	r3, [pc, #584]	@ (8006ef4 <_dtoa_r+0x5bc>)
 8006cac:	4d92      	ldr	r5, [pc, #584]	@ (8006ef8 <_dtoa_r+0x5c0>)
 8006cae:	f004 020f 	and.w	r2, r4, #15
 8006cb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cbe:	f7f9 fcbb 	bl	8000638 <__aeabi_dmul>
 8006cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cc6:	1124      	asrs	r4, r4, #4
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2602      	movs	r6, #2
 8006ccc:	2c00      	cmp	r4, #0
 8006cce:	f040 80b2 	bne.w	8006e36 <_dtoa_r+0x4fe>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1d3      	bne.n	8006c7e <_dtoa_r+0x346>
 8006cd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80b7 	beq.w	8006e50 <_dtoa_r+0x518>
 8006ce2:	4b86      	ldr	r3, [pc, #536]	@ (8006efc <_dtoa_r+0x5c4>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	4629      	mov	r1, r5
 8006cea:	f7f9 ff17 	bl	8000b1c <__aeabi_dcmplt>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	f000 80ae 	beq.w	8006e50 <_dtoa_r+0x518>
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 80aa 	beq.w	8006e50 <_dtoa_r+0x518>
 8006cfc:	9b00      	ldr	r3, [sp, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	dd37      	ble.n	8006d72 <_dtoa_r+0x43a>
 8006d02:	1e7b      	subs	r3, r7, #1
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	4620      	mov	r0, r4
 8006d08:	4b7d      	ldr	r3, [pc, #500]	@ (8006f00 <_dtoa_r+0x5c8>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	f7f9 fc93 	bl	8000638 <__aeabi_dmul>
 8006d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d16:	9c00      	ldr	r4, [sp, #0]
 8006d18:	3601      	adds	r6, #1
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7f9 fc22 	bl	8000564 <__aeabi_i2d>
 8006d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d24:	f7f9 fc88 	bl	8000638 <__aeabi_dmul>
 8006d28:	4b76      	ldr	r3, [pc, #472]	@ (8006f04 <_dtoa_r+0x5cc>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f7f9 face 	bl	80002cc <__adddf3>
 8006d30:	4605      	mov	r5, r0
 8006d32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d36:	2c00      	cmp	r4, #0
 8006d38:	f040 808d 	bne.w	8006e56 <_dtoa_r+0x51e>
 8006d3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d40:	4b71      	ldr	r3, [pc, #452]	@ (8006f08 <_dtoa_r+0x5d0>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	f7f9 fac0 	bl	80002c8 <__aeabi_dsub>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d50:	462a      	mov	r2, r5
 8006d52:	4633      	mov	r3, r6
 8006d54:	f7f9 ff00 	bl	8000b58 <__aeabi_dcmpgt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f040 828b 	bne.w	8007274 <_dtoa_r+0x93c>
 8006d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d62:	462a      	mov	r2, r5
 8006d64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d68:	f7f9 fed8 	bl	8000b1c <__aeabi_dcmplt>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	f040 8128 	bne.w	8006fc2 <_dtoa_r+0x68a>
 8006d72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f2c0 815a 	blt.w	8007036 <_dtoa_r+0x6fe>
 8006d82:	2f0e      	cmp	r7, #14
 8006d84:	f300 8157 	bgt.w	8007036 <_dtoa_r+0x6fe>
 8006d88:	4b5a      	ldr	r3, [pc, #360]	@ (8006ef4 <_dtoa_r+0x5bc>)
 8006d8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d8e:	ed93 7b00 	vldr	d7, [r3]
 8006d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	ed8d 7b00 	vstr	d7, [sp]
 8006d9a:	da03      	bge.n	8006da4 <_dtoa_r+0x46c>
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f340 8101 	ble.w	8006fa6 <_dtoa_r+0x66e>
 8006da4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006da8:	4656      	mov	r6, sl
 8006daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dae:	4620      	mov	r0, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fd6b 	bl	800088c <__aeabi_ddiv>
 8006db6:	f7f9 feef 	bl	8000b98 <__aeabi_d2iz>
 8006dba:	4680      	mov	r8, r0
 8006dbc:	f7f9 fbd2 	bl	8000564 <__aeabi_i2d>
 8006dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dc4:	f7f9 fc38 	bl	8000638 <__aeabi_dmul>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006dd4:	f7f9 fa78 	bl	80002c8 <__aeabi_dsub>
 8006dd8:	f806 4b01 	strb.w	r4, [r6], #1
 8006ddc:	9d07      	ldr	r5, [sp, #28]
 8006dde:	eba6 040a 	sub.w	r4, r6, sl
 8006de2:	42a5      	cmp	r5, r4
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	f040 8117 	bne.w	800701a <_dtoa_r+0x6e2>
 8006dec:	f7f9 fa6e 	bl	80002cc <__adddf3>
 8006df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df4:	4604      	mov	r4, r0
 8006df6:	460d      	mov	r5, r1
 8006df8:	f7f9 feae 	bl	8000b58 <__aeabi_dcmpgt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f040 80f9 	bne.w	8006ff4 <_dtoa_r+0x6bc>
 8006e02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 8006e0e:	b118      	cbz	r0, 8006e18 <_dtoa_r+0x4e0>
 8006e10:	f018 0f01 	tst.w	r8, #1
 8006e14:	f040 80ee 	bne.w	8006ff4 <_dtoa_r+0x6bc>
 8006e18:	4649      	mov	r1, r9
 8006e1a:	4658      	mov	r0, fp
 8006e1c:	f000 fc90 	bl	8007740 <_Bfree>
 8006e20:	2300      	movs	r3, #0
 8006e22:	7033      	strb	r3, [r6, #0]
 8006e24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e26:	3701      	adds	r7, #1
 8006e28:	601f      	str	r7, [r3, #0]
 8006e2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 831d 	beq.w	800746c <_dtoa_r+0xb34>
 8006e32:	601e      	str	r6, [r3, #0]
 8006e34:	e31a      	b.n	800746c <_dtoa_r+0xb34>
 8006e36:	07e2      	lsls	r2, r4, #31
 8006e38:	d505      	bpl.n	8006e46 <_dtoa_r+0x50e>
 8006e3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e3e:	f7f9 fbfb 	bl	8000638 <__aeabi_dmul>
 8006e42:	3601      	adds	r6, #1
 8006e44:	2301      	movs	r3, #1
 8006e46:	1064      	asrs	r4, r4, #1
 8006e48:	3508      	adds	r5, #8
 8006e4a:	e73f      	b.n	8006ccc <_dtoa_r+0x394>
 8006e4c:	2602      	movs	r6, #2
 8006e4e:	e742      	b.n	8006cd6 <_dtoa_r+0x39e>
 8006e50:	9c07      	ldr	r4, [sp, #28]
 8006e52:	9704      	str	r7, [sp, #16]
 8006e54:	e761      	b.n	8006d1a <_dtoa_r+0x3e2>
 8006e56:	4b27      	ldr	r3, [pc, #156]	@ (8006ef4 <_dtoa_r+0x5bc>)
 8006e58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e62:	4454      	add	r4, sl
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d053      	beq.n	8006f10 <_dtoa_r+0x5d8>
 8006e68:	4928      	ldr	r1, [pc, #160]	@ (8006f0c <_dtoa_r+0x5d4>)
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	f7f9 fd0e 	bl	800088c <__aeabi_ddiv>
 8006e70:	4633      	mov	r3, r6
 8006e72:	462a      	mov	r2, r5
 8006e74:	f7f9 fa28 	bl	80002c8 <__aeabi_dsub>
 8006e78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e7c:	4656      	mov	r6, sl
 8006e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e82:	f7f9 fe89 	bl	8000b98 <__aeabi_d2iz>
 8006e86:	4605      	mov	r5, r0
 8006e88:	f7f9 fb6c 	bl	8000564 <__aeabi_i2d>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e94:	f7f9 fa18 	bl	80002c8 <__aeabi_dsub>
 8006e98:	3530      	adds	r5, #48	@ 0x30
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ea2:	f806 5b01 	strb.w	r5, [r6], #1
 8006ea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eaa:	f7f9 fe37 	bl	8000b1c <__aeabi_dcmplt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d171      	bne.n	8006f96 <_dtoa_r+0x65e>
 8006eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eb6:	4911      	ldr	r1, [pc, #68]	@ (8006efc <_dtoa_r+0x5c4>)
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f7f9 fa05 	bl	80002c8 <__aeabi_dsub>
 8006ebe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ec2:	f7f9 fe2b 	bl	8000b1c <__aeabi_dcmplt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f040 8095 	bne.w	8006ff6 <_dtoa_r+0x6be>
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	f43f af50 	beq.w	8006d72 <_dtoa_r+0x43a>
 8006ed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <_dtoa_r+0x5c8>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f7f9 fbad 	bl	8000638 <__aeabi_dmul>
 8006ede:	4b08      	ldr	r3, [pc, #32]	@ (8006f00 <_dtoa_r+0x5c8>)
 8006ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eea:	f7f9 fba5 	bl	8000638 <__aeabi_dmul>
 8006eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef2:	e7c4      	b.n	8006e7e <_dtoa_r+0x546>
 8006ef4:	0800a7d8 	.word	0x0800a7d8
 8006ef8:	0800a7b0 	.word	0x0800a7b0
 8006efc:	3ff00000 	.word	0x3ff00000
 8006f00:	40240000 	.word	0x40240000
 8006f04:	401c0000 	.word	0x401c0000
 8006f08:	40140000 	.word	0x40140000
 8006f0c:	3fe00000 	.word	0x3fe00000
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	f7f9 fb90 	bl	8000638 <__aeabi_dmul>
 8006f18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006f1e:	4656      	mov	r6, sl
 8006f20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f24:	f7f9 fe38 	bl	8000b98 <__aeabi_d2iz>
 8006f28:	4605      	mov	r5, r0
 8006f2a:	f7f9 fb1b 	bl	8000564 <__aeabi_i2d>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f36:	f7f9 f9c7 	bl	80002c8 <__aeabi_dsub>
 8006f3a:	3530      	adds	r5, #48	@ 0x30
 8006f3c:	f806 5b01 	strb.w	r5, [r6], #1
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	d124      	bne.n	8006f9a <_dtoa_r+0x662>
 8006f50:	4bac      	ldr	r3, [pc, #688]	@ (8007204 <_dtoa_r+0x8cc>)
 8006f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f56:	f7f9 f9b9 	bl	80002cc <__adddf3>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f62:	f7f9 fdf9 	bl	8000b58 <__aeabi_dcmpgt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d145      	bne.n	8006ff6 <_dtoa_r+0x6be>
 8006f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f6e:	49a5      	ldr	r1, [pc, #660]	@ (8007204 <_dtoa_r+0x8cc>)
 8006f70:	2000      	movs	r0, #0
 8006f72:	f7f9 f9a9 	bl	80002c8 <__aeabi_dsub>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f7e:	f7f9 fdcd 	bl	8000b1c <__aeabi_dcmplt>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f43f aef5 	beq.w	8006d72 <_dtoa_r+0x43a>
 8006f88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f8a:	1e73      	subs	r3, r6, #1
 8006f8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f92:	2b30      	cmp	r3, #48	@ 0x30
 8006f94:	d0f8      	beq.n	8006f88 <_dtoa_r+0x650>
 8006f96:	9f04      	ldr	r7, [sp, #16]
 8006f98:	e73e      	b.n	8006e18 <_dtoa_r+0x4e0>
 8006f9a:	4b9b      	ldr	r3, [pc, #620]	@ (8007208 <_dtoa_r+0x8d0>)
 8006f9c:	f7f9 fb4c 	bl	8000638 <__aeabi_dmul>
 8006fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa4:	e7bc      	b.n	8006f20 <_dtoa_r+0x5e8>
 8006fa6:	d10c      	bne.n	8006fc2 <_dtoa_r+0x68a>
 8006fa8:	4b98      	ldr	r3, [pc, #608]	@ (800720c <_dtoa_r+0x8d4>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fb0:	f7f9 fb42 	bl	8000638 <__aeabi_dmul>
 8006fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fb8:	f7f9 fdc4 	bl	8000b44 <__aeabi_dcmpge>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f000 8157 	beq.w	8007270 <_dtoa_r+0x938>
 8006fc2:	2400      	movs	r4, #0
 8006fc4:	4625      	mov	r5, r4
 8006fc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	4656      	mov	r6, sl
 8006fce:	2700      	movs	r7, #0
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4658      	mov	r0, fp
 8006fd4:	f000 fbb4 	bl	8007740 <_Bfree>
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	d0dc      	beq.n	8006f96 <_dtoa_r+0x65e>
 8006fdc:	b12f      	cbz	r7, 8006fea <_dtoa_r+0x6b2>
 8006fde:	42af      	cmp	r7, r5
 8006fe0:	d003      	beq.n	8006fea <_dtoa_r+0x6b2>
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	4658      	mov	r0, fp
 8006fe6:	f000 fbab 	bl	8007740 <_Bfree>
 8006fea:	4629      	mov	r1, r5
 8006fec:	4658      	mov	r0, fp
 8006fee:	f000 fba7 	bl	8007740 <_Bfree>
 8006ff2:	e7d0      	b.n	8006f96 <_dtoa_r+0x65e>
 8006ff4:	9704      	str	r7, [sp, #16]
 8006ff6:	4633      	mov	r3, r6
 8006ff8:	461e      	mov	r6, r3
 8006ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffe:	2a39      	cmp	r2, #57	@ 0x39
 8007000:	d107      	bne.n	8007012 <_dtoa_r+0x6da>
 8007002:	459a      	cmp	sl, r3
 8007004:	d1f8      	bne.n	8006ff8 <_dtoa_r+0x6c0>
 8007006:	9a04      	ldr	r2, [sp, #16]
 8007008:	3201      	adds	r2, #1
 800700a:	9204      	str	r2, [sp, #16]
 800700c:	2230      	movs	r2, #48	@ 0x30
 800700e:	f88a 2000 	strb.w	r2, [sl]
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	3201      	adds	r2, #1
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e7bd      	b.n	8006f96 <_dtoa_r+0x65e>
 800701a:	4b7b      	ldr	r3, [pc, #492]	@ (8007208 <_dtoa_r+0x8d0>)
 800701c:	2200      	movs	r2, #0
 800701e:	f7f9 fb0b 	bl	8000638 <__aeabi_dmul>
 8007022:	2200      	movs	r2, #0
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	460d      	mov	r5, r1
 800702a:	f7f9 fd6d 	bl	8000b08 <__aeabi_dcmpeq>
 800702e:	2800      	cmp	r0, #0
 8007030:	f43f aebb 	beq.w	8006daa <_dtoa_r+0x472>
 8007034:	e6f0      	b.n	8006e18 <_dtoa_r+0x4e0>
 8007036:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007038:	2a00      	cmp	r2, #0
 800703a:	f000 80db 	beq.w	80071f4 <_dtoa_r+0x8bc>
 800703e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007040:	2a01      	cmp	r2, #1
 8007042:	f300 80bf 	bgt.w	80071c4 <_dtoa_r+0x88c>
 8007046:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007048:	2a00      	cmp	r2, #0
 800704a:	f000 80b7 	beq.w	80071bc <_dtoa_r+0x884>
 800704e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007052:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007054:	4646      	mov	r6, r8
 8007056:	9a08      	ldr	r2, [sp, #32]
 8007058:	2101      	movs	r1, #1
 800705a:	441a      	add	r2, r3
 800705c:	4658      	mov	r0, fp
 800705e:	4498      	add	r8, r3
 8007060:	9208      	str	r2, [sp, #32]
 8007062:	f000 fc6b 	bl	800793c <__i2b>
 8007066:	4605      	mov	r5, r0
 8007068:	b15e      	cbz	r6, 8007082 <_dtoa_r+0x74a>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd08      	ble.n	8007082 <_dtoa_r+0x74a>
 8007070:	42b3      	cmp	r3, r6
 8007072:	9a08      	ldr	r2, [sp, #32]
 8007074:	bfa8      	it	ge
 8007076:	4633      	movge	r3, r6
 8007078:	eba8 0803 	sub.w	r8, r8, r3
 800707c:	1af6      	subs	r6, r6, r3
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	9308      	str	r3, [sp, #32]
 8007082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007084:	b1f3      	cbz	r3, 80070c4 <_dtoa_r+0x78c>
 8007086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80b7 	beq.w	80071fc <_dtoa_r+0x8c4>
 800708e:	b18c      	cbz	r4, 80070b4 <_dtoa_r+0x77c>
 8007090:	4629      	mov	r1, r5
 8007092:	4622      	mov	r2, r4
 8007094:	4658      	mov	r0, fp
 8007096:	f000 fd11 	bl	8007abc <__pow5mult>
 800709a:	464a      	mov	r2, r9
 800709c:	4601      	mov	r1, r0
 800709e:	4605      	mov	r5, r0
 80070a0:	4658      	mov	r0, fp
 80070a2:	f000 fc61 	bl	8007968 <__multiply>
 80070a6:	4649      	mov	r1, r9
 80070a8:	9004      	str	r0, [sp, #16]
 80070aa:	4658      	mov	r0, fp
 80070ac:	f000 fb48 	bl	8007740 <_Bfree>
 80070b0:	9b04      	ldr	r3, [sp, #16]
 80070b2:	4699      	mov	r9, r3
 80070b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070b6:	1b1a      	subs	r2, r3, r4
 80070b8:	d004      	beq.n	80070c4 <_dtoa_r+0x78c>
 80070ba:	4649      	mov	r1, r9
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fcfd 	bl	8007abc <__pow5mult>
 80070c2:	4681      	mov	r9, r0
 80070c4:	2101      	movs	r1, #1
 80070c6:	4658      	mov	r0, fp
 80070c8:	f000 fc38 	bl	800793c <__i2b>
 80070cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ce:	4604      	mov	r4, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 81cf 	beq.w	8007474 <_dtoa_r+0xb3c>
 80070d6:	461a      	mov	r2, r3
 80070d8:	4601      	mov	r1, r0
 80070da:	4658      	mov	r0, fp
 80070dc:	f000 fcee 	bl	8007abc <__pow5mult>
 80070e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	4604      	mov	r4, r0
 80070e6:	f300 8095 	bgt.w	8007214 <_dtoa_r+0x8dc>
 80070ea:	9b02      	ldr	r3, [sp, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 8087 	bne.w	8007200 <_dtoa_r+0x8c8>
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f040 8089 	bne.w	8007210 <_dtoa_r+0x8d8>
 80070fe:	9b03      	ldr	r3, [sp, #12]
 8007100:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007104:	0d1b      	lsrs	r3, r3, #20
 8007106:	051b      	lsls	r3, r3, #20
 8007108:	b12b      	cbz	r3, 8007116 <_dtoa_r+0x7de>
 800710a:	9b08      	ldr	r3, [sp, #32]
 800710c:	3301      	adds	r3, #1
 800710e:	9308      	str	r3, [sp, #32]
 8007110:	f108 0801 	add.w	r8, r8, #1
 8007114:	2301      	movs	r3, #1
 8007116:	930a      	str	r3, [sp, #40]	@ 0x28
 8007118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 81b0 	beq.w	8007480 <_dtoa_r+0xb48>
 8007120:	6923      	ldr	r3, [r4, #16]
 8007122:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007126:	6918      	ldr	r0, [r3, #16]
 8007128:	f000 fbbc 	bl	80078a4 <__hi0bits>
 800712c:	f1c0 0020 	rsb	r0, r0, #32
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	4418      	add	r0, r3
 8007134:	f010 001f 	ands.w	r0, r0, #31
 8007138:	d077      	beq.n	800722a <_dtoa_r+0x8f2>
 800713a:	f1c0 0320 	rsb	r3, r0, #32
 800713e:	2b04      	cmp	r3, #4
 8007140:	dd6b      	ble.n	800721a <_dtoa_r+0x8e2>
 8007142:	9b08      	ldr	r3, [sp, #32]
 8007144:	f1c0 001c 	rsb	r0, r0, #28
 8007148:	4403      	add	r3, r0
 800714a:	4480      	add	r8, r0
 800714c:	4406      	add	r6, r0
 800714e:	9308      	str	r3, [sp, #32]
 8007150:	f1b8 0f00 	cmp.w	r8, #0
 8007154:	dd05      	ble.n	8007162 <_dtoa_r+0x82a>
 8007156:	4649      	mov	r1, r9
 8007158:	4642      	mov	r2, r8
 800715a:	4658      	mov	r0, fp
 800715c:	f000 fd08 	bl	8007b70 <__lshift>
 8007160:	4681      	mov	r9, r0
 8007162:	9b08      	ldr	r3, [sp, #32]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dd05      	ble.n	8007174 <_dtoa_r+0x83c>
 8007168:	4621      	mov	r1, r4
 800716a:	461a      	mov	r2, r3
 800716c:	4658      	mov	r0, fp
 800716e:	f000 fcff 	bl	8007b70 <__lshift>
 8007172:	4604      	mov	r4, r0
 8007174:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007176:	2b00      	cmp	r3, #0
 8007178:	d059      	beq.n	800722e <_dtoa_r+0x8f6>
 800717a:	4621      	mov	r1, r4
 800717c:	4648      	mov	r0, r9
 800717e:	f000 fd63 	bl	8007c48 <__mcmp>
 8007182:	2800      	cmp	r0, #0
 8007184:	da53      	bge.n	800722e <_dtoa_r+0x8f6>
 8007186:	1e7b      	subs	r3, r7, #1
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	4649      	mov	r1, r9
 800718c:	2300      	movs	r3, #0
 800718e:	220a      	movs	r2, #10
 8007190:	4658      	mov	r0, fp
 8007192:	f000 faf7 	bl	8007784 <__multadd>
 8007196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007198:	4681      	mov	r9, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8172 	beq.w	8007484 <_dtoa_r+0xb4c>
 80071a0:	2300      	movs	r3, #0
 80071a2:	4629      	mov	r1, r5
 80071a4:	220a      	movs	r2, #10
 80071a6:	4658      	mov	r0, fp
 80071a8:	f000 faec 	bl	8007784 <__multadd>
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	4605      	mov	r5, r0
 80071b2:	dc67      	bgt.n	8007284 <_dtoa_r+0x94c>
 80071b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	dc41      	bgt.n	800723e <_dtoa_r+0x906>
 80071ba:	e063      	b.n	8007284 <_dtoa_r+0x94c>
 80071bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80071c2:	e746      	b.n	8007052 <_dtoa_r+0x71a>
 80071c4:	9b07      	ldr	r3, [sp, #28]
 80071c6:	1e5c      	subs	r4, r3, #1
 80071c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ca:	42a3      	cmp	r3, r4
 80071cc:	bfbf      	itttt	lt
 80071ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80071d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80071d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80071d4:	1ae3      	sublt	r3, r4, r3
 80071d6:	bfb4      	ite	lt
 80071d8:	18d2      	addlt	r2, r2, r3
 80071da:	1b1c      	subge	r4, r3, r4
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	bfbc      	itt	lt
 80071e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80071e2:	2400      	movlt	r4, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bfb5      	itete	lt
 80071e8:	eba8 0603 	sublt.w	r6, r8, r3
 80071ec:	9b07      	ldrge	r3, [sp, #28]
 80071ee:	2300      	movlt	r3, #0
 80071f0:	4646      	movge	r6, r8
 80071f2:	e730      	b.n	8007056 <_dtoa_r+0x71e>
 80071f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071f8:	4646      	mov	r6, r8
 80071fa:	e735      	b.n	8007068 <_dtoa_r+0x730>
 80071fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071fe:	e75c      	b.n	80070ba <_dtoa_r+0x782>
 8007200:	2300      	movs	r3, #0
 8007202:	e788      	b.n	8007116 <_dtoa_r+0x7de>
 8007204:	3fe00000 	.word	0x3fe00000
 8007208:	40240000 	.word	0x40240000
 800720c:	40140000 	.word	0x40140000
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	e780      	b.n	8007116 <_dtoa_r+0x7de>
 8007214:	2300      	movs	r3, #0
 8007216:	930a      	str	r3, [sp, #40]	@ 0x28
 8007218:	e782      	b.n	8007120 <_dtoa_r+0x7e8>
 800721a:	d099      	beq.n	8007150 <_dtoa_r+0x818>
 800721c:	9a08      	ldr	r2, [sp, #32]
 800721e:	331c      	adds	r3, #28
 8007220:	441a      	add	r2, r3
 8007222:	4498      	add	r8, r3
 8007224:	441e      	add	r6, r3
 8007226:	9208      	str	r2, [sp, #32]
 8007228:	e792      	b.n	8007150 <_dtoa_r+0x818>
 800722a:	4603      	mov	r3, r0
 800722c:	e7f6      	b.n	800721c <_dtoa_r+0x8e4>
 800722e:	9b07      	ldr	r3, [sp, #28]
 8007230:	9704      	str	r7, [sp, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dc20      	bgt.n	8007278 <_dtoa_r+0x940>
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723a:	2b02      	cmp	r3, #2
 800723c:	dd1e      	ble.n	800727c <_dtoa_r+0x944>
 800723e:	9b00      	ldr	r3, [sp, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f47f aec0 	bne.w	8006fc6 <_dtoa_r+0x68e>
 8007246:	4621      	mov	r1, r4
 8007248:	2205      	movs	r2, #5
 800724a:	4658      	mov	r0, fp
 800724c:	f000 fa9a 	bl	8007784 <__multadd>
 8007250:	4601      	mov	r1, r0
 8007252:	4604      	mov	r4, r0
 8007254:	4648      	mov	r0, r9
 8007256:	f000 fcf7 	bl	8007c48 <__mcmp>
 800725a:	2800      	cmp	r0, #0
 800725c:	f77f aeb3 	ble.w	8006fc6 <_dtoa_r+0x68e>
 8007260:	4656      	mov	r6, sl
 8007262:	2331      	movs	r3, #49	@ 0x31
 8007264:	f806 3b01 	strb.w	r3, [r6], #1
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	3301      	adds	r3, #1
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	e6ae      	b.n	8006fce <_dtoa_r+0x696>
 8007270:	9c07      	ldr	r4, [sp, #28]
 8007272:	9704      	str	r7, [sp, #16]
 8007274:	4625      	mov	r5, r4
 8007276:	e7f3      	b.n	8007260 <_dtoa_r+0x928>
 8007278:	9b07      	ldr	r3, [sp, #28]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8104 	beq.w	800748c <_dtoa_r+0xb54>
 8007284:	2e00      	cmp	r6, #0
 8007286:	dd05      	ble.n	8007294 <_dtoa_r+0x95c>
 8007288:	4629      	mov	r1, r5
 800728a:	4632      	mov	r2, r6
 800728c:	4658      	mov	r0, fp
 800728e:	f000 fc6f 	bl	8007b70 <__lshift>
 8007292:	4605      	mov	r5, r0
 8007294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007296:	2b00      	cmp	r3, #0
 8007298:	d05a      	beq.n	8007350 <_dtoa_r+0xa18>
 800729a:	6869      	ldr	r1, [r5, #4]
 800729c:	4658      	mov	r0, fp
 800729e:	f000 fa0f 	bl	80076c0 <_Balloc>
 80072a2:	4606      	mov	r6, r0
 80072a4:	b928      	cbnz	r0, 80072b2 <_dtoa_r+0x97a>
 80072a6:	4b84      	ldr	r3, [pc, #528]	@ (80074b8 <_dtoa_r+0xb80>)
 80072a8:	4602      	mov	r2, r0
 80072aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80072ae:	f7ff bb5a 	b.w	8006966 <_dtoa_r+0x2e>
 80072b2:	692a      	ldr	r2, [r5, #16]
 80072b4:	3202      	adds	r2, #2
 80072b6:	0092      	lsls	r2, r2, #2
 80072b8:	f105 010c 	add.w	r1, r5, #12
 80072bc:	300c      	adds	r0, #12
 80072be:	f001 ff75 	bl	80091ac <memcpy>
 80072c2:	2201      	movs	r2, #1
 80072c4:	4631      	mov	r1, r6
 80072c6:	4658      	mov	r0, fp
 80072c8:	f000 fc52 	bl	8007b70 <__lshift>
 80072cc:	f10a 0301 	add.w	r3, sl, #1
 80072d0:	9307      	str	r3, [sp, #28]
 80072d2:	9b00      	ldr	r3, [sp, #0]
 80072d4:	4453      	add	r3, sl
 80072d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072d8:	9b02      	ldr	r3, [sp, #8]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	462f      	mov	r7, r5
 80072e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072e2:	4605      	mov	r5, r0
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	4621      	mov	r1, r4
 80072e8:	3b01      	subs	r3, #1
 80072ea:	4648      	mov	r0, r9
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	f7ff fa99 	bl	8006824 <quorem>
 80072f2:	4639      	mov	r1, r7
 80072f4:	9002      	str	r0, [sp, #8]
 80072f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072fa:	4648      	mov	r0, r9
 80072fc:	f000 fca4 	bl	8007c48 <__mcmp>
 8007300:	462a      	mov	r2, r5
 8007302:	9008      	str	r0, [sp, #32]
 8007304:	4621      	mov	r1, r4
 8007306:	4658      	mov	r0, fp
 8007308:	f000 fcba 	bl	8007c80 <__mdiff>
 800730c:	68c2      	ldr	r2, [r0, #12]
 800730e:	4606      	mov	r6, r0
 8007310:	bb02      	cbnz	r2, 8007354 <_dtoa_r+0xa1c>
 8007312:	4601      	mov	r1, r0
 8007314:	4648      	mov	r0, r9
 8007316:	f000 fc97 	bl	8007c48 <__mcmp>
 800731a:	4602      	mov	r2, r0
 800731c:	4631      	mov	r1, r6
 800731e:	4658      	mov	r0, fp
 8007320:	920e      	str	r2, [sp, #56]	@ 0x38
 8007322:	f000 fa0d 	bl	8007740 <_Bfree>
 8007326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007328:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800732a:	9e07      	ldr	r6, [sp, #28]
 800732c:	ea43 0102 	orr.w	r1, r3, r2
 8007330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007332:	4319      	orrs	r1, r3
 8007334:	d110      	bne.n	8007358 <_dtoa_r+0xa20>
 8007336:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800733a:	d029      	beq.n	8007390 <_dtoa_r+0xa58>
 800733c:	9b08      	ldr	r3, [sp, #32]
 800733e:	2b00      	cmp	r3, #0
 8007340:	dd02      	ble.n	8007348 <_dtoa_r+0xa10>
 8007342:	9b02      	ldr	r3, [sp, #8]
 8007344:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	f883 8000 	strb.w	r8, [r3]
 800734e:	e63f      	b.n	8006fd0 <_dtoa_r+0x698>
 8007350:	4628      	mov	r0, r5
 8007352:	e7bb      	b.n	80072cc <_dtoa_r+0x994>
 8007354:	2201      	movs	r2, #1
 8007356:	e7e1      	b.n	800731c <_dtoa_r+0x9e4>
 8007358:	9b08      	ldr	r3, [sp, #32]
 800735a:	2b00      	cmp	r3, #0
 800735c:	db04      	blt.n	8007368 <_dtoa_r+0xa30>
 800735e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007360:	430b      	orrs	r3, r1
 8007362:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007364:	430b      	orrs	r3, r1
 8007366:	d120      	bne.n	80073aa <_dtoa_r+0xa72>
 8007368:	2a00      	cmp	r2, #0
 800736a:	dded      	ble.n	8007348 <_dtoa_r+0xa10>
 800736c:	4649      	mov	r1, r9
 800736e:	2201      	movs	r2, #1
 8007370:	4658      	mov	r0, fp
 8007372:	f000 fbfd 	bl	8007b70 <__lshift>
 8007376:	4621      	mov	r1, r4
 8007378:	4681      	mov	r9, r0
 800737a:	f000 fc65 	bl	8007c48 <__mcmp>
 800737e:	2800      	cmp	r0, #0
 8007380:	dc03      	bgt.n	800738a <_dtoa_r+0xa52>
 8007382:	d1e1      	bne.n	8007348 <_dtoa_r+0xa10>
 8007384:	f018 0f01 	tst.w	r8, #1
 8007388:	d0de      	beq.n	8007348 <_dtoa_r+0xa10>
 800738a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800738e:	d1d8      	bne.n	8007342 <_dtoa_r+0xa0a>
 8007390:	9a00      	ldr	r2, [sp, #0]
 8007392:	2339      	movs	r3, #57	@ 0x39
 8007394:	7013      	strb	r3, [r2, #0]
 8007396:	4633      	mov	r3, r6
 8007398:	461e      	mov	r6, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80073a0:	2a39      	cmp	r2, #57	@ 0x39
 80073a2:	d052      	beq.n	800744a <_dtoa_r+0xb12>
 80073a4:	3201      	adds	r2, #1
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e612      	b.n	8006fd0 <_dtoa_r+0x698>
 80073aa:	2a00      	cmp	r2, #0
 80073ac:	dd07      	ble.n	80073be <_dtoa_r+0xa86>
 80073ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073b2:	d0ed      	beq.n	8007390 <_dtoa_r+0xa58>
 80073b4:	9a00      	ldr	r2, [sp, #0]
 80073b6:	f108 0301 	add.w	r3, r8, #1
 80073ba:	7013      	strb	r3, [r2, #0]
 80073bc:	e608      	b.n	8006fd0 <_dtoa_r+0x698>
 80073be:	9b07      	ldr	r3, [sp, #28]
 80073c0:	9a07      	ldr	r2, [sp, #28]
 80073c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80073c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d028      	beq.n	800741e <_dtoa_r+0xae6>
 80073cc:	4649      	mov	r1, r9
 80073ce:	2300      	movs	r3, #0
 80073d0:	220a      	movs	r2, #10
 80073d2:	4658      	mov	r0, fp
 80073d4:	f000 f9d6 	bl	8007784 <__multadd>
 80073d8:	42af      	cmp	r7, r5
 80073da:	4681      	mov	r9, r0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	f04f 020a 	mov.w	r2, #10
 80073e4:	4639      	mov	r1, r7
 80073e6:	4658      	mov	r0, fp
 80073e8:	d107      	bne.n	80073fa <_dtoa_r+0xac2>
 80073ea:	f000 f9cb 	bl	8007784 <__multadd>
 80073ee:	4607      	mov	r7, r0
 80073f0:	4605      	mov	r5, r0
 80073f2:	9b07      	ldr	r3, [sp, #28]
 80073f4:	3301      	adds	r3, #1
 80073f6:	9307      	str	r3, [sp, #28]
 80073f8:	e774      	b.n	80072e4 <_dtoa_r+0x9ac>
 80073fa:	f000 f9c3 	bl	8007784 <__multadd>
 80073fe:	4629      	mov	r1, r5
 8007400:	4607      	mov	r7, r0
 8007402:	2300      	movs	r3, #0
 8007404:	220a      	movs	r2, #10
 8007406:	4658      	mov	r0, fp
 8007408:	f000 f9bc 	bl	8007784 <__multadd>
 800740c:	4605      	mov	r5, r0
 800740e:	e7f0      	b.n	80073f2 <_dtoa_r+0xaba>
 8007410:	9b00      	ldr	r3, [sp, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	bfcc      	ite	gt
 8007416:	461e      	movgt	r6, r3
 8007418:	2601      	movle	r6, #1
 800741a:	4456      	add	r6, sl
 800741c:	2700      	movs	r7, #0
 800741e:	4649      	mov	r1, r9
 8007420:	2201      	movs	r2, #1
 8007422:	4658      	mov	r0, fp
 8007424:	f000 fba4 	bl	8007b70 <__lshift>
 8007428:	4621      	mov	r1, r4
 800742a:	4681      	mov	r9, r0
 800742c:	f000 fc0c 	bl	8007c48 <__mcmp>
 8007430:	2800      	cmp	r0, #0
 8007432:	dcb0      	bgt.n	8007396 <_dtoa_r+0xa5e>
 8007434:	d102      	bne.n	800743c <_dtoa_r+0xb04>
 8007436:	f018 0f01 	tst.w	r8, #1
 800743a:	d1ac      	bne.n	8007396 <_dtoa_r+0xa5e>
 800743c:	4633      	mov	r3, r6
 800743e:	461e      	mov	r6, r3
 8007440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007444:	2a30      	cmp	r2, #48	@ 0x30
 8007446:	d0fa      	beq.n	800743e <_dtoa_r+0xb06>
 8007448:	e5c2      	b.n	8006fd0 <_dtoa_r+0x698>
 800744a:	459a      	cmp	sl, r3
 800744c:	d1a4      	bne.n	8007398 <_dtoa_r+0xa60>
 800744e:	9b04      	ldr	r3, [sp, #16]
 8007450:	3301      	adds	r3, #1
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	2331      	movs	r3, #49	@ 0x31
 8007456:	f88a 3000 	strb.w	r3, [sl]
 800745a:	e5b9      	b.n	8006fd0 <_dtoa_r+0x698>
 800745c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800745e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80074bc <_dtoa_r+0xb84>
 8007462:	b11b      	cbz	r3, 800746c <_dtoa_r+0xb34>
 8007464:	f10a 0308 	add.w	r3, sl, #8
 8007468:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	4650      	mov	r0, sl
 800746e:	b019      	add	sp, #100	@ 0x64
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007476:	2b01      	cmp	r3, #1
 8007478:	f77f ae37 	ble.w	80070ea <_dtoa_r+0x7b2>
 800747c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800747e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007480:	2001      	movs	r0, #1
 8007482:	e655      	b.n	8007130 <_dtoa_r+0x7f8>
 8007484:	9b00      	ldr	r3, [sp, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f77f aed6 	ble.w	8007238 <_dtoa_r+0x900>
 800748c:	4656      	mov	r6, sl
 800748e:	4621      	mov	r1, r4
 8007490:	4648      	mov	r0, r9
 8007492:	f7ff f9c7 	bl	8006824 <quorem>
 8007496:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800749a:	f806 8b01 	strb.w	r8, [r6], #1
 800749e:	9b00      	ldr	r3, [sp, #0]
 80074a0:	eba6 020a 	sub.w	r2, r6, sl
 80074a4:	4293      	cmp	r3, r2
 80074a6:	ddb3      	ble.n	8007410 <_dtoa_r+0xad8>
 80074a8:	4649      	mov	r1, r9
 80074aa:	2300      	movs	r3, #0
 80074ac:	220a      	movs	r2, #10
 80074ae:	4658      	mov	r0, fp
 80074b0:	f000 f968 	bl	8007784 <__multadd>
 80074b4:	4681      	mov	r9, r0
 80074b6:	e7ea      	b.n	800748e <_dtoa_r+0xb56>
 80074b8:	0800a735 	.word	0x0800a735
 80074bc:	0800a6b9 	.word	0x0800a6b9

080074c0 <_free_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4605      	mov	r5, r0
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d041      	beq.n	800754c <_free_r+0x8c>
 80074c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074cc:	1f0c      	subs	r4, r1, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfb8      	it	lt
 80074d2:	18e4      	addlt	r4, r4, r3
 80074d4:	f000 f8e8 	bl	80076a8 <__malloc_lock>
 80074d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007550 <_free_r+0x90>)
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	b933      	cbnz	r3, 80074ec <_free_r+0x2c>
 80074de:	6063      	str	r3, [r4, #4]
 80074e0:	6014      	str	r4, [r2, #0]
 80074e2:	4628      	mov	r0, r5
 80074e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e8:	f000 b8e4 	b.w	80076b4 <__malloc_unlock>
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d908      	bls.n	8007502 <_free_r+0x42>
 80074f0:	6820      	ldr	r0, [r4, #0]
 80074f2:	1821      	adds	r1, r4, r0
 80074f4:	428b      	cmp	r3, r1
 80074f6:	bf01      	itttt	eq
 80074f8:	6819      	ldreq	r1, [r3, #0]
 80074fa:	685b      	ldreq	r3, [r3, #4]
 80074fc:	1809      	addeq	r1, r1, r0
 80074fe:	6021      	streq	r1, [r4, #0]
 8007500:	e7ed      	b.n	80074de <_free_r+0x1e>
 8007502:	461a      	mov	r2, r3
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	b10b      	cbz	r3, 800750c <_free_r+0x4c>
 8007508:	42a3      	cmp	r3, r4
 800750a:	d9fa      	bls.n	8007502 <_free_r+0x42>
 800750c:	6811      	ldr	r1, [r2, #0]
 800750e:	1850      	adds	r0, r2, r1
 8007510:	42a0      	cmp	r0, r4
 8007512:	d10b      	bne.n	800752c <_free_r+0x6c>
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	4401      	add	r1, r0
 8007518:	1850      	adds	r0, r2, r1
 800751a:	4283      	cmp	r3, r0
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	d1e0      	bne.n	80074e2 <_free_r+0x22>
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	6053      	str	r3, [r2, #4]
 8007526:	4408      	add	r0, r1
 8007528:	6010      	str	r0, [r2, #0]
 800752a:	e7da      	b.n	80074e2 <_free_r+0x22>
 800752c:	d902      	bls.n	8007534 <_free_r+0x74>
 800752e:	230c      	movs	r3, #12
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	e7d6      	b.n	80074e2 <_free_r+0x22>
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	1821      	adds	r1, r4, r0
 8007538:	428b      	cmp	r3, r1
 800753a:	bf04      	itt	eq
 800753c:	6819      	ldreq	r1, [r3, #0]
 800753e:	685b      	ldreq	r3, [r3, #4]
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	bf04      	itt	eq
 8007544:	1809      	addeq	r1, r1, r0
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	6054      	str	r4, [r2, #4]
 800754a:	e7ca      	b.n	80074e2 <_free_r+0x22>
 800754c:	bd38      	pop	{r3, r4, r5, pc}
 800754e:	bf00      	nop
 8007550:	20000840 	.word	0x20000840

08007554 <malloc>:
 8007554:	4b02      	ldr	r3, [pc, #8]	@ (8007560 <malloc+0xc>)
 8007556:	4601      	mov	r1, r0
 8007558:	6818      	ldr	r0, [r3, #0]
 800755a:	f000 b825 	b.w	80075a8 <_malloc_r>
 800755e:	bf00      	nop
 8007560:	20000034 	.word	0x20000034

08007564 <sbrk_aligned>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	4e0f      	ldr	r6, [pc, #60]	@ (80075a4 <sbrk_aligned+0x40>)
 8007568:	460c      	mov	r4, r1
 800756a:	6831      	ldr	r1, [r6, #0]
 800756c:	4605      	mov	r5, r0
 800756e:	b911      	cbnz	r1, 8007576 <sbrk_aligned+0x12>
 8007570:	f001 fe0c 	bl	800918c <_sbrk_r>
 8007574:	6030      	str	r0, [r6, #0]
 8007576:	4621      	mov	r1, r4
 8007578:	4628      	mov	r0, r5
 800757a:	f001 fe07 	bl	800918c <_sbrk_r>
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	d103      	bne.n	800758a <sbrk_aligned+0x26>
 8007582:	f04f 34ff 	mov.w	r4, #4294967295
 8007586:	4620      	mov	r0, r4
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	1cc4      	adds	r4, r0, #3
 800758c:	f024 0403 	bic.w	r4, r4, #3
 8007590:	42a0      	cmp	r0, r4
 8007592:	d0f8      	beq.n	8007586 <sbrk_aligned+0x22>
 8007594:	1a21      	subs	r1, r4, r0
 8007596:	4628      	mov	r0, r5
 8007598:	f001 fdf8 	bl	800918c <_sbrk_r>
 800759c:	3001      	adds	r0, #1
 800759e:	d1f2      	bne.n	8007586 <sbrk_aligned+0x22>
 80075a0:	e7ef      	b.n	8007582 <sbrk_aligned+0x1e>
 80075a2:	bf00      	nop
 80075a4:	2000083c 	.word	0x2000083c

080075a8 <_malloc_r>:
 80075a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ac:	1ccd      	adds	r5, r1, #3
 80075ae:	f025 0503 	bic.w	r5, r5, #3
 80075b2:	3508      	adds	r5, #8
 80075b4:	2d0c      	cmp	r5, #12
 80075b6:	bf38      	it	cc
 80075b8:	250c      	movcc	r5, #12
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	4606      	mov	r6, r0
 80075be:	db01      	blt.n	80075c4 <_malloc_r+0x1c>
 80075c0:	42a9      	cmp	r1, r5
 80075c2:	d904      	bls.n	80075ce <_malloc_r+0x26>
 80075c4:	230c      	movs	r3, #12
 80075c6:	6033      	str	r3, [r6, #0]
 80075c8:	2000      	movs	r0, #0
 80075ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076a4 <_malloc_r+0xfc>
 80075d2:	f000 f869 	bl	80076a8 <__malloc_lock>
 80075d6:	f8d8 3000 	ldr.w	r3, [r8]
 80075da:	461c      	mov	r4, r3
 80075dc:	bb44      	cbnz	r4, 8007630 <_malloc_r+0x88>
 80075de:	4629      	mov	r1, r5
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7ff ffbf 	bl	8007564 <sbrk_aligned>
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	4604      	mov	r4, r0
 80075ea:	d158      	bne.n	800769e <_malloc_r+0xf6>
 80075ec:	f8d8 4000 	ldr.w	r4, [r8]
 80075f0:	4627      	mov	r7, r4
 80075f2:	2f00      	cmp	r7, #0
 80075f4:	d143      	bne.n	800767e <_malloc_r+0xd6>
 80075f6:	2c00      	cmp	r4, #0
 80075f8:	d04b      	beq.n	8007692 <_malloc_r+0xea>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	4639      	mov	r1, r7
 80075fe:	4630      	mov	r0, r6
 8007600:	eb04 0903 	add.w	r9, r4, r3
 8007604:	f001 fdc2 	bl	800918c <_sbrk_r>
 8007608:	4581      	cmp	r9, r0
 800760a:	d142      	bne.n	8007692 <_malloc_r+0xea>
 800760c:	6821      	ldr	r1, [r4, #0]
 800760e:	1a6d      	subs	r5, r5, r1
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f7ff ffa6 	bl	8007564 <sbrk_aligned>
 8007618:	3001      	adds	r0, #1
 800761a:	d03a      	beq.n	8007692 <_malloc_r+0xea>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	442b      	add	r3, r5
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	f8d8 3000 	ldr.w	r3, [r8]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	bb62      	cbnz	r2, 8007684 <_malloc_r+0xdc>
 800762a:	f8c8 7000 	str.w	r7, [r8]
 800762e:	e00f      	b.n	8007650 <_malloc_r+0xa8>
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	1b52      	subs	r2, r2, r5
 8007634:	d420      	bmi.n	8007678 <_malloc_r+0xd0>
 8007636:	2a0b      	cmp	r2, #11
 8007638:	d917      	bls.n	800766a <_malloc_r+0xc2>
 800763a:	1961      	adds	r1, r4, r5
 800763c:	42a3      	cmp	r3, r4
 800763e:	6025      	str	r5, [r4, #0]
 8007640:	bf18      	it	ne
 8007642:	6059      	strne	r1, [r3, #4]
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	bf08      	it	eq
 8007648:	f8c8 1000 	streq.w	r1, [r8]
 800764c:	5162      	str	r2, [r4, r5]
 800764e:	604b      	str	r3, [r1, #4]
 8007650:	4630      	mov	r0, r6
 8007652:	f000 f82f 	bl	80076b4 <__malloc_unlock>
 8007656:	f104 000b 	add.w	r0, r4, #11
 800765a:	1d23      	adds	r3, r4, #4
 800765c:	f020 0007 	bic.w	r0, r0, #7
 8007660:	1ac2      	subs	r2, r0, r3
 8007662:	bf1c      	itt	ne
 8007664:	1a1b      	subne	r3, r3, r0
 8007666:	50a3      	strne	r3, [r4, r2]
 8007668:	e7af      	b.n	80075ca <_malloc_r+0x22>
 800766a:	6862      	ldr	r2, [r4, #4]
 800766c:	42a3      	cmp	r3, r4
 800766e:	bf0c      	ite	eq
 8007670:	f8c8 2000 	streq.w	r2, [r8]
 8007674:	605a      	strne	r2, [r3, #4]
 8007676:	e7eb      	b.n	8007650 <_malloc_r+0xa8>
 8007678:	4623      	mov	r3, r4
 800767a:	6864      	ldr	r4, [r4, #4]
 800767c:	e7ae      	b.n	80075dc <_malloc_r+0x34>
 800767e:	463c      	mov	r4, r7
 8007680:	687f      	ldr	r7, [r7, #4]
 8007682:	e7b6      	b.n	80075f2 <_malloc_r+0x4a>
 8007684:	461a      	mov	r2, r3
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	42a3      	cmp	r3, r4
 800768a:	d1fb      	bne.n	8007684 <_malloc_r+0xdc>
 800768c:	2300      	movs	r3, #0
 800768e:	6053      	str	r3, [r2, #4]
 8007690:	e7de      	b.n	8007650 <_malloc_r+0xa8>
 8007692:	230c      	movs	r3, #12
 8007694:	6033      	str	r3, [r6, #0]
 8007696:	4630      	mov	r0, r6
 8007698:	f000 f80c 	bl	80076b4 <__malloc_unlock>
 800769c:	e794      	b.n	80075c8 <_malloc_r+0x20>
 800769e:	6005      	str	r5, [r0, #0]
 80076a0:	e7d6      	b.n	8007650 <_malloc_r+0xa8>
 80076a2:	bf00      	nop
 80076a4:	20000840 	.word	0x20000840

080076a8 <__malloc_lock>:
 80076a8:	4801      	ldr	r0, [pc, #4]	@ (80076b0 <__malloc_lock+0x8>)
 80076aa:	f7ff b8b2 	b.w	8006812 <__retarget_lock_acquire_recursive>
 80076ae:	bf00      	nop
 80076b0:	20000838 	.word	0x20000838

080076b4 <__malloc_unlock>:
 80076b4:	4801      	ldr	r0, [pc, #4]	@ (80076bc <__malloc_unlock+0x8>)
 80076b6:	f7ff b8ad 	b.w	8006814 <__retarget_lock_release_recursive>
 80076ba:	bf00      	nop
 80076bc:	20000838 	.word	0x20000838

080076c0 <_Balloc>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	69c6      	ldr	r6, [r0, #28]
 80076c4:	4604      	mov	r4, r0
 80076c6:	460d      	mov	r5, r1
 80076c8:	b976      	cbnz	r6, 80076e8 <_Balloc+0x28>
 80076ca:	2010      	movs	r0, #16
 80076cc:	f7ff ff42 	bl	8007554 <malloc>
 80076d0:	4602      	mov	r2, r0
 80076d2:	61e0      	str	r0, [r4, #28]
 80076d4:	b920      	cbnz	r0, 80076e0 <_Balloc+0x20>
 80076d6:	4b18      	ldr	r3, [pc, #96]	@ (8007738 <_Balloc+0x78>)
 80076d8:	4818      	ldr	r0, [pc, #96]	@ (800773c <_Balloc+0x7c>)
 80076da:	216b      	movs	r1, #107	@ 0x6b
 80076dc:	f001 fd7c 	bl	80091d8 <__assert_func>
 80076e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076e4:	6006      	str	r6, [r0, #0]
 80076e6:	60c6      	str	r6, [r0, #12]
 80076e8:	69e6      	ldr	r6, [r4, #28]
 80076ea:	68f3      	ldr	r3, [r6, #12]
 80076ec:	b183      	cbz	r3, 8007710 <_Balloc+0x50>
 80076ee:	69e3      	ldr	r3, [r4, #28]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076f6:	b9b8      	cbnz	r0, 8007728 <_Balloc+0x68>
 80076f8:	2101      	movs	r1, #1
 80076fa:	fa01 f605 	lsl.w	r6, r1, r5
 80076fe:	1d72      	adds	r2, r6, #5
 8007700:	0092      	lsls	r2, r2, #2
 8007702:	4620      	mov	r0, r4
 8007704:	f001 fd86 	bl	8009214 <_calloc_r>
 8007708:	b160      	cbz	r0, 8007724 <_Balloc+0x64>
 800770a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800770e:	e00e      	b.n	800772e <_Balloc+0x6e>
 8007710:	2221      	movs	r2, #33	@ 0x21
 8007712:	2104      	movs	r1, #4
 8007714:	4620      	mov	r0, r4
 8007716:	f001 fd7d 	bl	8009214 <_calloc_r>
 800771a:	69e3      	ldr	r3, [r4, #28]
 800771c:	60f0      	str	r0, [r6, #12]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e4      	bne.n	80076ee <_Balloc+0x2e>
 8007724:	2000      	movs	r0, #0
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	6802      	ldr	r2, [r0, #0]
 800772a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800772e:	2300      	movs	r3, #0
 8007730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007734:	e7f7      	b.n	8007726 <_Balloc+0x66>
 8007736:	bf00      	nop
 8007738:	0800a6c6 	.word	0x0800a6c6
 800773c:	0800a746 	.word	0x0800a746

08007740 <_Bfree>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	69c6      	ldr	r6, [r0, #28]
 8007744:	4605      	mov	r5, r0
 8007746:	460c      	mov	r4, r1
 8007748:	b976      	cbnz	r6, 8007768 <_Bfree+0x28>
 800774a:	2010      	movs	r0, #16
 800774c:	f7ff ff02 	bl	8007554 <malloc>
 8007750:	4602      	mov	r2, r0
 8007752:	61e8      	str	r0, [r5, #28]
 8007754:	b920      	cbnz	r0, 8007760 <_Bfree+0x20>
 8007756:	4b09      	ldr	r3, [pc, #36]	@ (800777c <_Bfree+0x3c>)
 8007758:	4809      	ldr	r0, [pc, #36]	@ (8007780 <_Bfree+0x40>)
 800775a:	218f      	movs	r1, #143	@ 0x8f
 800775c:	f001 fd3c 	bl	80091d8 <__assert_func>
 8007760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007764:	6006      	str	r6, [r0, #0]
 8007766:	60c6      	str	r6, [r0, #12]
 8007768:	b13c      	cbz	r4, 800777a <_Bfree+0x3a>
 800776a:	69eb      	ldr	r3, [r5, #28]
 800776c:	6862      	ldr	r2, [r4, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007774:	6021      	str	r1, [r4, #0]
 8007776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	0800a6c6 	.word	0x0800a6c6
 8007780:	0800a746 	.word	0x0800a746

08007784 <__multadd>:
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	690d      	ldr	r5, [r1, #16]
 800778a:	4607      	mov	r7, r0
 800778c:	460c      	mov	r4, r1
 800778e:	461e      	mov	r6, r3
 8007790:	f101 0c14 	add.w	ip, r1, #20
 8007794:	2000      	movs	r0, #0
 8007796:	f8dc 3000 	ldr.w	r3, [ip]
 800779a:	b299      	uxth	r1, r3
 800779c:	fb02 6101 	mla	r1, r2, r1, r6
 80077a0:	0c1e      	lsrs	r6, r3, #16
 80077a2:	0c0b      	lsrs	r3, r1, #16
 80077a4:	fb02 3306 	mla	r3, r2, r6, r3
 80077a8:	b289      	uxth	r1, r1
 80077aa:	3001      	adds	r0, #1
 80077ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077b0:	4285      	cmp	r5, r0
 80077b2:	f84c 1b04 	str.w	r1, [ip], #4
 80077b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ba:	dcec      	bgt.n	8007796 <__multadd+0x12>
 80077bc:	b30e      	cbz	r6, 8007802 <__multadd+0x7e>
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dc19      	bgt.n	80077f8 <__multadd+0x74>
 80077c4:	6861      	ldr	r1, [r4, #4]
 80077c6:	4638      	mov	r0, r7
 80077c8:	3101      	adds	r1, #1
 80077ca:	f7ff ff79 	bl	80076c0 <_Balloc>
 80077ce:	4680      	mov	r8, r0
 80077d0:	b928      	cbnz	r0, 80077de <__multadd+0x5a>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007808 <__multadd+0x84>)
 80077d6:	480d      	ldr	r0, [pc, #52]	@ (800780c <__multadd+0x88>)
 80077d8:	21ba      	movs	r1, #186	@ 0xba
 80077da:	f001 fcfd 	bl	80091d8 <__assert_func>
 80077de:	6922      	ldr	r2, [r4, #16]
 80077e0:	3202      	adds	r2, #2
 80077e2:	f104 010c 	add.w	r1, r4, #12
 80077e6:	0092      	lsls	r2, r2, #2
 80077e8:	300c      	adds	r0, #12
 80077ea:	f001 fcdf 	bl	80091ac <memcpy>
 80077ee:	4621      	mov	r1, r4
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ffa5 	bl	8007740 <_Bfree>
 80077f6:	4644      	mov	r4, r8
 80077f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077fc:	3501      	adds	r5, #1
 80077fe:	615e      	str	r6, [r3, #20]
 8007800:	6125      	str	r5, [r4, #16]
 8007802:	4620      	mov	r0, r4
 8007804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007808:	0800a735 	.word	0x0800a735
 800780c:	0800a746 	.word	0x0800a746

08007810 <__s2b>:
 8007810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007814:	460c      	mov	r4, r1
 8007816:	4615      	mov	r5, r2
 8007818:	461f      	mov	r7, r3
 800781a:	2209      	movs	r2, #9
 800781c:	3308      	adds	r3, #8
 800781e:	4606      	mov	r6, r0
 8007820:	fb93 f3f2 	sdiv	r3, r3, r2
 8007824:	2100      	movs	r1, #0
 8007826:	2201      	movs	r2, #1
 8007828:	429a      	cmp	r2, r3
 800782a:	db09      	blt.n	8007840 <__s2b+0x30>
 800782c:	4630      	mov	r0, r6
 800782e:	f7ff ff47 	bl	80076c0 <_Balloc>
 8007832:	b940      	cbnz	r0, 8007846 <__s2b+0x36>
 8007834:	4602      	mov	r2, r0
 8007836:	4b19      	ldr	r3, [pc, #100]	@ (800789c <__s2b+0x8c>)
 8007838:	4819      	ldr	r0, [pc, #100]	@ (80078a0 <__s2b+0x90>)
 800783a:	21d3      	movs	r1, #211	@ 0xd3
 800783c:	f001 fccc 	bl	80091d8 <__assert_func>
 8007840:	0052      	lsls	r2, r2, #1
 8007842:	3101      	adds	r1, #1
 8007844:	e7f0      	b.n	8007828 <__s2b+0x18>
 8007846:	9b08      	ldr	r3, [sp, #32]
 8007848:	6143      	str	r3, [r0, #20]
 800784a:	2d09      	cmp	r5, #9
 800784c:	f04f 0301 	mov.w	r3, #1
 8007850:	6103      	str	r3, [r0, #16]
 8007852:	dd16      	ble.n	8007882 <__s2b+0x72>
 8007854:	f104 0909 	add.w	r9, r4, #9
 8007858:	46c8      	mov	r8, r9
 800785a:	442c      	add	r4, r5
 800785c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007860:	4601      	mov	r1, r0
 8007862:	3b30      	subs	r3, #48	@ 0x30
 8007864:	220a      	movs	r2, #10
 8007866:	4630      	mov	r0, r6
 8007868:	f7ff ff8c 	bl	8007784 <__multadd>
 800786c:	45a0      	cmp	r8, r4
 800786e:	d1f5      	bne.n	800785c <__s2b+0x4c>
 8007870:	f1a5 0408 	sub.w	r4, r5, #8
 8007874:	444c      	add	r4, r9
 8007876:	1b2d      	subs	r5, r5, r4
 8007878:	1963      	adds	r3, r4, r5
 800787a:	42bb      	cmp	r3, r7
 800787c:	db04      	blt.n	8007888 <__s2b+0x78>
 800787e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007882:	340a      	adds	r4, #10
 8007884:	2509      	movs	r5, #9
 8007886:	e7f6      	b.n	8007876 <__s2b+0x66>
 8007888:	f814 3b01 	ldrb.w	r3, [r4], #1
 800788c:	4601      	mov	r1, r0
 800788e:	3b30      	subs	r3, #48	@ 0x30
 8007890:	220a      	movs	r2, #10
 8007892:	4630      	mov	r0, r6
 8007894:	f7ff ff76 	bl	8007784 <__multadd>
 8007898:	e7ee      	b.n	8007878 <__s2b+0x68>
 800789a:	bf00      	nop
 800789c:	0800a735 	.word	0x0800a735
 80078a0:	0800a746 	.word	0x0800a746

080078a4 <__hi0bits>:
 80078a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80078a8:	4603      	mov	r3, r0
 80078aa:	bf36      	itet	cc
 80078ac:	0403      	lslcc	r3, r0, #16
 80078ae:	2000      	movcs	r0, #0
 80078b0:	2010      	movcc	r0, #16
 80078b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078b6:	bf3c      	itt	cc
 80078b8:	021b      	lslcc	r3, r3, #8
 80078ba:	3008      	addcc	r0, #8
 80078bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078c0:	bf3c      	itt	cc
 80078c2:	011b      	lslcc	r3, r3, #4
 80078c4:	3004      	addcc	r0, #4
 80078c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ca:	bf3c      	itt	cc
 80078cc:	009b      	lslcc	r3, r3, #2
 80078ce:	3002      	addcc	r0, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	db05      	blt.n	80078e0 <__hi0bits+0x3c>
 80078d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80078d8:	f100 0001 	add.w	r0, r0, #1
 80078dc:	bf08      	it	eq
 80078de:	2020      	moveq	r0, #32
 80078e0:	4770      	bx	lr

080078e2 <__lo0bits>:
 80078e2:	6803      	ldr	r3, [r0, #0]
 80078e4:	4602      	mov	r2, r0
 80078e6:	f013 0007 	ands.w	r0, r3, #7
 80078ea:	d00b      	beq.n	8007904 <__lo0bits+0x22>
 80078ec:	07d9      	lsls	r1, r3, #31
 80078ee:	d421      	bmi.n	8007934 <__lo0bits+0x52>
 80078f0:	0798      	lsls	r0, r3, #30
 80078f2:	bf49      	itett	mi
 80078f4:	085b      	lsrmi	r3, r3, #1
 80078f6:	089b      	lsrpl	r3, r3, #2
 80078f8:	2001      	movmi	r0, #1
 80078fa:	6013      	strmi	r3, [r2, #0]
 80078fc:	bf5c      	itt	pl
 80078fe:	6013      	strpl	r3, [r2, #0]
 8007900:	2002      	movpl	r0, #2
 8007902:	4770      	bx	lr
 8007904:	b299      	uxth	r1, r3
 8007906:	b909      	cbnz	r1, 800790c <__lo0bits+0x2a>
 8007908:	0c1b      	lsrs	r3, r3, #16
 800790a:	2010      	movs	r0, #16
 800790c:	b2d9      	uxtb	r1, r3
 800790e:	b909      	cbnz	r1, 8007914 <__lo0bits+0x32>
 8007910:	3008      	adds	r0, #8
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	0719      	lsls	r1, r3, #28
 8007916:	bf04      	itt	eq
 8007918:	091b      	lsreq	r3, r3, #4
 800791a:	3004      	addeq	r0, #4
 800791c:	0799      	lsls	r1, r3, #30
 800791e:	bf04      	itt	eq
 8007920:	089b      	lsreq	r3, r3, #2
 8007922:	3002      	addeq	r0, #2
 8007924:	07d9      	lsls	r1, r3, #31
 8007926:	d403      	bmi.n	8007930 <__lo0bits+0x4e>
 8007928:	085b      	lsrs	r3, r3, #1
 800792a:	f100 0001 	add.w	r0, r0, #1
 800792e:	d003      	beq.n	8007938 <__lo0bits+0x56>
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	4770      	bx	lr
 8007934:	2000      	movs	r0, #0
 8007936:	4770      	bx	lr
 8007938:	2020      	movs	r0, #32
 800793a:	4770      	bx	lr

0800793c <__i2b>:
 800793c:	b510      	push	{r4, lr}
 800793e:	460c      	mov	r4, r1
 8007940:	2101      	movs	r1, #1
 8007942:	f7ff febd 	bl	80076c0 <_Balloc>
 8007946:	4602      	mov	r2, r0
 8007948:	b928      	cbnz	r0, 8007956 <__i2b+0x1a>
 800794a:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <__i2b+0x24>)
 800794c:	4805      	ldr	r0, [pc, #20]	@ (8007964 <__i2b+0x28>)
 800794e:	f240 1145 	movw	r1, #325	@ 0x145
 8007952:	f001 fc41 	bl	80091d8 <__assert_func>
 8007956:	2301      	movs	r3, #1
 8007958:	6144      	str	r4, [r0, #20]
 800795a:	6103      	str	r3, [r0, #16]
 800795c:	bd10      	pop	{r4, pc}
 800795e:	bf00      	nop
 8007960:	0800a735 	.word	0x0800a735
 8007964:	0800a746 	.word	0x0800a746

08007968 <__multiply>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	4614      	mov	r4, r2
 800796e:	690a      	ldr	r2, [r1, #16]
 8007970:	6923      	ldr	r3, [r4, #16]
 8007972:	429a      	cmp	r2, r3
 8007974:	bfa8      	it	ge
 8007976:	4623      	movge	r3, r4
 8007978:	460f      	mov	r7, r1
 800797a:	bfa4      	itt	ge
 800797c:	460c      	movge	r4, r1
 800797e:	461f      	movge	r7, r3
 8007980:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007984:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007988:	68a3      	ldr	r3, [r4, #8]
 800798a:	6861      	ldr	r1, [r4, #4]
 800798c:	eb0a 0609 	add.w	r6, sl, r9
 8007990:	42b3      	cmp	r3, r6
 8007992:	b085      	sub	sp, #20
 8007994:	bfb8      	it	lt
 8007996:	3101      	addlt	r1, #1
 8007998:	f7ff fe92 	bl	80076c0 <_Balloc>
 800799c:	b930      	cbnz	r0, 80079ac <__multiply+0x44>
 800799e:	4602      	mov	r2, r0
 80079a0:	4b44      	ldr	r3, [pc, #272]	@ (8007ab4 <__multiply+0x14c>)
 80079a2:	4845      	ldr	r0, [pc, #276]	@ (8007ab8 <__multiply+0x150>)
 80079a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80079a8:	f001 fc16 	bl	80091d8 <__assert_func>
 80079ac:	f100 0514 	add.w	r5, r0, #20
 80079b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079b4:	462b      	mov	r3, r5
 80079b6:	2200      	movs	r2, #0
 80079b8:	4543      	cmp	r3, r8
 80079ba:	d321      	bcc.n	8007a00 <__multiply+0x98>
 80079bc:	f107 0114 	add.w	r1, r7, #20
 80079c0:	f104 0214 	add.w	r2, r4, #20
 80079c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80079c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80079cc:	9302      	str	r3, [sp, #8]
 80079ce:	1b13      	subs	r3, r2, r4
 80079d0:	3b15      	subs	r3, #21
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	3304      	adds	r3, #4
 80079d8:	f104 0715 	add.w	r7, r4, #21
 80079dc:	42ba      	cmp	r2, r7
 80079de:	bf38      	it	cc
 80079e0:	2304      	movcc	r3, #4
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	9b02      	ldr	r3, [sp, #8]
 80079e6:	9103      	str	r1, [sp, #12]
 80079e8:	428b      	cmp	r3, r1
 80079ea:	d80c      	bhi.n	8007a06 <__multiply+0x9e>
 80079ec:	2e00      	cmp	r6, #0
 80079ee:	dd03      	ble.n	80079f8 <__multiply+0x90>
 80079f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d05b      	beq.n	8007ab0 <__multiply+0x148>
 80079f8:	6106      	str	r6, [r0, #16]
 80079fa:	b005      	add	sp, #20
 80079fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a00:	f843 2b04 	str.w	r2, [r3], #4
 8007a04:	e7d8      	b.n	80079b8 <__multiply+0x50>
 8007a06:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a0a:	f1ba 0f00 	cmp.w	sl, #0
 8007a0e:	d024      	beq.n	8007a5a <__multiply+0xf2>
 8007a10:	f104 0e14 	add.w	lr, r4, #20
 8007a14:	46a9      	mov	r9, r5
 8007a16:	f04f 0c00 	mov.w	ip, #0
 8007a1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a1e:	f8d9 3000 	ldr.w	r3, [r9]
 8007a22:	fa1f fb87 	uxth.w	fp, r7
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	fb0a 330b 	mla	r3, sl, fp, r3
 8007a2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007a30:	f8d9 7000 	ldr.w	r7, [r9]
 8007a34:	4463      	add	r3, ip
 8007a36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a3a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007a3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a48:	4572      	cmp	r2, lr
 8007a4a:	f849 3b04 	str.w	r3, [r9], #4
 8007a4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a52:	d8e2      	bhi.n	8007a1a <__multiply+0xb2>
 8007a54:	9b01      	ldr	r3, [sp, #4]
 8007a56:	f845 c003 	str.w	ip, [r5, r3]
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007a60:	3104      	adds	r1, #4
 8007a62:	f1b9 0f00 	cmp.w	r9, #0
 8007a66:	d021      	beq.n	8007aac <__multiply+0x144>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	f104 0c14 	add.w	ip, r4, #20
 8007a6e:	46ae      	mov	lr, r5
 8007a70:	f04f 0a00 	mov.w	sl, #0
 8007a74:	f8bc b000 	ldrh.w	fp, [ip]
 8007a78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007a7c:	fb09 770b 	mla	r7, r9, fp, r7
 8007a80:	4457      	add	r7, sl
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a88:	f84e 3b04 	str.w	r3, [lr], #4
 8007a8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a94:	f8be 3000 	ldrh.w	r3, [lr]
 8007a98:	fb09 330a 	mla	r3, r9, sl, r3
 8007a9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007aa0:	4562      	cmp	r2, ip
 8007aa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007aa6:	d8e5      	bhi.n	8007a74 <__multiply+0x10c>
 8007aa8:	9f01      	ldr	r7, [sp, #4]
 8007aaa:	51eb      	str	r3, [r5, r7]
 8007aac:	3504      	adds	r5, #4
 8007aae:	e799      	b.n	80079e4 <__multiply+0x7c>
 8007ab0:	3e01      	subs	r6, #1
 8007ab2:	e79b      	b.n	80079ec <__multiply+0x84>
 8007ab4:	0800a735 	.word	0x0800a735
 8007ab8:	0800a746 	.word	0x0800a746

08007abc <__pow5mult>:
 8007abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac0:	4615      	mov	r5, r2
 8007ac2:	f012 0203 	ands.w	r2, r2, #3
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	460e      	mov	r6, r1
 8007aca:	d007      	beq.n	8007adc <__pow5mult+0x20>
 8007acc:	4c25      	ldr	r4, [pc, #148]	@ (8007b64 <__pow5mult+0xa8>)
 8007ace:	3a01      	subs	r2, #1
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ad6:	f7ff fe55 	bl	8007784 <__multadd>
 8007ada:	4606      	mov	r6, r0
 8007adc:	10ad      	asrs	r5, r5, #2
 8007ade:	d03d      	beq.n	8007b5c <__pow5mult+0xa0>
 8007ae0:	69fc      	ldr	r4, [r7, #28]
 8007ae2:	b97c      	cbnz	r4, 8007b04 <__pow5mult+0x48>
 8007ae4:	2010      	movs	r0, #16
 8007ae6:	f7ff fd35 	bl	8007554 <malloc>
 8007aea:	4602      	mov	r2, r0
 8007aec:	61f8      	str	r0, [r7, #28]
 8007aee:	b928      	cbnz	r0, 8007afc <__pow5mult+0x40>
 8007af0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b68 <__pow5mult+0xac>)
 8007af2:	481e      	ldr	r0, [pc, #120]	@ (8007b6c <__pow5mult+0xb0>)
 8007af4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007af8:	f001 fb6e 	bl	80091d8 <__assert_func>
 8007afc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b00:	6004      	str	r4, [r0, #0]
 8007b02:	60c4      	str	r4, [r0, #12]
 8007b04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b0c:	b94c      	cbnz	r4, 8007b22 <__pow5mult+0x66>
 8007b0e:	f240 2171 	movw	r1, #625	@ 0x271
 8007b12:	4638      	mov	r0, r7
 8007b14:	f7ff ff12 	bl	800793c <__i2b>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b1e:	4604      	mov	r4, r0
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	f04f 0900 	mov.w	r9, #0
 8007b26:	07eb      	lsls	r3, r5, #31
 8007b28:	d50a      	bpl.n	8007b40 <__pow5mult+0x84>
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7ff ff1a 	bl	8007968 <__multiply>
 8007b34:	4631      	mov	r1, r6
 8007b36:	4680      	mov	r8, r0
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f7ff fe01 	bl	8007740 <_Bfree>
 8007b3e:	4646      	mov	r6, r8
 8007b40:	106d      	asrs	r5, r5, #1
 8007b42:	d00b      	beq.n	8007b5c <__pow5mult+0xa0>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	b938      	cbnz	r0, 8007b58 <__pow5mult+0x9c>
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	f7ff ff0b 	bl	8007968 <__multiply>
 8007b52:	6020      	str	r0, [r4, #0]
 8007b54:	f8c0 9000 	str.w	r9, [r0]
 8007b58:	4604      	mov	r4, r0
 8007b5a:	e7e4      	b.n	8007b26 <__pow5mult+0x6a>
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b62:	bf00      	nop
 8007b64:	0800a7a0 	.word	0x0800a7a0
 8007b68:	0800a6c6 	.word	0x0800a6c6
 8007b6c:	0800a746 	.word	0x0800a746

08007b70 <__lshift>:
 8007b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	460c      	mov	r4, r1
 8007b76:	6849      	ldr	r1, [r1, #4]
 8007b78:	6923      	ldr	r3, [r4, #16]
 8007b7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	4607      	mov	r7, r0
 8007b82:	4691      	mov	r9, r2
 8007b84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b88:	f108 0601 	add.w	r6, r8, #1
 8007b8c:	42b3      	cmp	r3, r6
 8007b8e:	db0b      	blt.n	8007ba8 <__lshift+0x38>
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff fd95 	bl	80076c0 <_Balloc>
 8007b96:	4605      	mov	r5, r0
 8007b98:	b948      	cbnz	r0, 8007bae <__lshift+0x3e>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	4b28      	ldr	r3, [pc, #160]	@ (8007c40 <__lshift+0xd0>)
 8007b9e:	4829      	ldr	r0, [pc, #164]	@ (8007c44 <__lshift+0xd4>)
 8007ba0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ba4:	f001 fb18 	bl	80091d8 <__assert_func>
 8007ba8:	3101      	adds	r1, #1
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	e7ee      	b.n	8007b8c <__lshift+0x1c>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f100 0114 	add.w	r1, r0, #20
 8007bb4:	f100 0210 	add.w	r2, r0, #16
 8007bb8:	4618      	mov	r0, r3
 8007bba:	4553      	cmp	r3, sl
 8007bbc:	db33      	blt.n	8007c26 <__lshift+0xb6>
 8007bbe:	6920      	ldr	r0, [r4, #16]
 8007bc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bc4:	f104 0314 	add.w	r3, r4, #20
 8007bc8:	f019 091f 	ands.w	r9, r9, #31
 8007bcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bd4:	d02b      	beq.n	8007c2e <__lshift+0xbe>
 8007bd6:	f1c9 0e20 	rsb	lr, r9, #32
 8007bda:	468a      	mov	sl, r1
 8007bdc:	2200      	movs	r2, #0
 8007bde:	6818      	ldr	r0, [r3, #0]
 8007be0:	fa00 f009 	lsl.w	r0, r0, r9
 8007be4:	4310      	orrs	r0, r2
 8007be6:	f84a 0b04 	str.w	r0, [sl], #4
 8007bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bee:	459c      	cmp	ip, r3
 8007bf0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bf4:	d8f3      	bhi.n	8007bde <__lshift+0x6e>
 8007bf6:	ebac 0304 	sub.w	r3, ip, r4
 8007bfa:	3b15      	subs	r3, #21
 8007bfc:	f023 0303 	bic.w	r3, r3, #3
 8007c00:	3304      	adds	r3, #4
 8007c02:	f104 0015 	add.w	r0, r4, #21
 8007c06:	4584      	cmp	ip, r0
 8007c08:	bf38      	it	cc
 8007c0a:	2304      	movcc	r3, #4
 8007c0c:	50ca      	str	r2, [r1, r3]
 8007c0e:	b10a      	cbz	r2, 8007c14 <__lshift+0xa4>
 8007c10:	f108 0602 	add.w	r6, r8, #2
 8007c14:	3e01      	subs	r6, #1
 8007c16:	4638      	mov	r0, r7
 8007c18:	612e      	str	r6, [r5, #16]
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	f7ff fd90 	bl	8007740 <_Bfree>
 8007c20:	4628      	mov	r0, r5
 8007c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	e7c5      	b.n	8007bba <__lshift+0x4a>
 8007c2e:	3904      	subs	r1, #4
 8007c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c34:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c38:	459c      	cmp	ip, r3
 8007c3a:	d8f9      	bhi.n	8007c30 <__lshift+0xc0>
 8007c3c:	e7ea      	b.n	8007c14 <__lshift+0xa4>
 8007c3e:	bf00      	nop
 8007c40:	0800a735 	.word	0x0800a735
 8007c44:	0800a746 	.word	0x0800a746

08007c48 <__mcmp>:
 8007c48:	690a      	ldr	r2, [r1, #16]
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6900      	ldr	r0, [r0, #16]
 8007c4e:	1a80      	subs	r0, r0, r2
 8007c50:	b530      	push	{r4, r5, lr}
 8007c52:	d10e      	bne.n	8007c72 <__mcmp+0x2a>
 8007c54:	3314      	adds	r3, #20
 8007c56:	3114      	adds	r1, #20
 8007c58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c68:	4295      	cmp	r5, r2
 8007c6a:	d003      	beq.n	8007c74 <__mcmp+0x2c>
 8007c6c:	d205      	bcs.n	8007c7a <__mcmp+0x32>
 8007c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c72:	bd30      	pop	{r4, r5, pc}
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	d3f3      	bcc.n	8007c60 <__mcmp+0x18>
 8007c78:	e7fb      	b.n	8007c72 <__mcmp+0x2a>
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	e7f9      	b.n	8007c72 <__mcmp+0x2a>
	...

08007c80 <__mdiff>:
 8007c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	4689      	mov	r9, r1
 8007c86:	4606      	mov	r6, r0
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4648      	mov	r0, r9
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	f7ff ffdb 	bl	8007c48 <__mcmp>
 8007c92:	1e05      	subs	r5, r0, #0
 8007c94:	d112      	bne.n	8007cbc <__mdiff+0x3c>
 8007c96:	4629      	mov	r1, r5
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7ff fd11 	bl	80076c0 <_Balloc>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	b928      	cbnz	r0, 8007cae <__mdiff+0x2e>
 8007ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8007da0 <__mdiff+0x120>)
 8007ca4:	f240 2137 	movw	r1, #567	@ 0x237
 8007ca8:	483e      	ldr	r0, [pc, #248]	@ (8007da4 <__mdiff+0x124>)
 8007caa:	f001 fa95 	bl	80091d8 <__assert_func>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	b003      	add	sp, #12
 8007cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbc:	bfbc      	itt	lt
 8007cbe:	464b      	movlt	r3, r9
 8007cc0:	46a1      	movlt	r9, r4
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007cc8:	bfba      	itte	lt
 8007cca:	461c      	movlt	r4, r3
 8007ccc:	2501      	movlt	r5, #1
 8007cce:	2500      	movge	r5, #0
 8007cd0:	f7ff fcf6 	bl	80076c0 <_Balloc>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	b918      	cbnz	r0, 8007ce0 <__mdiff+0x60>
 8007cd8:	4b31      	ldr	r3, [pc, #196]	@ (8007da0 <__mdiff+0x120>)
 8007cda:	f240 2145 	movw	r1, #581	@ 0x245
 8007cde:	e7e3      	b.n	8007ca8 <__mdiff+0x28>
 8007ce0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ce4:	6926      	ldr	r6, [r4, #16]
 8007ce6:	60c5      	str	r5, [r0, #12]
 8007ce8:	f109 0310 	add.w	r3, r9, #16
 8007cec:	f109 0514 	add.w	r5, r9, #20
 8007cf0:	f104 0e14 	add.w	lr, r4, #20
 8007cf4:	f100 0b14 	add.w	fp, r0, #20
 8007cf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007cfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d00:	9301      	str	r3, [sp, #4]
 8007d02:	46d9      	mov	r9, fp
 8007d04:	f04f 0c00 	mov.w	ip, #0
 8007d08:	9b01      	ldr	r3, [sp, #4]
 8007d0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	fa1f f38a 	uxth.w	r3, sl
 8007d18:	4619      	mov	r1, r3
 8007d1a:	b283      	uxth	r3, r0
 8007d1c:	1acb      	subs	r3, r1, r3
 8007d1e:	0c00      	lsrs	r0, r0, #16
 8007d20:	4463      	add	r3, ip
 8007d22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d30:	4576      	cmp	r6, lr
 8007d32:	f849 3b04 	str.w	r3, [r9], #4
 8007d36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d3a:	d8e5      	bhi.n	8007d08 <__mdiff+0x88>
 8007d3c:	1b33      	subs	r3, r6, r4
 8007d3e:	3b15      	subs	r3, #21
 8007d40:	f023 0303 	bic.w	r3, r3, #3
 8007d44:	3415      	adds	r4, #21
 8007d46:	3304      	adds	r3, #4
 8007d48:	42a6      	cmp	r6, r4
 8007d4a:	bf38      	it	cc
 8007d4c:	2304      	movcc	r3, #4
 8007d4e:	441d      	add	r5, r3
 8007d50:	445b      	add	r3, fp
 8007d52:	461e      	mov	r6, r3
 8007d54:	462c      	mov	r4, r5
 8007d56:	4544      	cmp	r4, r8
 8007d58:	d30e      	bcc.n	8007d78 <__mdiff+0xf8>
 8007d5a:	f108 0103 	add.w	r1, r8, #3
 8007d5e:	1b49      	subs	r1, r1, r5
 8007d60:	f021 0103 	bic.w	r1, r1, #3
 8007d64:	3d03      	subs	r5, #3
 8007d66:	45a8      	cmp	r8, r5
 8007d68:	bf38      	it	cc
 8007d6a:	2100      	movcc	r1, #0
 8007d6c:	440b      	add	r3, r1
 8007d6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d72:	b191      	cbz	r1, 8007d9a <__mdiff+0x11a>
 8007d74:	6117      	str	r7, [r2, #16]
 8007d76:	e79d      	b.n	8007cb4 <__mdiff+0x34>
 8007d78:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d7c:	46e6      	mov	lr, ip
 8007d7e:	0c08      	lsrs	r0, r1, #16
 8007d80:	fa1c fc81 	uxtah	ip, ip, r1
 8007d84:	4471      	add	r1, lr
 8007d86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d8a:	b289      	uxth	r1, r1
 8007d8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d90:	f846 1b04 	str.w	r1, [r6], #4
 8007d94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d98:	e7dd      	b.n	8007d56 <__mdiff+0xd6>
 8007d9a:	3f01      	subs	r7, #1
 8007d9c:	e7e7      	b.n	8007d6e <__mdiff+0xee>
 8007d9e:	bf00      	nop
 8007da0:	0800a735 	.word	0x0800a735
 8007da4:	0800a746 	.word	0x0800a746

08007da8 <__ulp>:
 8007da8:	b082      	sub	sp, #8
 8007daa:	ed8d 0b00 	vstr	d0, [sp]
 8007dae:	9a01      	ldr	r2, [sp, #4]
 8007db0:	4b0f      	ldr	r3, [pc, #60]	@ (8007df0 <__ulp+0x48>)
 8007db2:	4013      	ands	r3, r2
 8007db4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dc08      	bgt.n	8007dce <__ulp+0x26>
 8007dbc:	425b      	negs	r3, r3
 8007dbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007dc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007dc6:	da04      	bge.n	8007dd2 <__ulp+0x2a>
 8007dc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007dcc:	4113      	asrs	r3, r2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	e008      	b.n	8007de4 <__ulp+0x3c>
 8007dd2:	f1a2 0314 	sub.w	r3, r2, #20
 8007dd6:	2b1e      	cmp	r3, #30
 8007dd8:	bfda      	itte	le
 8007dda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007dde:	40da      	lsrle	r2, r3
 8007de0:	2201      	movgt	r2, #1
 8007de2:	2300      	movs	r3, #0
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	ec41 0b10 	vmov	d0, r0, r1
 8007dec:	b002      	add	sp, #8
 8007dee:	4770      	bx	lr
 8007df0:	7ff00000 	.word	0x7ff00000

08007df4 <__b2d>:
 8007df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df8:	6906      	ldr	r6, [r0, #16]
 8007dfa:	f100 0814 	add.w	r8, r0, #20
 8007dfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007e02:	1f37      	subs	r7, r6, #4
 8007e04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e08:	4610      	mov	r0, r2
 8007e0a:	f7ff fd4b 	bl	80078a4 <__hi0bits>
 8007e0e:	f1c0 0320 	rsb	r3, r0, #32
 8007e12:	280a      	cmp	r0, #10
 8007e14:	600b      	str	r3, [r1, #0]
 8007e16:	491b      	ldr	r1, [pc, #108]	@ (8007e84 <__b2d+0x90>)
 8007e18:	dc15      	bgt.n	8007e46 <__b2d+0x52>
 8007e1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007e1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007e22:	45b8      	cmp	r8, r7
 8007e24:	ea43 0501 	orr.w	r5, r3, r1
 8007e28:	bf34      	ite	cc
 8007e2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007e2e:	2300      	movcs	r3, #0
 8007e30:	3015      	adds	r0, #21
 8007e32:	fa02 f000 	lsl.w	r0, r2, r0
 8007e36:	fa23 f30c 	lsr.w	r3, r3, ip
 8007e3a:	4303      	orrs	r3, r0
 8007e3c:	461c      	mov	r4, r3
 8007e3e:	ec45 4b10 	vmov	d0, r4, r5
 8007e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e46:	45b8      	cmp	r8, r7
 8007e48:	bf3a      	itte	cc
 8007e4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007e4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007e52:	2300      	movcs	r3, #0
 8007e54:	380b      	subs	r0, #11
 8007e56:	d012      	beq.n	8007e7e <__b2d+0x8a>
 8007e58:	f1c0 0120 	rsb	r1, r0, #32
 8007e5c:	fa23 f401 	lsr.w	r4, r3, r1
 8007e60:	4082      	lsls	r2, r0
 8007e62:	4322      	orrs	r2, r4
 8007e64:	4547      	cmp	r7, r8
 8007e66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007e6a:	bf8c      	ite	hi
 8007e6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007e70:	2200      	movls	r2, #0
 8007e72:	4083      	lsls	r3, r0
 8007e74:	40ca      	lsrs	r2, r1
 8007e76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	e7de      	b.n	8007e3c <__b2d+0x48>
 8007e7e:	ea42 0501 	orr.w	r5, r2, r1
 8007e82:	e7db      	b.n	8007e3c <__b2d+0x48>
 8007e84:	3ff00000 	.word	0x3ff00000

08007e88 <__d2b>:
 8007e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	2101      	movs	r1, #1
 8007e90:	ec59 8b10 	vmov	r8, r9, d0
 8007e94:	4616      	mov	r6, r2
 8007e96:	f7ff fc13 	bl	80076c0 <_Balloc>
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	b930      	cbnz	r0, 8007eac <__d2b+0x24>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	4b23      	ldr	r3, [pc, #140]	@ (8007f30 <__d2b+0xa8>)
 8007ea2:	4824      	ldr	r0, [pc, #144]	@ (8007f34 <__d2b+0xac>)
 8007ea4:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ea8:	f001 f996 	bl	80091d8 <__assert_func>
 8007eac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007eb4:	b10d      	cbz	r5, 8007eba <__d2b+0x32>
 8007eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	f1b8 0300 	subs.w	r3, r8, #0
 8007ec0:	d023      	beq.n	8007f0a <__d2b+0x82>
 8007ec2:	4668      	mov	r0, sp
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	f7ff fd0c 	bl	80078e2 <__lo0bits>
 8007eca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ece:	b1d0      	cbz	r0, 8007f06 <__d2b+0x7e>
 8007ed0:	f1c0 0320 	rsb	r3, r0, #32
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	40c2      	lsrs	r2, r0
 8007edc:	6163      	str	r3, [r4, #20]
 8007ede:	9201      	str	r2, [sp, #4]
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	61a3      	str	r3, [r4, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	bf0c      	ite	eq
 8007ee8:	2201      	moveq	r2, #1
 8007eea:	2202      	movne	r2, #2
 8007eec:	6122      	str	r2, [r4, #16]
 8007eee:	b1a5      	cbz	r5, 8007f1a <__d2b+0x92>
 8007ef0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ef4:	4405      	add	r5, r0
 8007ef6:	603d      	str	r5, [r7, #0]
 8007ef8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007efc:	6030      	str	r0, [r6, #0]
 8007efe:	4620      	mov	r0, r4
 8007f00:	b003      	add	sp, #12
 8007f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f06:	6161      	str	r1, [r4, #20]
 8007f08:	e7ea      	b.n	8007ee0 <__d2b+0x58>
 8007f0a:	a801      	add	r0, sp, #4
 8007f0c:	f7ff fce9 	bl	80078e2 <__lo0bits>
 8007f10:	9b01      	ldr	r3, [sp, #4]
 8007f12:	6163      	str	r3, [r4, #20]
 8007f14:	3020      	adds	r0, #32
 8007f16:	2201      	movs	r2, #1
 8007f18:	e7e8      	b.n	8007eec <__d2b+0x64>
 8007f1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f22:	6038      	str	r0, [r7, #0]
 8007f24:	6918      	ldr	r0, [r3, #16]
 8007f26:	f7ff fcbd 	bl	80078a4 <__hi0bits>
 8007f2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f2e:	e7e5      	b.n	8007efc <__d2b+0x74>
 8007f30:	0800a735 	.word	0x0800a735
 8007f34:	0800a746 	.word	0x0800a746

08007f38 <__ratio>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	e9cd 1000 	strd	r1, r0, [sp]
 8007f42:	a902      	add	r1, sp, #8
 8007f44:	f7ff ff56 	bl	8007df4 <__b2d>
 8007f48:	9800      	ldr	r0, [sp, #0]
 8007f4a:	a903      	add	r1, sp, #12
 8007f4c:	ec55 4b10 	vmov	r4, r5, d0
 8007f50:	f7ff ff50 	bl	8007df4 <__b2d>
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	6919      	ldr	r1, [r3, #16]
 8007f58:	9b00      	ldr	r3, [sp, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	1ac9      	subs	r1, r1, r3
 8007f5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007f62:	1a9b      	subs	r3, r3, r2
 8007f64:	ec5b ab10 	vmov	sl, fp, d0
 8007f68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bfce      	itee	gt
 8007f70:	462a      	movgt	r2, r5
 8007f72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f76:	465a      	movle	r2, fp
 8007f78:	462f      	mov	r7, r5
 8007f7a:	46d9      	mov	r9, fp
 8007f7c:	bfcc      	ite	gt
 8007f7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007f86:	464b      	mov	r3, r9
 8007f88:	4652      	mov	r2, sl
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	f7f8 fc7d 	bl	800088c <__aeabi_ddiv>
 8007f92:	ec41 0b10 	vmov	d0, r0, r1
 8007f96:	b005      	add	sp, #20
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f9c <__copybits>:
 8007f9c:	3901      	subs	r1, #1
 8007f9e:	b570      	push	{r4, r5, r6, lr}
 8007fa0:	1149      	asrs	r1, r1, #5
 8007fa2:	6914      	ldr	r4, [r2, #16]
 8007fa4:	3101      	adds	r1, #1
 8007fa6:	f102 0314 	add.w	r3, r2, #20
 8007faa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fb2:	1f05      	subs	r5, r0, #4
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	d30c      	bcc.n	8007fd2 <__copybits+0x36>
 8007fb8:	1aa3      	subs	r3, r4, r2
 8007fba:	3b11      	subs	r3, #17
 8007fbc:	f023 0303 	bic.w	r3, r3, #3
 8007fc0:	3211      	adds	r2, #17
 8007fc2:	42a2      	cmp	r2, r4
 8007fc4:	bf88      	it	hi
 8007fc6:	2300      	movhi	r3, #0
 8007fc8:	4418      	add	r0, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4288      	cmp	r0, r1
 8007fce:	d305      	bcc.n	8007fdc <__copybits+0x40>
 8007fd0:	bd70      	pop	{r4, r5, r6, pc}
 8007fd2:	f853 6b04 	ldr.w	r6, [r3], #4
 8007fd6:	f845 6f04 	str.w	r6, [r5, #4]!
 8007fda:	e7eb      	b.n	8007fb4 <__copybits+0x18>
 8007fdc:	f840 3b04 	str.w	r3, [r0], #4
 8007fe0:	e7f4      	b.n	8007fcc <__copybits+0x30>

08007fe2 <__any_on>:
 8007fe2:	f100 0214 	add.w	r2, r0, #20
 8007fe6:	6900      	ldr	r0, [r0, #16]
 8007fe8:	114b      	asrs	r3, r1, #5
 8007fea:	4298      	cmp	r0, r3
 8007fec:	b510      	push	{r4, lr}
 8007fee:	db11      	blt.n	8008014 <__any_on+0x32>
 8007ff0:	dd0a      	ble.n	8008008 <__any_on+0x26>
 8007ff2:	f011 011f 	ands.w	r1, r1, #31
 8007ff6:	d007      	beq.n	8008008 <__any_on+0x26>
 8007ff8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ffc:	fa24 f001 	lsr.w	r0, r4, r1
 8008000:	fa00 f101 	lsl.w	r1, r0, r1
 8008004:	428c      	cmp	r4, r1
 8008006:	d10b      	bne.n	8008020 <__any_on+0x3e>
 8008008:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800800c:	4293      	cmp	r3, r2
 800800e:	d803      	bhi.n	8008018 <__any_on+0x36>
 8008010:	2000      	movs	r0, #0
 8008012:	bd10      	pop	{r4, pc}
 8008014:	4603      	mov	r3, r0
 8008016:	e7f7      	b.n	8008008 <__any_on+0x26>
 8008018:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800801c:	2900      	cmp	r1, #0
 800801e:	d0f5      	beq.n	800800c <__any_on+0x2a>
 8008020:	2001      	movs	r0, #1
 8008022:	e7f6      	b.n	8008012 <__any_on+0x30>

08008024 <sulp>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	4604      	mov	r4, r0
 8008028:	460d      	mov	r5, r1
 800802a:	ec45 4b10 	vmov	d0, r4, r5
 800802e:	4616      	mov	r6, r2
 8008030:	f7ff feba 	bl	8007da8 <__ulp>
 8008034:	ec51 0b10 	vmov	r0, r1, d0
 8008038:	b17e      	cbz	r6, 800805a <sulp+0x36>
 800803a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800803e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008042:	2b00      	cmp	r3, #0
 8008044:	dd09      	ble.n	800805a <sulp+0x36>
 8008046:	051b      	lsls	r3, r3, #20
 8008048:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800804c:	2400      	movs	r4, #0
 800804e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008052:	4622      	mov	r2, r4
 8008054:	462b      	mov	r3, r5
 8008056:	f7f8 faef 	bl	8000638 <__aeabi_dmul>
 800805a:	ec41 0b10 	vmov	d0, r0, r1
 800805e:	bd70      	pop	{r4, r5, r6, pc}

08008060 <_strtod_l>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	b09f      	sub	sp, #124	@ 0x7c
 8008066:	460c      	mov	r4, r1
 8008068:	9217      	str	r2, [sp, #92]	@ 0x5c
 800806a:	2200      	movs	r2, #0
 800806c:	921a      	str	r2, [sp, #104]	@ 0x68
 800806e:	9005      	str	r0, [sp, #20]
 8008070:	f04f 0a00 	mov.w	sl, #0
 8008074:	f04f 0b00 	mov.w	fp, #0
 8008078:	460a      	mov	r2, r1
 800807a:	9219      	str	r2, [sp, #100]	@ 0x64
 800807c:	7811      	ldrb	r1, [r2, #0]
 800807e:	292b      	cmp	r1, #43	@ 0x2b
 8008080:	d04a      	beq.n	8008118 <_strtod_l+0xb8>
 8008082:	d838      	bhi.n	80080f6 <_strtod_l+0x96>
 8008084:	290d      	cmp	r1, #13
 8008086:	d832      	bhi.n	80080ee <_strtod_l+0x8e>
 8008088:	2908      	cmp	r1, #8
 800808a:	d832      	bhi.n	80080f2 <_strtod_l+0x92>
 800808c:	2900      	cmp	r1, #0
 800808e:	d03b      	beq.n	8008108 <_strtod_l+0xa8>
 8008090:	2200      	movs	r2, #0
 8008092:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008094:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008096:	782a      	ldrb	r2, [r5, #0]
 8008098:	2a30      	cmp	r2, #48	@ 0x30
 800809a:	f040 80b3 	bne.w	8008204 <_strtod_l+0x1a4>
 800809e:	786a      	ldrb	r2, [r5, #1]
 80080a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80080a4:	2a58      	cmp	r2, #88	@ 0x58
 80080a6:	d16e      	bne.n	8008186 <_strtod_l+0x126>
 80080a8:	9302      	str	r3, [sp, #8]
 80080aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	4a8e      	ldr	r2, [pc, #568]	@ (80082ec <_strtod_l+0x28c>)
 80080b4:	9805      	ldr	r0, [sp, #20]
 80080b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80080b8:	a919      	add	r1, sp, #100	@ 0x64
 80080ba:	f001 f927 	bl	800930c <__gethex>
 80080be:	f010 060f 	ands.w	r6, r0, #15
 80080c2:	4604      	mov	r4, r0
 80080c4:	d005      	beq.n	80080d2 <_strtod_l+0x72>
 80080c6:	2e06      	cmp	r6, #6
 80080c8:	d128      	bne.n	800811c <_strtod_l+0xbc>
 80080ca:	3501      	adds	r5, #1
 80080cc:	2300      	movs	r3, #0
 80080ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80080d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f040 858e 	bne.w	8008bf6 <_strtod_l+0xb96>
 80080da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080dc:	b1cb      	cbz	r3, 8008112 <_strtod_l+0xb2>
 80080de:	4652      	mov	r2, sl
 80080e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80080e4:	ec43 2b10 	vmov	d0, r2, r3
 80080e8:	b01f      	add	sp, #124	@ 0x7c
 80080ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ee:	2920      	cmp	r1, #32
 80080f0:	d1ce      	bne.n	8008090 <_strtod_l+0x30>
 80080f2:	3201      	adds	r2, #1
 80080f4:	e7c1      	b.n	800807a <_strtod_l+0x1a>
 80080f6:	292d      	cmp	r1, #45	@ 0x2d
 80080f8:	d1ca      	bne.n	8008090 <_strtod_l+0x30>
 80080fa:	2101      	movs	r1, #1
 80080fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080fe:	1c51      	adds	r1, r2, #1
 8008100:	9119      	str	r1, [sp, #100]	@ 0x64
 8008102:	7852      	ldrb	r2, [r2, #1]
 8008104:	2a00      	cmp	r2, #0
 8008106:	d1c5      	bne.n	8008094 <_strtod_l+0x34>
 8008108:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800810a:	9419      	str	r4, [sp, #100]	@ 0x64
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 8570 	bne.w	8008bf2 <_strtod_l+0xb92>
 8008112:	4652      	mov	r2, sl
 8008114:	465b      	mov	r3, fp
 8008116:	e7e5      	b.n	80080e4 <_strtod_l+0x84>
 8008118:	2100      	movs	r1, #0
 800811a:	e7ef      	b.n	80080fc <_strtod_l+0x9c>
 800811c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800811e:	b13a      	cbz	r2, 8008130 <_strtod_l+0xd0>
 8008120:	2135      	movs	r1, #53	@ 0x35
 8008122:	a81c      	add	r0, sp, #112	@ 0x70
 8008124:	f7ff ff3a 	bl	8007f9c <__copybits>
 8008128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800812a:	9805      	ldr	r0, [sp, #20]
 800812c:	f7ff fb08 	bl	8007740 <_Bfree>
 8008130:	3e01      	subs	r6, #1
 8008132:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008134:	2e04      	cmp	r6, #4
 8008136:	d806      	bhi.n	8008146 <_strtod_l+0xe6>
 8008138:	e8df f006 	tbb	[pc, r6]
 800813c:	201d0314 	.word	0x201d0314
 8008140:	14          	.byte	0x14
 8008141:	00          	.byte	0x00
 8008142:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008146:	05e1      	lsls	r1, r4, #23
 8008148:	bf48      	it	mi
 800814a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800814e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008152:	0d1b      	lsrs	r3, r3, #20
 8008154:	051b      	lsls	r3, r3, #20
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1bb      	bne.n	80080d2 <_strtod_l+0x72>
 800815a:	f7fe fb2f 	bl	80067bc <__errno>
 800815e:	2322      	movs	r3, #34	@ 0x22
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	e7b6      	b.n	80080d2 <_strtod_l+0x72>
 8008164:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008168:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800816c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008170:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008174:	e7e7      	b.n	8008146 <_strtod_l+0xe6>
 8008176:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80082f4 <_strtod_l+0x294>
 800817a:	e7e4      	b.n	8008146 <_strtod_l+0xe6>
 800817c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008180:	f04f 3aff 	mov.w	sl, #4294967295
 8008184:	e7df      	b.n	8008146 <_strtod_l+0xe6>
 8008186:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	9219      	str	r2, [sp, #100]	@ 0x64
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b30      	cmp	r3, #48	@ 0x30
 8008190:	d0f9      	beq.n	8008186 <_strtod_l+0x126>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d09d      	beq.n	80080d2 <_strtod_l+0x72>
 8008196:	2301      	movs	r3, #1
 8008198:	9309      	str	r3, [sp, #36]	@ 0x24
 800819a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800819c:	930c      	str	r3, [sp, #48]	@ 0x30
 800819e:	2300      	movs	r3, #0
 80081a0:	9308      	str	r3, [sp, #32]
 80081a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80081a4:	461f      	mov	r7, r3
 80081a6:	220a      	movs	r2, #10
 80081a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80081aa:	7805      	ldrb	r5, [r0, #0]
 80081ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80081b0:	b2d9      	uxtb	r1, r3
 80081b2:	2909      	cmp	r1, #9
 80081b4:	d928      	bls.n	8008208 <_strtod_l+0x1a8>
 80081b6:	494e      	ldr	r1, [pc, #312]	@ (80082f0 <_strtod_l+0x290>)
 80081b8:	2201      	movs	r2, #1
 80081ba:	f000 ffd5 	bl	8009168 <strncmp>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d032      	beq.n	8008228 <_strtod_l+0x1c8>
 80081c2:	2000      	movs	r0, #0
 80081c4:	462a      	mov	r2, r5
 80081c6:	4681      	mov	r9, r0
 80081c8:	463d      	mov	r5, r7
 80081ca:	4603      	mov	r3, r0
 80081cc:	2a65      	cmp	r2, #101	@ 0x65
 80081ce:	d001      	beq.n	80081d4 <_strtod_l+0x174>
 80081d0:	2a45      	cmp	r2, #69	@ 0x45
 80081d2:	d114      	bne.n	80081fe <_strtod_l+0x19e>
 80081d4:	b91d      	cbnz	r5, 80081de <_strtod_l+0x17e>
 80081d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081d8:	4302      	orrs	r2, r0
 80081da:	d095      	beq.n	8008108 <_strtod_l+0xa8>
 80081dc:	2500      	movs	r5, #0
 80081de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80081e0:	1c62      	adds	r2, r4, #1
 80081e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80081e4:	7862      	ldrb	r2, [r4, #1]
 80081e6:	2a2b      	cmp	r2, #43	@ 0x2b
 80081e8:	d077      	beq.n	80082da <_strtod_l+0x27a>
 80081ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80081ec:	d07b      	beq.n	80082e6 <_strtod_l+0x286>
 80081ee:	f04f 0c00 	mov.w	ip, #0
 80081f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80081f6:	2909      	cmp	r1, #9
 80081f8:	f240 8082 	bls.w	8008300 <_strtod_l+0x2a0>
 80081fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80081fe:	f04f 0800 	mov.w	r8, #0
 8008202:	e0a2      	b.n	800834a <_strtod_l+0x2ea>
 8008204:	2300      	movs	r3, #0
 8008206:	e7c7      	b.n	8008198 <_strtod_l+0x138>
 8008208:	2f08      	cmp	r7, #8
 800820a:	bfd5      	itete	le
 800820c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800820e:	9908      	ldrgt	r1, [sp, #32]
 8008210:	fb02 3301 	mlale	r3, r2, r1, r3
 8008214:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008218:	f100 0001 	add.w	r0, r0, #1
 800821c:	bfd4      	ite	le
 800821e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008220:	9308      	strgt	r3, [sp, #32]
 8008222:	3701      	adds	r7, #1
 8008224:	9019      	str	r0, [sp, #100]	@ 0x64
 8008226:	e7bf      	b.n	80081a8 <_strtod_l+0x148>
 8008228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	9219      	str	r2, [sp, #100]	@ 0x64
 800822e:	785a      	ldrb	r2, [r3, #1]
 8008230:	b37f      	cbz	r7, 8008292 <_strtod_l+0x232>
 8008232:	4681      	mov	r9, r0
 8008234:	463d      	mov	r5, r7
 8008236:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800823a:	2b09      	cmp	r3, #9
 800823c:	d912      	bls.n	8008264 <_strtod_l+0x204>
 800823e:	2301      	movs	r3, #1
 8008240:	e7c4      	b.n	80081cc <_strtod_l+0x16c>
 8008242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	9219      	str	r2, [sp, #100]	@ 0x64
 8008248:	785a      	ldrb	r2, [r3, #1]
 800824a:	3001      	adds	r0, #1
 800824c:	2a30      	cmp	r2, #48	@ 0x30
 800824e:	d0f8      	beq.n	8008242 <_strtod_l+0x1e2>
 8008250:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008254:	2b08      	cmp	r3, #8
 8008256:	f200 84d3 	bhi.w	8008c00 <_strtod_l+0xba0>
 800825a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800825c:	930c      	str	r3, [sp, #48]	@ 0x30
 800825e:	4681      	mov	r9, r0
 8008260:	2000      	movs	r0, #0
 8008262:	4605      	mov	r5, r0
 8008264:	3a30      	subs	r2, #48	@ 0x30
 8008266:	f100 0301 	add.w	r3, r0, #1
 800826a:	d02a      	beq.n	80082c2 <_strtod_l+0x262>
 800826c:	4499      	add	r9, r3
 800826e:	eb00 0c05 	add.w	ip, r0, r5
 8008272:	462b      	mov	r3, r5
 8008274:	210a      	movs	r1, #10
 8008276:	4563      	cmp	r3, ip
 8008278:	d10d      	bne.n	8008296 <_strtod_l+0x236>
 800827a:	1c69      	adds	r1, r5, #1
 800827c:	4401      	add	r1, r0
 800827e:	4428      	add	r0, r5
 8008280:	2808      	cmp	r0, #8
 8008282:	dc16      	bgt.n	80082b2 <_strtod_l+0x252>
 8008284:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008286:	230a      	movs	r3, #10
 8008288:	fb03 2300 	mla	r3, r3, r0, r2
 800828c:	930a      	str	r3, [sp, #40]	@ 0x28
 800828e:	2300      	movs	r3, #0
 8008290:	e018      	b.n	80082c4 <_strtod_l+0x264>
 8008292:	4638      	mov	r0, r7
 8008294:	e7da      	b.n	800824c <_strtod_l+0x1ec>
 8008296:	2b08      	cmp	r3, #8
 8008298:	f103 0301 	add.w	r3, r3, #1
 800829c:	dc03      	bgt.n	80082a6 <_strtod_l+0x246>
 800829e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80082a0:	434e      	muls	r6, r1
 80082a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80082a4:	e7e7      	b.n	8008276 <_strtod_l+0x216>
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	bfde      	ittt	le
 80082aa:	9e08      	ldrle	r6, [sp, #32]
 80082ac:	434e      	mulle	r6, r1
 80082ae:	9608      	strle	r6, [sp, #32]
 80082b0:	e7e1      	b.n	8008276 <_strtod_l+0x216>
 80082b2:	280f      	cmp	r0, #15
 80082b4:	dceb      	bgt.n	800828e <_strtod_l+0x22e>
 80082b6:	9808      	ldr	r0, [sp, #32]
 80082b8:	230a      	movs	r3, #10
 80082ba:	fb03 2300 	mla	r3, r3, r0, r2
 80082be:	9308      	str	r3, [sp, #32]
 80082c0:	e7e5      	b.n	800828e <_strtod_l+0x22e>
 80082c2:	4629      	mov	r1, r5
 80082c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082c6:	1c50      	adds	r0, r2, #1
 80082c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80082ca:	7852      	ldrb	r2, [r2, #1]
 80082cc:	4618      	mov	r0, r3
 80082ce:	460d      	mov	r5, r1
 80082d0:	e7b1      	b.n	8008236 <_strtod_l+0x1d6>
 80082d2:	f04f 0900 	mov.w	r9, #0
 80082d6:	2301      	movs	r3, #1
 80082d8:	e77d      	b.n	80081d6 <_strtod_l+0x176>
 80082da:	f04f 0c00 	mov.w	ip, #0
 80082de:	1ca2      	adds	r2, r4, #2
 80082e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80082e2:	78a2      	ldrb	r2, [r4, #2]
 80082e4:	e785      	b.n	80081f2 <_strtod_l+0x192>
 80082e6:	f04f 0c01 	mov.w	ip, #1
 80082ea:	e7f8      	b.n	80082de <_strtod_l+0x27e>
 80082ec:	0800a8b8 	.word	0x0800a8b8
 80082f0:	0800a8a0 	.word	0x0800a8a0
 80082f4:	7ff00000 	.word	0x7ff00000
 80082f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082fa:	1c51      	adds	r1, r2, #1
 80082fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80082fe:	7852      	ldrb	r2, [r2, #1]
 8008300:	2a30      	cmp	r2, #48	@ 0x30
 8008302:	d0f9      	beq.n	80082f8 <_strtod_l+0x298>
 8008304:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008308:	2908      	cmp	r1, #8
 800830a:	f63f af78 	bhi.w	80081fe <_strtod_l+0x19e>
 800830e:	3a30      	subs	r2, #48	@ 0x30
 8008310:	920e      	str	r2, [sp, #56]	@ 0x38
 8008312:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008314:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008316:	f04f 080a 	mov.w	r8, #10
 800831a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800831c:	1c56      	adds	r6, r2, #1
 800831e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008320:	7852      	ldrb	r2, [r2, #1]
 8008322:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008326:	f1be 0f09 	cmp.w	lr, #9
 800832a:	d939      	bls.n	80083a0 <_strtod_l+0x340>
 800832c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800832e:	1a76      	subs	r6, r6, r1
 8008330:	2e08      	cmp	r6, #8
 8008332:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008336:	dc03      	bgt.n	8008340 <_strtod_l+0x2e0>
 8008338:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800833a:	4588      	cmp	r8, r1
 800833c:	bfa8      	it	ge
 800833e:	4688      	movge	r8, r1
 8008340:	f1bc 0f00 	cmp.w	ip, #0
 8008344:	d001      	beq.n	800834a <_strtod_l+0x2ea>
 8008346:	f1c8 0800 	rsb	r8, r8, #0
 800834a:	2d00      	cmp	r5, #0
 800834c:	d14e      	bne.n	80083ec <_strtod_l+0x38c>
 800834e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008350:	4308      	orrs	r0, r1
 8008352:	f47f aebe 	bne.w	80080d2 <_strtod_l+0x72>
 8008356:	2b00      	cmp	r3, #0
 8008358:	f47f aed6 	bne.w	8008108 <_strtod_l+0xa8>
 800835c:	2a69      	cmp	r2, #105	@ 0x69
 800835e:	d028      	beq.n	80083b2 <_strtod_l+0x352>
 8008360:	dc25      	bgt.n	80083ae <_strtod_l+0x34e>
 8008362:	2a49      	cmp	r2, #73	@ 0x49
 8008364:	d025      	beq.n	80083b2 <_strtod_l+0x352>
 8008366:	2a4e      	cmp	r2, #78	@ 0x4e
 8008368:	f47f aece 	bne.w	8008108 <_strtod_l+0xa8>
 800836c:	499b      	ldr	r1, [pc, #620]	@ (80085dc <_strtod_l+0x57c>)
 800836e:	a819      	add	r0, sp, #100	@ 0x64
 8008370:	f001 f9ee 	bl	8009750 <__match>
 8008374:	2800      	cmp	r0, #0
 8008376:	f43f aec7 	beq.w	8008108 <_strtod_l+0xa8>
 800837a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b28      	cmp	r3, #40	@ 0x28
 8008380:	d12e      	bne.n	80083e0 <_strtod_l+0x380>
 8008382:	4997      	ldr	r1, [pc, #604]	@ (80085e0 <_strtod_l+0x580>)
 8008384:	aa1c      	add	r2, sp, #112	@ 0x70
 8008386:	a819      	add	r0, sp, #100	@ 0x64
 8008388:	f001 f9f6 	bl	8009778 <__hexnan>
 800838c:	2805      	cmp	r0, #5
 800838e:	d127      	bne.n	80083e0 <_strtod_l+0x380>
 8008390:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008392:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008396:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800839a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800839e:	e698      	b.n	80080d2 <_strtod_l+0x72>
 80083a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80083a2:	fb08 2101 	mla	r1, r8, r1, r2
 80083a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80083aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80083ac:	e7b5      	b.n	800831a <_strtod_l+0x2ba>
 80083ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80083b0:	e7da      	b.n	8008368 <_strtod_l+0x308>
 80083b2:	498c      	ldr	r1, [pc, #560]	@ (80085e4 <_strtod_l+0x584>)
 80083b4:	a819      	add	r0, sp, #100	@ 0x64
 80083b6:	f001 f9cb 	bl	8009750 <__match>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	f43f aea4 	beq.w	8008108 <_strtod_l+0xa8>
 80083c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083c2:	4989      	ldr	r1, [pc, #548]	@ (80085e8 <_strtod_l+0x588>)
 80083c4:	3b01      	subs	r3, #1
 80083c6:	a819      	add	r0, sp, #100	@ 0x64
 80083c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80083ca:	f001 f9c1 	bl	8009750 <__match>
 80083ce:	b910      	cbnz	r0, 80083d6 <_strtod_l+0x376>
 80083d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083d2:	3301      	adds	r3, #1
 80083d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80083d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80085f8 <_strtod_l+0x598>
 80083da:	f04f 0a00 	mov.w	sl, #0
 80083de:	e678      	b.n	80080d2 <_strtod_l+0x72>
 80083e0:	4882      	ldr	r0, [pc, #520]	@ (80085ec <_strtod_l+0x58c>)
 80083e2:	f000 fef1 	bl	80091c8 <nan>
 80083e6:	ec5b ab10 	vmov	sl, fp, d0
 80083ea:	e672      	b.n	80080d2 <_strtod_l+0x72>
 80083ec:	eba8 0309 	sub.w	r3, r8, r9
 80083f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f4:	2f00      	cmp	r7, #0
 80083f6:	bf08      	it	eq
 80083f8:	462f      	moveq	r7, r5
 80083fa:	2d10      	cmp	r5, #16
 80083fc:	462c      	mov	r4, r5
 80083fe:	bfa8      	it	ge
 8008400:	2410      	movge	r4, #16
 8008402:	f7f8 f89f 	bl	8000544 <__aeabi_ui2d>
 8008406:	2d09      	cmp	r5, #9
 8008408:	4682      	mov	sl, r0
 800840a:	468b      	mov	fp, r1
 800840c:	dc13      	bgt.n	8008436 <_strtod_l+0x3d6>
 800840e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008410:	2b00      	cmp	r3, #0
 8008412:	f43f ae5e 	beq.w	80080d2 <_strtod_l+0x72>
 8008416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008418:	dd78      	ble.n	800850c <_strtod_l+0x4ac>
 800841a:	2b16      	cmp	r3, #22
 800841c:	dc5f      	bgt.n	80084de <_strtod_l+0x47e>
 800841e:	4974      	ldr	r1, [pc, #464]	@ (80085f0 <_strtod_l+0x590>)
 8008420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008428:	4652      	mov	r2, sl
 800842a:	465b      	mov	r3, fp
 800842c:	f7f8 f904 	bl	8000638 <__aeabi_dmul>
 8008430:	4682      	mov	sl, r0
 8008432:	468b      	mov	fp, r1
 8008434:	e64d      	b.n	80080d2 <_strtod_l+0x72>
 8008436:	4b6e      	ldr	r3, [pc, #440]	@ (80085f0 <_strtod_l+0x590>)
 8008438:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800843c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008440:	f7f8 f8fa 	bl	8000638 <__aeabi_dmul>
 8008444:	4682      	mov	sl, r0
 8008446:	9808      	ldr	r0, [sp, #32]
 8008448:	468b      	mov	fp, r1
 800844a:	f7f8 f87b 	bl	8000544 <__aeabi_ui2d>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4650      	mov	r0, sl
 8008454:	4659      	mov	r1, fp
 8008456:	f7f7 ff39 	bl	80002cc <__adddf3>
 800845a:	2d0f      	cmp	r5, #15
 800845c:	4682      	mov	sl, r0
 800845e:	468b      	mov	fp, r1
 8008460:	ddd5      	ble.n	800840e <_strtod_l+0x3ae>
 8008462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008464:	1b2c      	subs	r4, r5, r4
 8008466:	441c      	add	r4, r3
 8008468:	2c00      	cmp	r4, #0
 800846a:	f340 8096 	ble.w	800859a <_strtod_l+0x53a>
 800846e:	f014 030f 	ands.w	r3, r4, #15
 8008472:	d00a      	beq.n	800848a <_strtod_l+0x42a>
 8008474:	495e      	ldr	r1, [pc, #376]	@ (80085f0 <_strtod_l+0x590>)
 8008476:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800847a:	4652      	mov	r2, sl
 800847c:	465b      	mov	r3, fp
 800847e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008482:	f7f8 f8d9 	bl	8000638 <__aeabi_dmul>
 8008486:	4682      	mov	sl, r0
 8008488:	468b      	mov	fp, r1
 800848a:	f034 040f 	bics.w	r4, r4, #15
 800848e:	d073      	beq.n	8008578 <_strtod_l+0x518>
 8008490:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008494:	dd48      	ble.n	8008528 <_strtod_l+0x4c8>
 8008496:	2400      	movs	r4, #0
 8008498:	46a0      	mov	r8, r4
 800849a:	940a      	str	r4, [sp, #40]	@ 0x28
 800849c:	46a1      	mov	r9, r4
 800849e:	9a05      	ldr	r2, [sp, #20]
 80084a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80085f8 <_strtod_l+0x598>
 80084a4:	2322      	movs	r3, #34	@ 0x22
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	f04f 0a00 	mov.w	sl, #0
 80084ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f43f ae0f 	beq.w	80080d2 <_strtod_l+0x72>
 80084b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084b6:	9805      	ldr	r0, [sp, #20]
 80084b8:	f7ff f942 	bl	8007740 <_Bfree>
 80084bc:	9805      	ldr	r0, [sp, #20]
 80084be:	4649      	mov	r1, r9
 80084c0:	f7ff f93e 	bl	8007740 <_Bfree>
 80084c4:	9805      	ldr	r0, [sp, #20]
 80084c6:	4641      	mov	r1, r8
 80084c8:	f7ff f93a 	bl	8007740 <_Bfree>
 80084cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084ce:	9805      	ldr	r0, [sp, #20]
 80084d0:	f7ff f936 	bl	8007740 <_Bfree>
 80084d4:	9805      	ldr	r0, [sp, #20]
 80084d6:	4621      	mov	r1, r4
 80084d8:	f7ff f932 	bl	8007740 <_Bfree>
 80084dc:	e5f9      	b.n	80080d2 <_strtod_l+0x72>
 80084de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80084e4:	4293      	cmp	r3, r2
 80084e6:	dbbc      	blt.n	8008462 <_strtod_l+0x402>
 80084e8:	4c41      	ldr	r4, [pc, #260]	@ (80085f0 <_strtod_l+0x590>)
 80084ea:	f1c5 050f 	rsb	r5, r5, #15
 80084ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80084f2:	4652      	mov	r2, sl
 80084f4:	465b      	mov	r3, fp
 80084f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084fa:	f7f8 f89d 	bl	8000638 <__aeabi_dmul>
 80084fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008500:	1b5d      	subs	r5, r3, r5
 8008502:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008506:	e9d4 2300 	ldrd	r2, r3, [r4]
 800850a:	e78f      	b.n	800842c <_strtod_l+0x3cc>
 800850c:	3316      	adds	r3, #22
 800850e:	dba8      	blt.n	8008462 <_strtod_l+0x402>
 8008510:	4b37      	ldr	r3, [pc, #220]	@ (80085f0 <_strtod_l+0x590>)
 8008512:	eba9 0808 	sub.w	r8, r9, r8
 8008516:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800851a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800851e:	4650      	mov	r0, sl
 8008520:	4659      	mov	r1, fp
 8008522:	f7f8 f9b3 	bl	800088c <__aeabi_ddiv>
 8008526:	e783      	b.n	8008430 <_strtod_l+0x3d0>
 8008528:	4b32      	ldr	r3, [pc, #200]	@ (80085f4 <_strtod_l+0x594>)
 800852a:	9308      	str	r3, [sp, #32]
 800852c:	2300      	movs	r3, #0
 800852e:	1124      	asrs	r4, r4, #4
 8008530:	4650      	mov	r0, sl
 8008532:	4659      	mov	r1, fp
 8008534:	461e      	mov	r6, r3
 8008536:	2c01      	cmp	r4, #1
 8008538:	dc21      	bgt.n	800857e <_strtod_l+0x51e>
 800853a:	b10b      	cbz	r3, 8008540 <_strtod_l+0x4e0>
 800853c:	4682      	mov	sl, r0
 800853e:	468b      	mov	fp, r1
 8008540:	492c      	ldr	r1, [pc, #176]	@ (80085f4 <_strtod_l+0x594>)
 8008542:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008546:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800854a:	4652      	mov	r2, sl
 800854c:	465b      	mov	r3, fp
 800854e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008552:	f7f8 f871 	bl	8000638 <__aeabi_dmul>
 8008556:	4b28      	ldr	r3, [pc, #160]	@ (80085f8 <_strtod_l+0x598>)
 8008558:	460a      	mov	r2, r1
 800855a:	400b      	ands	r3, r1
 800855c:	4927      	ldr	r1, [pc, #156]	@ (80085fc <_strtod_l+0x59c>)
 800855e:	428b      	cmp	r3, r1
 8008560:	4682      	mov	sl, r0
 8008562:	d898      	bhi.n	8008496 <_strtod_l+0x436>
 8008564:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008568:	428b      	cmp	r3, r1
 800856a:	bf86      	itte	hi
 800856c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008600 <_strtod_l+0x5a0>
 8008570:	f04f 3aff 	movhi.w	sl, #4294967295
 8008574:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008578:	2300      	movs	r3, #0
 800857a:	9308      	str	r3, [sp, #32]
 800857c:	e07a      	b.n	8008674 <_strtod_l+0x614>
 800857e:	07e2      	lsls	r2, r4, #31
 8008580:	d505      	bpl.n	800858e <_strtod_l+0x52e>
 8008582:	9b08      	ldr	r3, [sp, #32]
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f7f8 f856 	bl	8000638 <__aeabi_dmul>
 800858c:	2301      	movs	r3, #1
 800858e:	9a08      	ldr	r2, [sp, #32]
 8008590:	3208      	adds	r2, #8
 8008592:	3601      	adds	r6, #1
 8008594:	1064      	asrs	r4, r4, #1
 8008596:	9208      	str	r2, [sp, #32]
 8008598:	e7cd      	b.n	8008536 <_strtod_l+0x4d6>
 800859a:	d0ed      	beq.n	8008578 <_strtod_l+0x518>
 800859c:	4264      	negs	r4, r4
 800859e:	f014 020f 	ands.w	r2, r4, #15
 80085a2:	d00a      	beq.n	80085ba <_strtod_l+0x55a>
 80085a4:	4b12      	ldr	r3, [pc, #72]	@ (80085f0 <_strtod_l+0x590>)
 80085a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085aa:	4650      	mov	r0, sl
 80085ac:	4659      	mov	r1, fp
 80085ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b2:	f7f8 f96b 	bl	800088c <__aeabi_ddiv>
 80085b6:	4682      	mov	sl, r0
 80085b8:	468b      	mov	fp, r1
 80085ba:	1124      	asrs	r4, r4, #4
 80085bc:	d0dc      	beq.n	8008578 <_strtod_l+0x518>
 80085be:	2c1f      	cmp	r4, #31
 80085c0:	dd20      	ble.n	8008604 <_strtod_l+0x5a4>
 80085c2:	2400      	movs	r4, #0
 80085c4:	46a0      	mov	r8, r4
 80085c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80085c8:	46a1      	mov	r9, r4
 80085ca:	9a05      	ldr	r2, [sp, #20]
 80085cc:	2322      	movs	r3, #34	@ 0x22
 80085ce:	f04f 0a00 	mov.w	sl, #0
 80085d2:	f04f 0b00 	mov.w	fp, #0
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	e768      	b.n	80084ac <_strtod_l+0x44c>
 80085da:	bf00      	nop
 80085dc:	0800a68d 	.word	0x0800a68d
 80085e0:	0800a8a4 	.word	0x0800a8a4
 80085e4:	0800a685 	.word	0x0800a685
 80085e8:	0800a6bc 	.word	0x0800a6bc
 80085ec:	0800aa4d 	.word	0x0800aa4d
 80085f0:	0800a7d8 	.word	0x0800a7d8
 80085f4:	0800a7b0 	.word	0x0800a7b0
 80085f8:	7ff00000 	.word	0x7ff00000
 80085fc:	7ca00000 	.word	0x7ca00000
 8008600:	7fefffff 	.word	0x7fefffff
 8008604:	f014 0310 	ands.w	r3, r4, #16
 8008608:	bf18      	it	ne
 800860a:	236a      	movne	r3, #106	@ 0x6a
 800860c:	4ea9      	ldr	r6, [pc, #676]	@ (80088b4 <_strtod_l+0x854>)
 800860e:	9308      	str	r3, [sp, #32]
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	2300      	movs	r3, #0
 8008616:	07e2      	lsls	r2, r4, #31
 8008618:	d504      	bpl.n	8008624 <_strtod_l+0x5c4>
 800861a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800861e:	f7f8 f80b 	bl	8000638 <__aeabi_dmul>
 8008622:	2301      	movs	r3, #1
 8008624:	1064      	asrs	r4, r4, #1
 8008626:	f106 0608 	add.w	r6, r6, #8
 800862a:	d1f4      	bne.n	8008616 <_strtod_l+0x5b6>
 800862c:	b10b      	cbz	r3, 8008632 <_strtod_l+0x5d2>
 800862e:	4682      	mov	sl, r0
 8008630:	468b      	mov	fp, r1
 8008632:	9b08      	ldr	r3, [sp, #32]
 8008634:	b1b3      	cbz	r3, 8008664 <_strtod_l+0x604>
 8008636:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800863a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800863e:	2b00      	cmp	r3, #0
 8008640:	4659      	mov	r1, fp
 8008642:	dd0f      	ble.n	8008664 <_strtod_l+0x604>
 8008644:	2b1f      	cmp	r3, #31
 8008646:	dd55      	ble.n	80086f4 <_strtod_l+0x694>
 8008648:	2b34      	cmp	r3, #52	@ 0x34
 800864a:	bfde      	ittt	le
 800864c:	f04f 33ff 	movle.w	r3, #4294967295
 8008650:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008654:	4093      	lslle	r3, r2
 8008656:	f04f 0a00 	mov.w	sl, #0
 800865a:	bfcc      	ite	gt
 800865c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008660:	ea03 0b01 	andle.w	fp, r3, r1
 8008664:	2200      	movs	r2, #0
 8008666:	2300      	movs	r3, #0
 8008668:	4650      	mov	r0, sl
 800866a:	4659      	mov	r1, fp
 800866c:	f7f8 fa4c 	bl	8000b08 <__aeabi_dcmpeq>
 8008670:	2800      	cmp	r0, #0
 8008672:	d1a6      	bne.n	80085c2 <_strtod_l+0x562>
 8008674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800867a:	9805      	ldr	r0, [sp, #20]
 800867c:	462b      	mov	r3, r5
 800867e:	463a      	mov	r2, r7
 8008680:	f7ff f8c6 	bl	8007810 <__s2b>
 8008684:	900a      	str	r0, [sp, #40]	@ 0x28
 8008686:	2800      	cmp	r0, #0
 8008688:	f43f af05 	beq.w	8008496 <_strtod_l+0x436>
 800868c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800868e:	2a00      	cmp	r2, #0
 8008690:	eba9 0308 	sub.w	r3, r9, r8
 8008694:	bfa8      	it	ge
 8008696:	2300      	movge	r3, #0
 8008698:	9312      	str	r3, [sp, #72]	@ 0x48
 800869a:	2400      	movs	r4, #0
 800869c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80086a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80086a2:	46a0      	mov	r8, r4
 80086a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086a6:	9805      	ldr	r0, [sp, #20]
 80086a8:	6859      	ldr	r1, [r3, #4]
 80086aa:	f7ff f809 	bl	80076c0 <_Balloc>
 80086ae:	4681      	mov	r9, r0
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f43f aef4 	beq.w	800849e <_strtod_l+0x43e>
 80086b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	3202      	adds	r2, #2
 80086bc:	f103 010c 	add.w	r1, r3, #12
 80086c0:	0092      	lsls	r2, r2, #2
 80086c2:	300c      	adds	r0, #12
 80086c4:	f000 fd72 	bl	80091ac <memcpy>
 80086c8:	ec4b ab10 	vmov	d0, sl, fp
 80086cc:	9805      	ldr	r0, [sp, #20]
 80086ce:	aa1c      	add	r2, sp, #112	@ 0x70
 80086d0:	a91b      	add	r1, sp, #108	@ 0x6c
 80086d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80086d6:	f7ff fbd7 	bl	8007e88 <__d2b>
 80086da:	901a      	str	r0, [sp, #104]	@ 0x68
 80086dc:	2800      	cmp	r0, #0
 80086de:	f43f aede 	beq.w	800849e <_strtod_l+0x43e>
 80086e2:	9805      	ldr	r0, [sp, #20]
 80086e4:	2101      	movs	r1, #1
 80086e6:	f7ff f929 	bl	800793c <__i2b>
 80086ea:	4680      	mov	r8, r0
 80086ec:	b948      	cbnz	r0, 8008702 <_strtod_l+0x6a2>
 80086ee:	f04f 0800 	mov.w	r8, #0
 80086f2:	e6d4      	b.n	800849e <_strtod_l+0x43e>
 80086f4:	f04f 32ff 	mov.w	r2, #4294967295
 80086f8:	fa02 f303 	lsl.w	r3, r2, r3
 80086fc:	ea03 0a0a 	and.w	sl, r3, sl
 8008700:	e7b0      	b.n	8008664 <_strtod_l+0x604>
 8008702:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008704:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008706:	2d00      	cmp	r5, #0
 8008708:	bfab      	itete	ge
 800870a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800870c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800870e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008710:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008712:	bfac      	ite	ge
 8008714:	18ef      	addge	r7, r5, r3
 8008716:	1b5e      	sublt	r6, r3, r5
 8008718:	9b08      	ldr	r3, [sp, #32]
 800871a:	1aed      	subs	r5, r5, r3
 800871c:	4415      	add	r5, r2
 800871e:	4b66      	ldr	r3, [pc, #408]	@ (80088b8 <_strtod_l+0x858>)
 8008720:	3d01      	subs	r5, #1
 8008722:	429d      	cmp	r5, r3
 8008724:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008728:	da50      	bge.n	80087cc <_strtod_l+0x76c>
 800872a:	1b5b      	subs	r3, r3, r5
 800872c:	2b1f      	cmp	r3, #31
 800872e:	eba2 0203 	sub.w	r2, r2, r3
 8008732:	f04f 0101 	mov.w	r1, #1
 8008736:	dc3d      	bgt.n	80087b4 <_strtod_l+0x754>
 8008738:	fa01 f303 	lsl.w	r3, r1, r3
 800873c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800873e:	2300      	movs	r3, #0
 8008740:	9310      	str	r3, [sp, #64]	@ 0x40
 8008742:	18bd      	adds	r5, r7, r2
 8008744:	9b08      	ldr	r3, [sp, #32]
 8008746:	42af      	cmp	r7, r5
 8008748:	4416      	add	r6, r2
 800874a:	441e      	add	r6, r3
 800874c:	463b      	mov	r3, r7
 800874e:	bfa8      	it	ge
 8008750:	462b      	movge	r3, r5
 8008752:	42b3      	cmp	r3, r6
 8008754:	bfa8      	it	ge
 8008756:	4633      	movge	r3, r6
 8008758:	2b00      	cmp	r3, #0
 800875a:	bfc2      	ittt	gt
 800875c:	1aed      	subgt	r5, r5, r3
 800875e:	1af6      	subgt	r6, r6, r3
 8008760:	1aff      	subgt	r7, r7, r3
 8008762:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008764:	2b00      	cmp	r3, #0
 8008766:	dd16      	ble.n	8008796 <_strtod_l+0x736>
 8008768:	4641      	mov	r1, r8
 800876a:	9805      	ldr	r0, [sp, #20]
 800876c:	461a      	mov	r2, r3
 800876e:	f7ff f9a5 	bl	8007abc <__pow5mult>
 8008772:	4680      	mov	r8, r0
 8008774:	2800      	cmp	r0, #0
 8008776:	d0ba      	beq.n	80086ee <_strtod_l+0x68e>
 8008778:	4601      	mov	r1, r0
 800877a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800877c:	9805      	ldr	r0, [sp, #20]
 800877e:	f7ff f8f3 	bl	8007968 <__multiply>
 8008782:	900e      	str	r0, [sp, #56]	@ 0x38
 8008784:	2800      	cmp	r0, #0
 8008786:	f43f ae8a 	beq.w	800849e <_strtod_l+0x43e>
 800878a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800878c:	9805      	ldr	r0, [sp, #20]
 800878e:	f7fe ffd7 	bl	8007740 <_Bfree>
 8008792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008794:	931a      	str	r3, [sp, #104]	@ 0x68
 8008796:	2d00      	cmp	r5, #0
 8008798:	dc1d      	bgt.n	80087d6 <_strtod_l+0x776>
 800879a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	dd23      	ble.n	80087e8 <_strtod_l+0x788>
 80087a0:	4649      	mov	r1, r9
 80087a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80087a4:	9805      	ldr	r0, [sp, #20]
 80087a6:	f7ff f989 	bl	8007abc <__pow5mult>
 80087aa:	4681      	mov	r9, r0
 80087ac:	b9e0      	cbnz	r0, 80087e8 <_strtod_l+0x788>
 80087ae:	f04f 0900 	mov.w	r9, #0
 80087b2:	e674      	b.n	800849e <_strtod_l+0x43e>
 80087b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80087b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80087bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80087c0:	35e2      	adds	r5, #226	@ 0xe2
 80087c2:	fa01 f305 	lsl.w	r3, r1, r5
 80087c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80087c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80087ca:	e7ba      	b.n	8008742 <_strtod_l+0x6e2>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80087d0:	2301      	movs	r3, #1
 80087d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087d4:	e7b5      	b.n	8008742 <_strtod_l+0x6e2>
 80087d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087d8:	9805      	ldr	r0, [sp, #20]
 80087da:	462a      	mov	r2, r5
 80087dc:	f7ff f9c8 	bl	8007b70 <__lshift>
 80087e0:	901a      	str	r0, [sp, #104]	@ 0x68
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d1d9      	bne.n	800879a <_strtod_l+0x73a>
 80087e6:	e65a      	b.n	800849e <_strtod_l+0x43e>
 80087e8:	2e00      	cmp	r6, #0
 80087ea:	dd07      	ble.n	80087fc <_strtod_l+0x79c>
 80087ec:	4649      	mov	r1, r9
 80087ee:	9805      	ldr	r0, [sp, #20]
 80087f0:	4632      	mov	r2, r6
 80087f2:	f7ff f9bd 	bl	8007b70 <__lshift>
 80087f6:	4681      	mov	r9, r0
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d0d8      	beq.n	80087ae <_strtod_l+0x74e>
 80087fc:	2f00      	cmp	r7, #0
 80087fe:	dd08      	ble.n	8008812 <_strtod_l+0x7b2>
 8008800:	4641      	mov	r1, r8
 8008802:	9805      	ldr	r0, [sp, #20]
 8008804:	463a      	mov	r2, r7
 8008806:	f7ff f9b3 	bl	8007b70 <__lshift>
 800880a:	4680      	mov	r8, r0
 800880c:	2800      	cmp	r0, #0
 800880e:	f43f ae46 	beq.w	800849e <_strtod_l+0x43e>
 8008812:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008814:	9805      	ldr	r0, [sp, #20]
 8008816:	464a      	mov	r2, r9
 8008818:	f7ff fa32 	bl	8007c80 <__mdiff>
 800881c:	4604      	mov	r4, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	f43f ae3d 	beq.w	800849e <_strtod_l+0x43e>
 8008824:	68c3      	ldr	r3, [r0, #12]
 8008826:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008828:	2300      	movs	r3, #0
 800882a:	60c3      	str	r3, [r0, #12]
 800882c:	4641      	mov	r1, r8
 800882e:	f7ff fa0b 	bl	8007c48 <__mcmp>
 8008832:	2800      	cmp	r0, #0
 8008834:	da46      	bge.n	80088c4 <_strtod_l+0x864>
 8008836:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008838:	ea53 030a 	orrs.w	r3, r3, sl
 800883c:	d16c      	bne.n	8008918 <_strtod_l+0x8b8>
 800883e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008842:	2b00      	cmp	r3, #0
 8008844:	d168      	bne.n	8008918 <_strtod_l+0x8b8>
 8008846:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800884a:	0d1b      	lsrs	r3, r3, #20
 800884c:	051b      	lsls	r3, r3, #20
 800884e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008852:	d961      	bls.n	8008918 <_strtod_l+0x8b8>
 8008854:	6963      	ldr	r3, [r4, #20]
 8008856:	b913      	cbnz	r3, 800885e <_strtod_l+0x7fe>
 8008858:	6923      	ldr	r3, [r4, #16]
 800885a:	2b01      	cmp	r3, #1
 800885c:	dd5c      	ble.n	8008918 <_strtod_l+0x8b8>
 800885e:	4621      	mov	r1, r4
 8008860:	2201      	movs	r2, #1
 8008862:	9805      	ldr	r0, [sp, #20]
 8008864:	f7ff f984 	bl	8007b70 <__lshift>
 8008868:	4641      	mov	r1, r8
 800886a:	4604      	mov	r4, r0
 800886c:	f7ff f9ec 	bl	8007c48 <__mcmp>
 8008870:	2800      	cmp	r0, #0
 8008872:	dd51      	ble.n	8008918 <_strtod_l+0x8b8>
 8008874:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008878:	9a08      	ldr	r2, [sp, #32]
 800887a:	0d1b      	lsrs	r3, r3, #20
 800887c:	051b      	lsls	r3, r3, #20
 800887e:	2a00      	cmp	r2, #0
 8008880:	d06b      	beq.n	800895a <_strtod_l+0x8fa>
 8008882:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008886:	d868      	bhi.n	800895a <_strtod_l+0x8fa>
 8008888:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800888c:	f67f ae9d 	bls.w	80085ca <_strtod_l+0x56a>
 8008890:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <_strtod_l+0x85c>)
 8008892:	4650      	mov	r0, sl
 8008894:	4659      	mov	r1, fp
 8008896:	2200      	movs	r2, #0
 8008898:	f7f7 fece 	bl	8000638 <__aeabi_dmul>
 800889c:	4b08      	ldr	r3, [pc, #32]	@ (80088c0 <_strtod_l+0x860>)
 800889e:	400b      	ands	r3, r1
 80088a0:	4682      	mov	sl, r0
 80088a2:	468b      	mov	fp, r1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f47f ae05 	bne.w	80084b4 <_strtod_l+0x454>
 80088aa:	9a05      	ldr	r2, [sp, #20]
 80088ac:	2322      	movs	r3, #34	@ 0x22
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	e600      	b.n	80084b4 <_strtod_l+0x454>
 80088b2:	bf00      	nop
 80088b4:	0800a8d0 	.word	0x0800a8d0
 80088b8:	fffffc02 	.word	0xfffffc02
 80088bc:	39500000 	.word	0x39500000
 80088c0:	7ff00000 	.word	0x7ff00000
 80088c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80088c8:	d165      	bne.n	8008996 <_strtod_l+0x936>
 80088ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80088cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088d0:	b35a      	cbz	r2, 800892a <_strtod_l+0x8ca>
 80088d2:	4a9f      	ldr	r2, [pc, #636]	@ (8008b50 <_strtod_l+0xaf0>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d12b      	bne.n	8008930 <_strtod_l+0x8d0>
 80088d8:	9b08      	ldr	r3, [sp, #32]
 80088da:	4651      	mov	r1, sl
 80088dc:	b303      	cbz	r3, 8008920 <_strtod_l+0x8c0>
 80088de:	4b9d      	ldr	r3, [pc, #628]	@ (8008b54 <_strtod_l+0xaf4>)
 80088e0:	465a      	mov	r2, fp
 80088e2:	4013      	ands	r3, r2
 80088e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80088e8:	f04f 32ff 	mov.w	r2, #4294967295
 80088ec:	d81b      	bhi.n	8008926 <_strtod_l+0x8c6>
 80088ee:	0d1b      	lsrs	r3, r3, #20
 80088f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	4299      	cmp	r1, r3
 80088fa:	d119      	bne.n	8008930 <_strtod_l+0x8d0>
 80088fc:	4b96      	ldr	r3, [pc, #600]	@ (8008b58 <_strtod_l+0xaf8>)
 80088fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008900:	429a      	cmp	r2, r3
 8008902:	d102      	bne.n	800890a <_strtod_l+0x8aa>
 8008904:	3101      	adds	r1, #1
 8008906:	f43f adca 	beq.w	800849e <_strtod_l+0x43e>
 800890a:	4b92      	ldr	r3, [pc, #584]	@ (8008b54 <_strtod_l+0xaf4>)
 800890c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800890e:	401a      	ands	r2, r3
 8008910:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008914:	f04f 0a00 	mov.w	sl, #0
 8008918:	9b08      	ldr	r3, [sp, #32]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1b8      	bne.n	8008890 <_strtod_l+0x830>
 800891e:	e5c9      	b.n	80084b4 <_strtod_l+0x454>
 8008920:	f04f 33ff 	mov.w	r3, #4294967295
 8008924:	e7e8      	b.n	80088f8 <_strtod_l+0x898>
 8008926:	4613      	mov	r3, r2
 8008928:	e7e6      	b.n	80088f8 <_strtod_l+0x898>
 800892a:	ea53 030a 	orrs.w	r3, r3, sl
 800892e:	d0a1      	beq.n	8008874 <_strtod_l+0x814>
 8008930:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008932:	b1db      	cbz	r3, 800896c <_strtod_l+0x90c>
 8008934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008936:	4213      	tst	r3, r2
 8008938:	d0ee      	beq.n	8008918 <_strtod_l+0x8b8>
 800893a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800893c:	9a08      	ldr	r2, [sp, #32]
 800893e:	4650      	mov	r0, sl
 8008940:	4659      	mov	r1, fp
 8008942:	b1bb      	cbz	r3, 8008974 <_strtod_l+0x914>
 8008944:	f7ff fb6e 	bl	8008024 <sulp>
 8008948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800894c:	ec53 2b10 	vmov	r2, r3, d0
 8008950:	f7f7 fcbc 	bl	80002cc <__adddf3>
 8008954:	4682      	mov	sl, r0
 8008956:	468b      	mov	fp, r1
 8008958:	e7de      	b.n	8008918 <_strtod_l+0x8b8>
 800895a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800895e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008962:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008966:	f04f 3aff 	mov.w	sl, #4294967295
 800896a:	e7d5      	b.n	8008918 <_strtod_l+0x8b8>
 800896c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800896e:	ea13 0f0a 	tst.w	r3, sl
 8008972:	e7e1      	b.n	8008938 <_strtod_l+0x8d8>
 8008974:	f7ff fb56 	bl	8008024 <sulp>
 8008978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800897c:	ec53 2b10 	vmov	r2, r3, d0
 8008980:	f7f7 fca2 	bl	80002c8 <__aeabi_dsub>
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	4682      	mov	sl, r0
 800898a:	468b      	mov	fp, r1
 800898c:	f7f8 f8bc 	bl	8000b08 <__aeabi_dcmpeq>
 8008990:	2800      	cmp	r0, #0
 8008992:	d0c1      	beq.n	8008918 <_strtod_l+0x8b8>
 8008994:	e619      	b.n	80085ca <_strtod_l+0x56a>
 8008996:	4641      	mov	r1, r8
 8008998:	4620      	mov	r0, r4
 800899a:	f7ff facd 	bl	8007f38 <__ratio>
 800899e:	ec57 6b10 	vmov	r6, r7, d0
 80089a2:	2200      	movs	r2, #0
 80089a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80089a8:	4630      	mov	r0, r6
 80089aa:	4639      	mov	r1, r7
 80089ac:	f7f8 f8c0 	bl	8000b30 <__aeabi_dcmple>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d06f      	beq.n	8008a94 <_strtod_l+0xa34>
 80089b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d17a      	bne.n	8008ab0 <_strtod_l+0xa50>
 80089ba:	f1ba 0f00 	cmp.w	sl, #0
 80089be:	d158      	bne.n	8008a72 <_strtod_l+0xa12>
 80089c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d15a      	bne.n	8008a80 <_strtod_l+0xa20>
 80089ca:	4b64      	ldr	r3, [pc, #400]	@ (8008b5c <_strtod_l+0xafc>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	4630      	mov	r0, r6
 80089d0:	4639      	mov	r1, r7
 80089d2:	f7f8 f8a3 	bl	8000b1c <__aeabi_dcmplt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d159      	bne.n	8008a8e <_strtod_l+0xa2e>
 80089da:	4630      	mov	r0, r6
 80089dc:	4639      	mov	r1, r7
 80089de:	4b60      	ldr	r3, [pc, #384]	@ (8008b60 <_strtod_l+0xb00>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	f7f7 fe29 	bl	8000638 <__aeabi_dmul>
 80089e6:	4606      	mov	r6, r0
 80089e8:	460f      	mov	r7, r1
 80089ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80089ee:	9606      	str	r6, [sp, #24]
 80089f0:	9307      	str	r3, [sp, #28]
 80089f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089f6:	4d57      	ldr	r5, [pc, #348]	@ (8008b54 <_strtod_l+0xaf4>)
 80089f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80089fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089fe:	401d      	ands	r5, r3
 8008a00:	4b58      	ldr	r3, [pc, #352]	@ (8008b64 <_strtod_l+0xb04>)
 8008a02:	429d      	cmp	r5, r3
 8008a04:	f040 80b2 	bne.w	8008b6c <_strtod_l+0xb0c>
 8008a08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008a0e:	ec4b ab10 	vmov	d0, sl, fp
 8008a12:	f7ff f9c9 	bl	8007da8 <__ulp>
 8008a16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a1a:	ec51 0b10 	vmov	r0, r1, d0
 8008a1e:	f7f7 fe0b 	bl	8000638 <__aeabi_dmul>
 8008a22:	4652      	mov	r2, sl
 8008a24:	465b      	mov	r3, fp
 8008a26:	f7f7 fc51 	bl	80002cc <__adddf3>
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4949      	ldr	r1, [pc, #292]	@ (8008b54 <_strtod_l+0xaf4>)
 8008a2e:	4a4e      	ldr	r2, [pc, #312]	@ (8008b68 <_strtod_l+0xb08>)
 8008a30:	4019      	ands	r1, r3
 8008a32:	4291      	cmp	r1, r2
 8008a34:	4682      	mov	sl, r0
 8008a36:	d942      	bls.n	8008abe <_strtod_l+0xa5e>
 8008a38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a3a:	4b47      	ldr	r3, [pc, #284]	@ (8008b58 <_strtod_l+0xaf8>)
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d103      	bne.n	8008a48 <_strtod_l+0x9e8>
 8008a40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a42:	3301      	adds	r3, #1
 8008a44:	f43f ad2b 	beq.w	800849e <_strtod_l+0x43e>
 8008a48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008b58 <_strtod_l+0xaf8>
 8008a4c:	f04f 3aff 	mov.w	sl, #4294967295
 8008a50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a52:	9805      	ldr	r0, [sp, #20]
 8008a54:	f7fe fe74 	bl	8007740 <_Bfree>
 8008a58:	9805      	ldr	r0, [sp, #20]
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	f7fe fe70 	bl	8007740 <_Bfree>
 8008a60:	9805      	ldr	r0, [sp, #20]
 8008a62:	4641      	mov	r1, r8
 8008a64:	f7fe fe6c 	bl	8007740 <_Bfree>
 8008a68:	9805      	ldr	r0, [sp, #20]
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	f7fe fe68 	bl	8007740 <_Bfree>
 8008a70:	e618      	b.n	80086a4 <_strtod_l+0x644>
 8008a72:	f1ba 0f01 	cmp.w	sl, #1
 8008a76:	d103      	bne.n	8008a80 <_strtod_l+0xa20>
 8008a78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f43f ada5 	beq.w	80085ca <_strtod_l+0x56a>
 8008a80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008b30 <_strtod_l+0xad0>
 8008a84:	4f35      	ldr	r7, [pc, #212]	@ (8008b5c <_strtod_l+0xafc>)
 8008a86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a8a:	2600      	movs	r6, #0
 8008a8c:	e7b1      	b.n	80089f2 <_strtod_l+0x992>
 8008a8e:	4f34      	ldr	r7, [pc, #208]	@ (8008b60 <_strtod_l+0xb00>)
 8008a90:	2600      	movs	r6, #0
 8008a92:	e7aa      	b.n	80089ea <_strtod_l+0x98a>
 8008a94:	4b32      	ldr	r3, [pc, #200]	@ (8008b60 <_strtod_l+0xb00>)
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f7f7 fdcc 	bl	8000638 <__aeabi_dmul>
 8008aa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460f      	mov	r7, r1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d09f      	beq.n	80089ea <_strtod_l+0x98a>
 8008aaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008aae:	e7a0      	b.n	80089f2 <_strtod_l+0x992>
 8008ab0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008b38 <_strtod_l+0xad8>
 8008ab4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ab8:	ec57 6b17 	vmov	r6, r7, d7
 8008abc:	e799      	b.n	80089f2 <_strtod_l+0x992>
 8008abe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008ac2:	9b08      	ldr	r3, [sp, #32]
 8008ac4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1c1      	bne.n	8008a50 <_strtod_l+0x9f0>
 8008acc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ad0:	0d1b      	lsrs	r3, r3, #20
 8008ad2:	051b      	lsls	r3, r3, #20
 8008ad4:	429d      	cmp	r5, r3
 8008ad6:	d1bb      	bne.n	8008a50 <_strtod_l+0x9f0>
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f8 f95c 	bl	8000d98 <__aeabi_d2lz>
 8008ae0:	f7f7 fd7c 	bl	80005dc <__aeabi_l2d>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4630      	mov	r0, r6
 8008aea:	4639      	mov	r1, r7
 8008aec:	f7f7 fbec 	bl	80002c8 <__aeabi_dsub>
 8008af0:	460b      	mov	r3, r1
 8008af2:	4602      	mov	r2, r0
 8008af4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008af8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008afe:	ea46 060a 	orr.w	r6, r6, sl
 8008b02:	431e      	orrs	r6, r3
 8008b04:	d06f      	beq.n	8008be6 <_strtod_l+0xb86>
 8008b06:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b40 <_strtod_l+0xae0>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f7f8 f806 	bl	8000b1c <__aeabi_dcmplt>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	f47f accf 	bne.w	80084b4 <_strtod_l+0x454>
 8008b16:	a30c      	add	r3, pc, #48	@ (adr r3, 8008b48 <_strtod_l+0xae8>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b20:	f7f8 f81a 	bl	8000b58 <__aeabi_dcmpgt>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d093      	beq.n	8008a50 <_strtod_l+0x9f0>
 8008b28:	e4c4      	b.n	80084b4 <_strtod_l+0x454>
 8008b2a:	bf00      	nop
 8008b2c:	f3af 8000 	nop.w
 8008b30:	00000000 	.word	0x00000000
 8008b34:	bff00000 	.word	0xbff00000
 8008b38:	00000000 	.word	0x00000000
 8008b3c:	3ff00000 	.word	0x3ff00000
 8008b40:	94a03595 	.word	0x94a03595
 8008b44:	3fdfffff 	.word	0x3fdfffff
 8008b48:	35afe535 	.word	0x35afe535
 8008b4c:	3fe00000 	.word	0x3fe00000
 8008b50:	000fffff 	.word	0x000fffff
 8008b54:	7ff00000 	.word	0x7ff00000
 8008b58:	7fefffff 	.word	0x7fefffff
 8008b5c:	3ff00000 	.word	0x3ff00000
 8008b60:	3fe00000 	.word	0x3fe00000
 8008b64:	7fe00000 	.word	0x7fe00000
 8008b68:	7c9fffff 	.word	0x7c9fffff
 8008b6c:	9b08      	ldr	r3, [sp, #32]
 8008b6e:	b323      	cbz	r3, 8008bba <_strtod_l+0xb5a>
 8008b70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008b74:	d821      	bhi.n	8008bba <_strtod_l+0xb5a>
 8008b76:	a328      	add	r3, pc, #160	@ (adr r3, 8008c18 <_strtod_l+0xbb8>)
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	f7f7 ffd6 	bl	8000b30 <__aeabi_dcmple>
 8008b84:	b1a0      	cbz	r0, 8008bb0 <_strtod_l+0xb50>
 8008b86:	4639      	mov	r1, r7
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f7f8 f82d 	bl	8000be8 <__aeabi_d2uiz>
 8008b8e:	2801      	cmp	r0, #1
 8008b90:	bf38      	it	cc
 8008b92:	2001      	movcc	r0, #1
 8008b94:	f7f7 fcd6 	bl	8000544 <__aeabi_ui2d>
 8008b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	b9fb      	cbnz	r3, 8008be0 <_strtod_l+0xb80>
 8008ba0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ba4:	9014      	str	r0, [sp, #80]	@ 0x50
 8008ba6:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ba8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008bac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008bb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008bb6:	1b5b      	subs	r3, r3, r5
 8008bb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008bba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008bbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008bc2:	f7ff f8f1 	bl	8007da8 <__ulp>
 8008bc6:	4650      	mov	r0, sl
 8008bc8:	ec53 2b10 	vmov	r2, r3, d0
 8008bcc:	4659      	mov	r1, fp
 8008bce:	f7f7 fd33 	bl	8000638 <__aeabi_dmul>
 8008bd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008bd6:	f7f7 fb79 	bl	80002cc <__adddf3>
 8008bda:	4682      	mov	sl, r0
 8008bdc:	468b      	mov	fp, r1
 8008bde:	e770      	b.n	8008ac2 <_strtod_l+0xa62>
 8008be0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008be4:	e7e0      	b.n	8008ba8 <_strtod_l+0xb48>
 8008be6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c20 <_strtod_l+0xbc0>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	f7f7 ff96 	bl	8000b1c <__aeabi_dcmplt>
 8008bf0:	e798      	b.n	8008b24 <_strtod_l+0xac4>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008bf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bfa:	6013      	str	r3, [r2, #0]
 8008bfc:	f7ff ba6d 	b.w	80080da <_strtod_l+0x7a>
 8008c00:	2a65      	cmp	r2, #101	@ 0x65
 8008c02:	f43f ab66 	beq.w	80082d2 <_strtod_l+0x272>
 8008c06:	2a45      	cmp	r2, #69	@ 0x45
 8008c08:	f43f ab63 	beq.w	80082d2 <_strtod_l+0x272>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f7ff bb9e 	b.w	800834e <_strtod_l+0x2ee>
 8008c12:	bf00      	nop
 8008c14:	f3af 8000 	nop.w
 8008c18:	ffc00000 	.word	0xffc00000
 8008c1c:	41dfffff 	.word	0x41dfffff
 8008c20:	94a03595 	.word	0x94a03595
 8008c24:	3fcfffff 	.word	0x3fcfffff

08008c28 <_strtod_r>:
 8008c28:	4b01      	ldr	r3, [pc, #4]	@ (8008c30 <_strtod_r+0x8>)
 8008c2a:	f7ff ba19 	b.w	8008060 <_strtod_l>
 8008c2e:	bf00      	nop
 8008c30:	20000084 	.word	0x20000084

08008c34 <_strtol_l.constprop.0>:
 8008c34:	2b24      	cmp	r3, #36	@ 0x24
 8008c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c3a:	4686      	mov	lr, r0
 8008c3c:	4690      	mov	r8, r2
 8008c3e:	d801      	bhi.n	8008c44 <_strtol_l.constprop.0+0x10>
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d106      	bne.n	8008c52 <_strtol_l.constprop.0+0x1e>
 8008c44:	f7fd fdba 	bl	80067bc <__errno>
 8008c48:	2316      	movs	r3, #22
 8008c4a:	6003      	str	r3, [r0, #0]
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c52:	4834      	ldr	r0, [pc, #208]	@ (8008d24 <_strtol_l.constprop.0+0xf0>)
 8008c54:	460d      	mov	r5, r1
 8008c56:	462a      	mov	r2, r5
 8008c58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c5c:	5d06      	ldrb	r6, [r0, r4]
 8008c5e:	f016 0608 	ands.w	r6, r6, #8
 8008c62:	d1f8      	bne.n	8008c56 <_strtol_l.constprop.0+0x22>
 8008c64:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c66:	d12d      	bne.n	8008cc4 <_strtol_l.constprop.0+0x90>
 8008c68:	782c      	ldrb	r4, [r5, #0]
 8008c6a:	2601      	movs	r6, #1
 8008c6c:	1c95      	adds	r5, r2, #2
 8008c6e:	f033 0210 	bics.w	r2, r3, #16
 8008c72:	d109      	bne.n	8008c88 <_strtol_l.constprop.0+0x54>
 8008c74:	2c30      	cmp	r4, #48	@ 0x30
 8008c76:	d12a      	bne.n	8008cce <_strtol_l.constprop.0+0x9a>
 8008c78:	782a      	ldrb	r2, [r5, #0]
 8008c7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c7e:	2a58      	cmp	r2, #88	@ 0x58
 8008c80:	d125      	bne.n	8008cce <_strtol_l.constprop.0+0x9a>
 8008c82:	786c      	ldrb	r4, [r5, #1]
 8008c84:	2310      	movs	r3, #16
 8008c86:	3502      	adds	r5, #2
 8008c88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008c8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c90:	2200      	movs	r2, #0
 8008c92:	fbbc f9f3 	udiv	r9, ip, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ca0:	2f09      	cmp	r7, #9
 8008ca2:	d81b      	bhi.n	8008cdc <_strtol_l.constprop.0+0xa8>
 8008ca4:	463c      	mov	r4, r7
 8008ca6:	42a3      	cmp	r3, r4
 8008ca8:	dd27      	ble.n	8008cfa <_strtol_l.constprop.0+0xc6>
 8008caa:	1c57      	adds	r7, r2, #1
 8008cac:	d007      	beq.n	8008cbe <_strtol_l.constprop.0+0x8a>
 8008cae:	4581      	cmp	r9, r0
 8008cb0:	d320      	bcc.n	8008cf4 <_strtol_l.constprop.0+0xc0>
 8008cb2:	d101      	bne.n	8008cb8 <_strtol_l.constprop.0+0x84>
 8008cb4:	45a2      	cmp	sl, r4
 8008cb6:	db1d      	blt.n	8008cf4 <_strtol_l.constprop.0+0xc0>
 8008cb8:	fb00 4003 	mla	r0, r0, r3, r4
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cc2:	e7eb      	b.n	8008c9c <_strtol_l.constprop.0+0x68>
 8008cc4:	2c2b      	cmp	r4, #43	@ 0x2b
 8008cc6:	bf04      	itt	eq
 8008cc8:	782c      	ldrbeq	r4, [r5, #0]
 8008cca:	1c95      	addeq	r5, r2, #2
 8008ccc:	e7cf      	b.n	8008c6e <_strtol_l.constprop.0+0x3a>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1da      	bne.n	8008c88 <_strtol_l.constprop.0+0x54>
 8008cd2:	2c30      	cmp	r4, #48	@ 0x30
 8008cd4:	bf0c      	ite	eq
 8008cd6:	2308      	moveq	r3, #8
 8008cd8:	230a      	movne	r3, #10
 8008cda:	e7d5      	b.n	8008c88 <_strtol_l.constprop.0+0x54>
 8008cdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008ce0:	2f19      	cmp	r7, #25
 8008ce2:	d801      	bhi.n	8008ce8 <_strtol_l.constprop.0+0xb4>
 8008ce4:	3c37      	subs	r4, #55	@ 0x37
 8008ce6:	e7de      	b.n	8008ca6 <_strtol_l.constprop.0+0x72>
 8008ce8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008cec:	2f19      	cmp	r7, #25
 8008cee:	d804      	bhi.n	8008cfa <_strtol_l.constprop.0+0xc6>
 8008cf0:	3c57      	subs	r4, #87	@ 0x57
 8008cf2:	e7d8      	b.n	8008ca6 <_strtol_l.constprop.0+0x72>
 8008cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf8:	e7e1      	b.n	8008cbe <_strtol_l.constprop.0+0x8a>
 8008cfa:	1c53      	adds	r3, r2, #1
 8008cfc:	d108      	bne.n	8008d10 <_strtol_l.constprop.0+0xdc>
 8008cfe:	2322      	movs	r3, #34	@ 0x22
 8008d00:	f8ce 3000 	str.w	r3, [lr]
 8008d04:	4660      	mov	r0, ip
 8008d06:	f1b8 0f00 	cmp.w	r8, #0
 8008d0a:	d0a0      	beq.n	8008c4e <_strtol_l.constprop.0+0x1a>
 8008d0c:	1e69      	subs	r1, r5, #1
 8008d0e:	e006      	b.n	8008d1e <_strtol_l.constprop.0+0xea>
 8008d10:	b106      	cbz	r6, 8008d14 <_strtol_l.constprop.0+0xe0>
 8008d12:	4240      	negs	r0, r0
 8008d14:	f1b8 0f00 	cmp.w	r8, #0
 8008d18:	d099      	beq.n	8008c4e <_strtol_l.constprop.0+0x1a>
 8008d1a:	2a00      	cmp	r2, #0
 8008d1c:	d1f6      	bne.n	8008d0c <_strtol_l.constprop.0+0xd8>
 8008d1e:	f8c8 1000 	str.w	r1, [r8]
 8008d22:	e794      	b.n	8008c4e <_strtol_l.constprop.0+0x1a>
 8008d24:	0800a8f9 	.word	0x0800a8f9

08008d28 <_strtol_r>:
 8008d28:	f7ff bf84 	b.w	8008c34 <_strtol_l.constprop.0>

08008d2c <__ssputs_r>:
 8008d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d30:	688e      	ldr	r6, [r1, #8]
 8008d32:	461f      	mov	r7, r3
 8008d34:	42be      	cmp	r6, r7
 8008d36:	680b      	ldr	r3, [r1, #0]
 8008d38:	4682      	mov	sl, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4690      	mov	r8, r2
 8008d3e:	d82d      	bhi.n	8008d9c <__ssputs_r+0x70>
 8008d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d48:	d026      	beq.n	8008d98 <__ssputs_r+0x6c>
 8008d4a:	6965      	ldr	r5, [r4, #20]
 8008d4c:	6909      	ldr	r1, [r1, #16]
 8008d4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d52:	eba3 0901 	sub.w	r9, r3, r1
 8008d56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d5a:	1c7b      	adds	r3, r7, #1
 8008d5c:	444b      	add	r3, r9
 8008d5e:	106d      	asrs	r5, r5, #1
 8008d60:	429d      	cmp	r5, r3
 8008d62:	bf38      	it	cc
 8008d64:	461d      	movcc	r5, r3
 8008d66:	0553      	lsls	r3, r2, #21
 8008d68:	d527      	bpl.n	8008dba <__ssputs_r+0x8e>
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	f7fe fc1c 	bl	80075a8 <_malloc_r>
 8008d70:	4606      	mov	r6, r0
 8008d72:	b360      	cbz	r0, 8008dce <__ssputs_r+0xa2>
 8008d74:	6921      	ldr	r1, [r4, #16]
 8008d76:	464a      	mov	r2, r9
 8008d78:	f000 fa18 	bl	80091ac <memcpy>
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d86:	81a3      	strh	r3, [r4, #12]
 8008d88:	6126      	str	r6, [r4, #16]
 8008d8a:	6165      	str	r5, [r4, #20]
 8008d8c:	444e      	add	r6, r9
 8008d8e:	eba5 0509 	sub.w	r5, r5, r9
 8008d92:	6026      	str	r6, [r4, #0]
 8008d94:	60a5      	str	r5, [r4, #8]
 8008d96:	463e      	mov	r6, r7
 8008d98:	42be      	cmp	r6, r7
 8008d9a:	d900      	bls.n	8008d9e <__ssputs_r+0x72>
 8008d9c:	463e      	mov	r6, r7
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	4632      	mov	r2, r6
 8008da2:	4641      	mov	r1, r8
 8008da4:	f000 f9c6 	bl	8009134 <memmove>
 8008da8:	68a3      	ldr	r3, [r4, #8]
 8008daa:	1b9b      	subs	r3, r3, r6
 8008dac:	60a3      	str	r3, [r4, #8]
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	4433      	add	r3, r6
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	2000      	movs	r0, #0
 8008db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dba:	462a      	mov	r2, r5
 8008dbc:	f000 fd89 	bl	80098d2 <_realloc_r>
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d1e0      	bne.n	8008d88 <__ssputs_r+0x5c>
 8008dc6:	6921      	ldr	r1, [r4, #16]
 8008dc8:	4650      	mov	r0, sl
 8008dca:	f7fe fb79 	bl	80074c0 <_free_r>
 8008dce:	230c      	movs	r3, #12
 8008dd0:	f8ca 3000 	str.w	r3, [sl]
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dda:	81a3      	strh	r3, [r4, #12]
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	e7e9      	b.n	8008db6 <__ssputs_r+0x8a>
	...

08008de4 <_svfiprintf_r>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	4698      	mov	r8, r3
 8008dea:	898b      	ldrh	r3, [r1, #12]
 8008dec:	061b      	lsls	r3, r3, #24
 8008dee:	b09d      	sub	sp, #116	@ 0x74
 8008df0:	4607      	mov	r7, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	d510      	bpl.n	8008e1a <_svfiprintf_r+0x36>
 8008df8:	690b      	ldr	r3, [r1, #16]
 8008dfa:	b973      	cbnz	r3, 8008e1a <_svfiprintf_r+0x36>
 8008dfc:	2140      	movs	r1, #64	@ 0x40
 8008dfe:	f7fe fbd3 	bl	80075a8 <_malloc_r>
 8008e02:	6028      	str	r0, [r5, #0]
 8008e04:	6128      	str	r0, [r5, #16]
 8008e06:	b930      	cbnz	r0, 8008e16 <_svfiprintf_r+0x32>
 8008e08:	230c      	movs	r3, #12
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	b01d      	add	sp, #116	@ 0x74
 8008e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e16:	2340      	movs	r3, #64	@ 0x40
 8008e18:	616b      	str	r3, [r5, #20]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e1e:	2320      	movs	r3, #32
 8008e20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e28:	2330      	movs	r3, #48	@ 0x30
 8008e2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008fc8 <_svfiprintf_r+0x1e4>
 8008e2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e32:	f04f 0901 	mov.w	r9, #1
 8008e36:	4623      	mov	r3, r4
 8008e38:	469a      	mov	sl, r3
 8008e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e3e:	b10a      	cbz	r2, 8008e44 <_svfiprintf_r+0x60>
 8008e40:	2a25      	cmp	r2, #37	@ 0x25
 8008e42:	d1f9      	bne.n	8008e38 <_svfiprintf_r+0x54>
 8008e44:	ebba 0b04 	subs.w	fp, sl, r4
 8008e48:	d00b      	beq.n	8008e62 <_svfiprintf_r+0x7e>
 8008e4a:	465b      	mov	r3, fp
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff ff6b 	bl	8008d2c <__ssputs_r>
 8008e56:	3001      	adds	r0, #1
 8008e58:	f000 80a7 	beq.w	8008faa <_svfiprintf_r+0x1c6>
 8008e5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e5e:	445a      	add	r2, fp
 8008e60:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e62:	f89a 3000 	ldrb.w	r3, [sl]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 809f 	beq.w	8008faa <_svfiprintf_r+0x1c6>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e76:	f10a 0a01 	add.w	sl, sl, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	9307      	str	r3, [sp, #28]
 8008e7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e82:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e84:	4654      	mov	r4, sl
 8008e86:	2205      	movs	r2, #5
 8008e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8c:	484e      	ldr	r0, [pc, #312]	@ (8008fc8 <_svfiprintf_r+0x1e4>)
 8008e8e:	f7f7 f9bf 	bl	8000210 <memchr>
 8008e92:	9a04      	ldr	r2, [sp, #16]
 8008e94:	b9d8      	cbnz	r0, 8008ece <_svfiprintf_r+0xea>
 8008e96:	06d0      	lsls	r0, r2, #27
 8008e98:	bf44      	itt	mi
 8008e9a:	2320      	movmi	r3, #32
 8008e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ea0:	0711      	lsls	r1, r2, #28
 8008ea2:	bf44      	itt	mi
 8008ea4:	232b      	movmi	r3, #43	@ 0x2b
 8008ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8008eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eb0:	d015      	beq.n	8008ede <_svfiprintf_r+0xfa>
 8008eb2:	9a07      	ldr	r2, [sp, #28]
 8008eb4:	4654      	mov	r4, sl
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	f04f 0c0a 	mov.w	ip, #10
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ec2:	3b30      	subs	r3, #48	@ 0x30
 8008ec4:	2b09      	cmp	r3, #9
 8008ec6:	d94b      	bls.n	8008f60 <_svfiprintf_r+0x17c>
 8008ec8:	b1b0      	cbz	r0, 8008ef8 <_svfiprintf_r+0x114>
 8008eca:	9207      	str	r2, [sp, #28]
 8008ecc:	e014      	b.n	8008ef8 <_svfiprintf_r+0x114>
 8008ece:	eba0 0308 	sub.w	r3, r0, r8
 8008ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	46a2      	mov	sl, r4
 8008edc:	e7d2      	b.n	8008e84 <_svfiprintf_r+0xa0>
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	1d19      	adds	r1, r3, #4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	9103      	str	r1, [sp, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bfbb      	ittet	lt
 8008eea:	425b      	neglt	r3, r3
 8008eec:	f042 0202 	orrlt.w	r2, r2, #2
 8008ef0:	9307      	strge	r3, [sp, #28]
 8008ef2:	9307      	strlt	r3, [sp, #28]
 8008ef4:	bfb8      	it	lt
 8008ef6:	9204      	strlt	r2, [sp, #16]
 8008ef8:	7823      	ldrb	r3, [r4, #0]
 8008efa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008efc:	d10a      	bne.n	8008f14 <_svfiprintf_r+0x130>
 8008efe:	7863      	ldrb	r3, [r4, #1]
 8008f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f02:	d132      	bne.n	8008f6a <_svfiprintf_r+0x186>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	1d1a      	adds	r2, r3, #4
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	9203      	str	r2, [sp, #12]
 8008f0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f10:	3402      	adds	r4, #2
 8008f12:	9305      	str	r3, [sp, #20]
 8008f14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008fd8 <_svfiprintf_r+0x1f4>
 8008f18:	7821      	ldrb	r1, [r4, #0]
 8008f1a:	2203      	movs	r2, #3
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	f7f7 f977 	bl	8000210 <memchr>
 8008f22:	b138      	cbz	r0, 8008f34 <_svfiprintf_r+0x150>
 8008f24:	9b04      	ldr	r3, [sp, #16]
 8008f26:	eba0 000a 	sub.w	r0, r0, sl
 8008f2a:	2240      	movs	r2, #64	@ 0x40
 8008f2c:	4082      	lsls	r2, r0
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	3401      	adds	r4, #1
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f38:	4824      	ldr	r0, [pc, #144]	@ (8008fcc <_svfiprintf_r+0x1e8>)
 8008f3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f3e:	2206      	movs	r2, #6
 8008f40:	f7f7 f966 	bl	8000210 <memchr>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d036      	beq.n	8008fb6 <_svfiprintf_r+0x1d2>
 8008f48:	4b21      	ldr	r3, [pc, #132]	@ (8008fd0 <_svfiprintf_r+0x1ec>)
 8008f4a:	bb1b      	cbnz	r3, 8008f94 <_svfiprintf_r+0x1b0>
 8008f4c:	9b03      	ldr	r3, [sp, #12]
 8008f4e:	3307      	adds	r3, #7
 8008f50:	f023 0307 	bic.w	r3, r3, #7
 8008f54:	3308      	adds	r3, #8
 8008f56:	9303      	str	r3, [sp, #12]
 8008f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f5a:	4433      	add	r3, r6
 8008f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f5e:	e76a      	b.n	8008e36 <_svfiprintf_r+0x52>
 8008f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f64:	460c      	mov	r4, r1
 8008f66:	2001      	movs	r0, #1
 8008f68:	e7a8      	b.n	8008ebc <_svfiprintf_r+0xd8>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	3401      	adds	r4, #1
 8008f6e:	9305      	str	r3, [sp, #20]
 8008f70:	4619      	mov	r1, r3
 8008f72:	f04f 0c0a 	mov.w	ip, #10
 8008f76:	4620      	mov	r0, r4
 8008f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f7c:	3a30      	subs	r2, #48	@ 0x30
 8008f7e:	2a09      	cmp	r2, #9
 8008f80:	d903      	bls.n	8008f8a <_svfiprintf_r+0x1a6>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0c6      	beq.n	8008f14 <_svfiprintf_r+0x130>
 8008f86:	9105      	str	r1, [sp, #20]
 8008f88:	e7c4      	b.n	8008f14 <_svfiprintf_r+0x130>
 8008f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f8e:	4604      	mov	r4, r0
 8008f90:	2301      	movs	r3, #1
 8008f92:	e7f0      	b.n	8008f76 <_svfiprintf_r+0x192>
 8008f94:	ab03      	add	r3, sp, #12
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	462a      	mov	r2, r5
 8008f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008fd4 <_svfiprintf_r+0x1f0>)
 8008f9c:	a904      	add	r1, sp, #16
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	f7fc fcc8 	bl	8005934 <_printf_float>
 8008fa4:	1c42      	adds	r2, r0, #1
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	d1d6      	bne.n	8008f58 <_svfiprintf_r+0x174>
 8008faa:	89ab      	ldrh	r3, [r5, #12]
 8008fac:	065b      	lsls	r3, r3, #25
 8008fae:	f53f af2d 	bmi.w	8008e0c <_svfiprintf_r+0x28>
 8008fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fb4:	e72c      	b.n	8008e10 <_svfiprintf_r+0x2c>
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4b05      	ldr	r3, [pc, #20]	@ (8008fd4 <_svfiprintf_r+0x1f0>)
 8008fbe:	a904      	add	r1, sp, #16
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	f7fc ff4f 	bl	8005e64 <_printf_i>
 8008fc6:	e7ed      	b.n	8008fa4 <_svfiprintf_r+0x1c0>
 8008fc8:	0800a9f9 	.word	0x0800a9f9
 8008fcc:	0800aa03 	.word	0x0800aa03
 8008fd0:	08005935 	.word	0x08005935
 8008fd4:	08008d2d 	.word	0x08008d2d
 8008fd8:	0800a9ff 	.word	0x0800a9ff

08008fdc <__sflush_r>:
 8008fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe4:	0716      	lsls	r6, r2, #28
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	d454      	bmi.n	8009096 <__sflush_r+0xba>
 8008fec:	684b      	ldr	r3, [r1, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dc02      	bgt.n	8008ff8 <__sflush_r+0x1c>
 8008ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	dd48      	ble.n	800908a <__sflush_r+0xae>
 8008ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ffa:	2e00      	cmp	r6, #0
 8008ffc:	d045      	beq.n	800908a <__sflush_r+0xae>
 8008ffe:	2300      	movs	r3, #0
 8009000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009004:	682f      	ldr	r7, [r5, #0]
 8009006:	6a21      	ldr	r1, [r4, #32]
 8009008:	602b      	str	r3, [r5, #0]
 800900a:	d030      	beq.n	800906e <__sflush_r+0x92>
 800900c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	0759      	lsls	r1, r3, #29
 8009012:	d505      	bpl.n	8009020 <__sflush_r+0x44>
 8009014:	6863      	ldr	r3, [r4, #4]
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800901a:	b10b      	cbz	r3, 8009020 <__sflush_r+0x44>
 800901c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800901e:	1ad2      	subs	r2, r2, r3
 8009020:	2300      	movs	r3, #0
 8009022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009024:	6a21      	ldr	r1, [r4, #32]
 8009026:	4628      	mov	r0, r5
 8009028:	47b0      	blx	r6
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	d106      	bne.n	800903e <__sflush_r+0x62>
 8009030:	6829      	ldr	r1, [r5, #0]
 8009032:	291d      	cmp	r1, #29
 8009034:	d82b      	bhi.n	800908e <__sflush_r+0xb2>
 8009036:	4a2a      	ldr	r2, [pc, #168]	@ (80090e0 <__sflush_r+0x104>)
 8009038:	410a      	asrs	r2, r1
 800903a:	07d6      	lsls	r6, r2, #31
 800903c:	d427      	bmi.n	800908e <__sflush_r+0xb2>
 800903e:	2200      	movs	r2, #0
 8009040:	6062      	str	r2, [r4, #4]
 8009042:	04d9      	lsls	r1, r3, #19
 8009044:	6922      	ldr	r2, [r4, #16]
 8009046:	6022      	str	r2, [r4, #0]
 8009048:	d504      	bpl.n	8009054 <__sflush_r+0x78>
 800904a:	1c42      	adds	r2, r0, #1
 800904c:	d101      	bne.n	8009052 <__sflush_r+0x76>
 800904e:	682b      	ldr	r3, [r5, #0]
 8009050:	b903      	cbnz	r3, 8009054 <__sflush_r+0x78>
 8009052:	6560      	str	r0, [r4, #84]	@ 0x54
 8009054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009056:	602f      	str	r7, [r5, #0]
 8009058:	b1b9      	cbz	r1, 800908a <__sflush_r+0xae>
 800905a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800905e:	4299      	cmp	r1, r3
 8009060:	d002      	beq.n	8009068 <__sflush_r+0x8c>
 8009062:	4628      	mov	r0, r5
 8009064:	f7fe fa2c 	bl	80074c0 <_free_r>
 8009068:	2300      	movs	r3, #0
 800906a:	6363      	str	r3, [r4, #52]	@ 0x34
 800906c:	e00d      	b.n	800908a <__sflush_r+0xae>
 800906e:	2301      	movs	r3, #1
 8009070:	4628      	mov	r0, r5
 8009072:	47b0      	blx	r6
 8009074:	4602      	mov	r2, r0
 8009076:	1c50      	adds	r0, r2, #1
 8009078:	d1c9      	bne.n	800900e <__sflush_r+0x32>
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0c6      	beq.n	800900e <__sflush_r+0x32>
 8009080:	2b1d      	cmp	r3, #29
 8009082:	d001      	beq.n	8009088 <__sflush_r+0xac>
 8009084:	2b16      	cmp	r3, #22
 8009086:	d11e      	bne.n	80090c6 <__sflush_r+0xea>
 8009088:	602f      	str	r7, [r5, #0]
 800908a:	2000      	movs	r0, #0
 800908c:	e022      	b.n	80090d4 <__sflush_r+0xf8>
 800908e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009092:	b21b      	sxth	r3, r3
 8009094:	e01b      	b.n	80090ce <__sflush_r+0xf2>
 8009096:	690f      	ldr	r7, [r1, #16]
 8009098:	2f00      	cmp	r7, #0
 800909a:	d0f6      	beq.n	800908a <__sflush_r+0xae>
 800909c:	0793      	lsls	r3, r2, #30
 800909e:	680e      	ldr	r6, [r1, #0]
 80090a0:	bf08      	it	eq
 80090a2:	694b      	ldreq	r3, [r1, #20]
 80090a4:	600f      	str	r7, [r1, #0]
 80090a6:	bf18      	it	ne
 80090a8:	2300      	movne	r3, #0
 80090aa:	eba6 0807 	sub.w	r8, r6, r7
 80090ae:	608b      	str	r3, [r1, #8]
 80090b0:	f1b8 0f00 	cmp.w	r8, #0
 80090b4:	dde9      	ble.n	800908a <__sflush_r+0xae>
 80090b6:	6a21      	ldr	r1, [r4, #32]
 80090b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090ba:	4643      	mov	r3, r8
 80090bc:	463a      	mov	r2, r7
 80090be:	4628      	mov	r0, r5
 80090c0:	47b0      	blx	r6
 80090c2:	2800      	cmp	r0, #0
 80090c4:	dc08      	bgt.n	80090d8 <__sflush_r+0xfc>
 80090c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d8:	4407      	add	r7, r0
 80090da:	eba8 0800 	sub.w	r8, r8, r0
 80090de:	e7e7      	b.n	80090b0 <__sflush_r+0xd4>
 80090e0:	dfbffffe 	.word	0xdfbffffe

080090e4 <_fflush_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	690b      	ldr	r3, [r1, #16]
 80090e8:	4605      	mov	r5, r0
 80090ea:	460c      	mov	r4, r1
 80090ec:	b913      	cbnz	r3, 80090f4 <_fflush_r+0x10>
 80090ee:	2500      	movs	r5, #0
 80090f0:	4628      	mov	r0, r5
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	b118      	cbz	r0, 80090fe <_fflush_r+0x1a>
 80090f6:	6a03      	ldr	r3, [r0, #32]
 80090f8:	b90b      	cbnz	r3, 80090fe <_fflush_r+0x1a>
 80090fa:	f7fd fa73 	bl	80065e4 <__sinit>
 80090fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0f3      	beq.n	80090ee <_fflush_r+0xa>
 8009106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009108:	07d0      	lsls	r0, r2, #31
 800910a:	d404      	bmi.n	8009116 <_fflush_r+0x32>
 800910c:	0599      	lsls	r1, r3, #22
 800910e:	d402      	bmi.n	8009116 <_fflush_r+0x32>
 8009110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009112:	f7fd fb7e 	bl	8006812 <__retarget_lock_acquire_recursive>
 8009116:	4628      	mov	r0, r5
 8009118:	4621      	mov	r1, r4
 800911a:	f7ff ff5f 	bl	8008fdc <__sflush_r>
 800911e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009120:	07da      	lsls	r2, r3, #31
 8009122:	4605      	mov	r5, r0
 8009124:	d4e4      	bmi.n	80090f0 <_fflush_r+0xc>
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	059b      	lsls	r3, r3, #22
 800912a:	d4e1      	bmi.n	80090f0 <_fflush_r+0xc>
 800912c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800912e:	f7fd fb71 	bl	8006814 <__retarget_lock_release_recursive>
 8009132:	e7dd      	b.n	80090f0 <_fflush_r+0xc>

08009134 <memmove>:
 8009134:	4288      	cmp	r0, r1
 8009136:	b510      	push	{r4, lr}
 8009138:	eb01 0402 	add.w	r4, r1, r2
 800913c:	d902      	bls.n	8009144 <memmove+0x10>
 800913e:	4284      	cmp	r4, r0
 8009140:	4623      	mov	r3, r4
 8009142:	d807      	bhi.n	8009154 <memmove+0x20>
 8009144:	1e43      	subs	r3, r0, #1
 8009146:	42a1      	cmp	r1, r4
 8009148:	d008      	beq.n	800915c <memmove+0x28>
 800914a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800914e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009152:	e7f8      	b.n	8009146 <memmove+0x12>
 8009154:	4402      	add	r2, r0
 8009156:	4601      	mov	r1, r0
 8009158:	428a      	cmp	r2, r1
 800915a:	d100      	bne.n	800915e <memmove+0x2a>
 800915c:	bd10      	pop	{r4, pc}
 800915e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009166:	e7f7      	b.n	8009158 <memmove+0x24>

08009168 <strncmp>:
 8009168:	b510      	push	{r4, lr}
 800916a:	b16a      	cbz	r2, 8009188 <strncmp+0x20>
 800916c:	3901      	subs	r1, #1
 800916e:	1884      	adds	r4, r0, r2
 8009170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009174:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009178:	429a      	cmp	r2, r3
 800917a:	d103      	bne.n	8009184 <strncmp+0x1c>
 800917c:	42a0      	cmp	r0, r4
 800917e:	d001      	beq.n	8009184 <strncmp+0x1c>
 8009180:	2a00      	cmp	r2, #0
 8009182:	d1f5      	bne.n	8009170 <strncmp+0x8>
 8009184:	1ad0      	subs	r0, r2, r3
 8009186:	bd10      	pop	{r4, pc}
 8009188:	4610      	mov	r0, r2
 800918a:	e7fc      	b.n	8009186 <strncmp+0x1e>

0800918c <_sbrk_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d06      	ldr	r5, [pc, #24]	@ (80091a8 <_sbrk_r+0x1c>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	f7f8 fb1e 	bl	80017d8 <_sbrk>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_sbrk_r+0x1a>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_sbrk_r+0x1a>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20000834 	.word	0x20000834

080091ac <memcpy>:
 80091ac:	440a      	add	r2, r1
 80091ae:	4291      	cmp	r1, r2
 80091b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80091b4:	d100      	bne.n	80091b8 <memcpy+0xc>
 80091b6:	4770      	bx	lr
 80091b8:	b510      	push	{r4, lr}
 80091ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091c2:	4291      	cmp	r1, r2
 80091c4:	d1f9      	bne.n	80091ba <memcpy+0xe>
 80091c6:	bd10      	pop	{r4, pc}

080091c8 <nan>:
 80091c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80091d0 <nan+0x8>
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	00000000 	.word	0x00000000
 80091d4:	7ff80000 	.word	0x7ff80000

080091d8 <__assert_func>:
 80091d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091da:	4614      	mov	r4, r2
 80091dc:	461a      	mov	r2, r3
 80091de:	4b09      	ldr	r3, [pc, #36]	@ (8009204 <__assert_func+0x2c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4605      	mov	r5, r0
 80091e4:	68d8      	ldr	r0, [r3, #12]
 80091e6:	b954      	cbnz	r4, 80091fe <__assert_func+0x26>
 80091e8:	4b07      	ldr	r3, [pc, #28]	@ (8009208 <__assert_func+0x30>)
 80091ea:	461c      	mov	r4, r3
 80091ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091f0:	9100      	str	r1, [sp, #0]
 80091f2:	462b      	mov	r3, r5
 80091f4:	4905      	ldr	r1, [pc, #20]	@ (800920c <__assert_func+0x34>)
 80091f6:	f000 fba7 	bl	8009948 <fiprintf>
 80091fa:	f000 fbb7 	bl	800996c <abort>
 80091fe:	4b04      	ldr	r3, [pc, #16]	@ (8009210 <__assert_func+0x38>)
 8009200:	e7f4      	b.n	80091ec <__assert_func+0x14>
 8009202:	bf00      	nop
 8009204:	20000034 	.word	0x20000034
 8009208:	0800aa4d 	.word	0x0800aa4d
 800920c:	0800aa1f 	.word	0x0800aa1f
 8009210:	0800aa12 	.word	0x0800aa12

08009214 <_calloc_r>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	fba1 5402 	umull	r5, r4, r1, r2
 800921a:	b93c      	cbnz	r4, 800922c <_calloc_r+0x18>
 800921c:	4629      	mov	r1, r5
 800921e:	f7fe f9c3 	bl	80075a8 <_malloc_r>
 8009222:	4606      	mov	r6, r0
 8009224:	b928      	cbnz	r0, 8009232 <_calloc_r+0x1e>
 8009226:	2600      	movs	r6, #0
 8009228:	4630      	mov	r0, r6
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	220c      	movs	r2, #12
 800922e:	6002      	str	r2, [r0, #0]
 8009230:	e7f9      	b.n	8009226 <_calloc_r+0x12>
 8009232:	462a      	mov	r2, r5
 8009234:	4621      	mov	r1, r4
 8009236:	f7fd fa6e 	bl	8006716 <memset>
 800923a:	e7f5      	b.n	8009228 <_calloc_r+0x14>

0800923c <rshift>:
 800923c:	6903      	ldr	r3, [r0, #16]
 800923e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009246:	ea4f 1261 	mov.w	r2, r1, asr #5
 800924a:	f100 0414 	add.w	r4, r0, #20
 800924e:	dd45      	ble.n	80092dc <rshift+0xa0>
 8009250:	f011 011f 	ands.w	r1, r1, #31
 8009254:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009258:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800925c:	d10c      	bne.n	8009278 <rshift+0x3c>
 800925e:	f100 0710 	add.w	r7, r0, #16
 8009262:	4629      	mov	r1, r5
 8009264:	42b1      	cmp	r1, r6
 8009266:	d334      	bcc.n	80092d2 <rshift+0x96>
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	1eea      	subs	r2, r5, #3
 800926e:	4296      	cmp	r6, r2
 8009270:	bf38      	it	cc
 8009272:	2300      	movcc	r3, #0
 8009274:	4423      	add	r3, r4
 8009276:	e015      	b.n	80092a4 <rshift+0x68>
 8009278:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800927c:	f1c1 0820 	rsb	r8, r1, #32
 8009280:	40cf      	lsrs	r7, r1
 8009282:	f105 0e04 	add.w	lr, r5, #4
 8009286:	46a1      	mov	r9, r4
 8009288:	4576      	cmp	r6, lr
 800928a:	46f4      	mov	ip, lr
 800928c:	d815      	bhi.n	80092ba <rshift+0x7e>
 800928e:	1a9a      	subs	r2, r3, r2
 8009290:	0092      	lsls	r2, r2, #2
 8009292:	3a04      	subs	r2, #4
 8009294:	3501      	adds	r5, #1
 8009296:	42ae      	cmp	r6, r5
 8009298:	bf38      	it	cc
 800929a:	2200      	movcc	r2, #0
 800929c:	18a3      	adds	r3, r4, r2
 800929e:	50a7      	str	r7, [r4, r2]
 80092a0:	b107      	cbz	r7, 80092a4 <rshift+0x68>
 80092a2:	3304      	adds	r3, #4
 80092a4:	1b1a      	subs	r2, r3, r4
 80092a6:	42a3      	cmp	r3, r4
 80092a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80092ac:	bf08      	it	eq
 80092ae:	2300      	moveq	r3, #0
 80092b0:	6102      	str	r2, [r0, #16]
 80092b2:	bf08      	it	eq
 80092b4:	6143      	streq	r3, [r0, #20]
 80092b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ba:	f8dc c000 	ldr.w	ip, [ip]
 80092be:	fa0c fc08 	lsl.w	ip, ip, r8
 80092c2:	ea4c 0707 	orr.w	r7, ip, r7
 80092c6:	f849 7b04 	str.w	r7, [r9], #4
 80092ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092ce:	40cf      	lsrs	r7, r1
 80092d0:	e7da      	b.n	8009288 <rshift+0x4c>
 80092d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80092d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80092da:	e7c3      	b.n	8009264 <rshift+0x28>
 80092dc:	4623      	mov	r3, r4
 80092de:	e7e1      	b.n	80092a4 <rshift+0x68>

080092e0 <__hexdig_fun>:
 80092e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80092e4:	2b09      	cmp	r3, #9
 80092e6:	d802      	bhi.n	80092ee <__hexdig_fun+0xe>
 80092e8:	3820      	subs	r0, #32
 80092ea:	b2c0      	uxtb	r0, r0
 80092ec:	4770      	bx	lr
 80092ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80092f2:	2b05      	cmp	r3, #5
 80092f4:	d801      	bhi.n	80092fa <__hexdig_fun+0x1a>
 80092f6:	3847      	subs	r0, #71	@ 0x47
 80092f8:	e7f7      	b.n	80092ea <__hexdig_fun+0xa>
 80092fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80092fe:	2b05      	cmp	r3, #5
 8009300:	d801      	bhi.n	8009306 <__hexdig_fun+0x26>
 8009302:	3827      	subs	r0, #39	@ 0x27
 8009304:	e7f1      	b.n	80092ea <__hexdig_fun+0xa>
 8009306:	2000      	movs	r0, #0
 8009308:	4770      	bx	lr
	...

0800930c <__gethex>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	b085      	sub	sp, #20
 8009312:	468a      	mov	sl, r1
 8009314:	9302      	str	r3, [sp, #8]
 8009316:	680b      	ldr	r3, [r1, #0]
 8009318:	9001      	str	r0, [sp, #4]
 800931a:	4690      	mov	r8, r2
 800931c:	1c9c      	adds	r4, r3, #2
 800931e:	46a1      	mov	r9, r4
 8009320:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009324:	2830      	cmp	r0, #48	@ 0x30
 8009326:	d0fa      	beq.n	800931e <__gethex+0x12>
 8009328:	eba9 0303 	sub.w	r3, r9, r3
 800932c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009330:	f7ff ffd6 	bl	80092e0 <__hexdig_fun>
 8009334:	4605      	mov	r5, r0
 8009336:	2800      	cmp	r0, #0
 8009338:	d168      	bne.n	800940c <__gethex+0x100>
 800933a:	49a0      	ldr	r1, [pc, #640]	@ (80095bc <__gethex+0x2b0>)
 800933c:	2201      	movs	r2, #1
 800933e:	4648      	mov	r0, r9
 8009340:	f7ff ff12 	bl	8009168 <strncmp>
 8009344:	4607      	mov	r7, r0
 8009346:	2800      	cmp	r0, #0
 8009348:	d167      	bne.n	800941a <__gethex+0x10e>
 800934a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800934e:	4626      	mov	r6, r4
 8009350:	f7ff ffc6 	bl	80092e0 <__hexdig_fun>
 8009354:	2800      	cmp	r0, #0
 8009356:	d062      	beq.n	800941e <__gethex+0x112>
 8009358:	4623      	mov	r3, r4
 800935a:	7818      	ldrb	r0, [r3, #0]
 800935c:	2830      	cmp	r0, #48	@ 0x30
 800935e:	4699      	mov	r9, r3
 8009360:	f103 0301 	add.w	r3, r3, #1
 8009364:	d0f9      	beq.n	800935a <__gethex+0x4e>
 8009366:	f7ff ffbb 	bl	80092e0 <__hexdig_fun>
 800936a:	fab0 f580 	clz	r5, r0
 800936e:	096d      	lsrs	r5, r5, #5
 8009370:	f04f 0b01 	mov.w	fp, #1
 8009374:	464a      	mov	r2, r9
 8009376:	4616      	mov	r6, r2
 8009378:	3201      	adds	r2, #1
 800937a:	7830      	ldrb	r0, [r6, #0]
 800937c:	f7ff ffb0 	bl	80092e0 <__hexdig_fun>
 8009380:	2800      	cmp	r0, #0
 8009382:	d1f8      	bne.n	8009376 <__gethex+0x6a>
 8009384:	498d      	ldr	r1, [pc, #564]	@ (80095bc <__gethex+0x2b0>)
 8009386:	2201      	movs	r2, #1
 8009388:	4630      	mov	r0, r6
 800938a:	f7ff feed 	bl	8009168 <strncmp>
 800938e:	2800      	cmp	r0, #0
 8009390:	d13f      	bne.n	8009412 <__gethex+0x106>
 8009392:	b944      	cbnz	r4, 80093a6 <__gethex+0x9a>
 8009394:	1c74      	adds	r4, r6, #1
 8009396:	4622      	mov	r2, r4
 8009398:	4616      	mov	r6, r2
 800939a:	3201      	adds	r2, #1
 800939c:	7830      	ldrb	r0, [r6, #0]
 800939e:	f7ff ff9f 	bl	80092e0 <__hexdig_fun>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d1f8      	bne.n	8009398 <__gethex+0x8c>
 80093a6:	1ba4      	subs	r4, r4, r6
 80093a8:	00a7      	lsls	r7, r4, #2
 80093aa:	7833      	ldrb	r3, [r6, #0]
 80093ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80093b0:	2b50      	cmp	r3, #80	@ 0x50
 80093b2:	d13e      	bne.n	8009432 <__gethex+0x126>
 80093b4:	7873      	ldrb	r3, [r6, #1]
 80093b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80093b8:	d033      	beq.n	8009422 <__gethex+0x116>
 80093ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80093bc:	d034      	beq.n	8009428 <__gethex+0x11c>
 80093be:	1c71      	adds	r1, r6, #1
 80093c0:	2400      	movs	r4, #0
 80093c2:	7808      	ldrb	r0, [r1, #0]
 80093c4:	f7ff ff8c 	bl	80092e0 <__hexdig_fun>
 80093c8:	1e43      	subs	r3, r0, #1
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b18      	cmp	r3, #24
 80093ce:	d830      	bhi.n	8009432 <__gethex+0x126>
 80093d0:	f1a0 0210 	sub.w	r2, r0, #16
 80093d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093d8:	f7ff ff82 	bl	80092e0 <__hexdig_fun>
 80093dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80093e0:	fa5f fc8c 	uxtb.w	ip, ip
 80093e4:	f1bc 0f18 	cmp.w	ip, #24
 80093e8:	f04f 030a 	mov.w	r3, #10
 80093ec:	d91e      	bls.n	800942c <__gethex+0x120>
 80093ee:	b104      	cbz	r4, 80093f2 <__gethex+0xe6>
 80093f0:	4252      	negs	r2, r2
 80093f2:	4417      	add	r7, r2
 80093f4:	f8ca 1000 	str.w	r1, [sl]
 80093f8:	b1ed      	cbz	r5, 8009436 <__gethex+0x12a>
 80093fa:	f1bb 0f00 	cmp.w	fp, #0
 80093fe:	bf0c      	ite	eq
 8009400:	2506      	moveq	r5, #6
 8009402:	2500      	movne	r5, #0
 8009404:	4628      	mov	r0, r5
 8009406:	b005      	add	sp, #20
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940c:	2500      	movs	r5, #0
 800940e:	462c      	mov	r4, r5
 8009410:	e7b0      	b.n	8009374 <__gethex+0x68>
 8009412:	2c00      	cmp	r4, #0
 8009414:	d1c7      	bne.n	80093a6 <__gethex+0x9a>
 8009416:	4627      	mov	r7, r4
 8009418:	e7c7      	b.n	80093aa <__gethex+0x9e>
 800941a:	464e      	mov	r6, r9
 800941c:	462f      	mov	r7, r5
 800941e:	2501      	movs	r5, #1
 8009420:	e7c3      	b.n	80093aa <__gethex+0x9e>
 8009422:	2400      	movs	r4, #0
 8009424:	1cb1      	adds	r1, r6, #2
 8009426:	e7cc      	b.n	80093c2 <__gethex+0xb6>
 8009428:	2401      	movs	r4, #1
 800942a:	e7fb      	b.n	8009424 <__gethex+0x118>
 800942c:	fb03 0002 	mla	r0, r3, r2, r0
 8009430:	e7ce      	b.n	80093d0 <__gethex+0xc4>
 8009432:	4631      	mov	r1, r6
 8009434:	e7de      	b.n	80093f4 <__gethex+0xe8>
 8009436:	eba6 0309 	sub.w	r3, r6, r9
 800943a:	3b01      	subs	r3, #1
 800943c:	4629      	mov	r1, r5
 800943e:	2b07      	cmp	r3, #7
 8009440:	dc0a      	bgt.n	8009458 <__gethex+0x14c>
 8009442:	9801      	ldr	r0, [sp, #4]
 8009444:	f7fe f93c 	bl	80076c0 <_Balloc>
 8009448:	4604      	mov	r4, r0
 800944a:	b940      	cbnz	r0, 800945e <__gethex+0x152>
 800944c:	4b5c      	ldr	r3, [pc, #368]	@ (80095c0 <__gethex+0x2b4>)
 800944e:	4602      	mov	r2, r0
 8009450:	21e4      	movs	r1, #228	@ 0xe4
 8009452:	485c      	ldr	r0, [pc, #368]	@ (80095c4 <__gethex+0x2b8>)
 8009454:	f7ff fec0 	bl	80091d8 <__assert_func>
 8009458:	3101      	adds	r1, #1
 800945a:	105b      	asrs	r3, r3, #1
 800945c:	e7ef      	b.n	800943e <__gethex+0x132>
 800945e:	f100 0a14 	add.w	sl, r0, #20
 8009462:	2300      	movs	r3, #0
 8009464:	4655      	mov	r5, sl
 8009466:	469b      	mov	fp, r3
 8009468:	45b1      	cmp	r9, r6
 800946a:	d337      	bcc.n	80094dc <__gethex+0x1d0>
 800946c:	f845 bb04 	str.w	fp, [r5], #4
 8009470:	eba5 050a 	sub.w	r5, r5, sl
 8009474:	10ad      	asrs	r5, r5, #2
 8009476:	6125      	str	r5, [r4, #16]
 8009478:	4658      	mov	r0, fp
 800947a:	f7fe fa13 	bl	80078a4 <__hi0bits>
 800947e:	016d      	lsls	r5, r5, #5
 8009480:	f8d8 6000 	ldr.w	r6, [r8]
 8009484:	1a2d      	subs	r5, r5, r0
 8009486:	42b5      	cmp	r5, r6
 8009488:	dd54      	ble.n	8009534 <__gethex+0x228>
 800948a:	1bad      	subs	r5, r5, r6
 800948c:	4629      	mov	r1, r5
 800948e:	4620      	mov	r0, r4
 8009490:	f7fe fda7 	bl	8007fe2 <__any_on>
 8009494:	4681      	mov	r9, r0
 8009496:	b178      	cbz	r0, 80094b8 <__gethex+0x1ac>
 8009498:	1e6b      	subs	r3, r5, #1
 800949a:	1159      	asrs	r1, r3, #5
 800949c:	f003 021f 	and.w	r2, r3, #31
 80094a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80094a4:	f04f 0901 	mov.w	r9, #1
 80094a8:	fa09 f202 	lsl.w	r2, r9, r2
 80094ac:	420a      	tst	r2, r1
 80094ae:	d003      	beq.n	80094b8 <__gethex+0x1ac>
 80094b0:	454b      	cmp	r3, r9
 80094b2:	dc36      	bgt.n	8009522 <__gethex+0x216>
 80094b4:	f04f 0902 	mov.w	r9, #2
 80094b8:	4629      	mov	r1, r5
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff febe 	bl	800923c <rshift>
 80094c0:	442f      	add	r7, r5
 80094c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094c6:	42bb      	cmp	r3, r7
 80094c8:	da42      	bge.n	8009550 <__gethex+0x244>
 80094ca:	9801      	ldr	r0, [sp, #4]
 80094cc:	4621      	mov	r1, r4
 80094ce:	f7fe f937 	bl	8007740 <_Bfree>
 80094d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094d4:	2300      	movs	r3, #0
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	25a3      	movs	r5, #163	@ 0xa3
 80094da:	e793      	b.n	8009404 <__gethex+0xf8>
 80094dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80094e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80094e2:	d012      	beq.n	800950a <__gethex+0x1fe>
 80094e4:	2b20      	cmp	r3, #32
 80094e6:	d104      	bne.n	80094f2 <__gethex+0x1e6>
 80094e8:	f845 bb04 	str.w	fp, [r5], #4
 80094ec:	f04f 0b00 	mov.w	fp, #0
 80094f0:	465b      	mov	r3, fp
 80094f2:	7830      	ldrb	r0, [r6, #0]
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	f7ff fef3 	bl	80092e0 <__hexdig_fun>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	f000 000f 	and.w	r0, r0, #15
 8009500:	4098      	lsls	r0, r3
 8009502:	ea4b 0b00 	orr.w	fp, fp, r0
 8009506:	3304      	adds	r3, #4
 8009508:	e7ae      	b.n	8009468 <__gethex+0x15c>
 800950a:	45b1      	cmp	r9, r6
 800950c:	d8ea      	bhi.n	80094e4 <__gethex+0x1d8>
 800950e:	492b      	ldr	r1, [pc, #172]	@ (80095bc <__gethex+0x2b0>)
 8009510:	9303      	str	r3, [sp, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff fe27 	bl	8009168 <strncmp>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	2800      	cmp	r0, #0
 800951e:	d1e1      	bne.n	80094e4 <__gethex+0x1d8>
 8009520:	e7a2      	b.n	8009468 <__gethex+0x15c>
 8009522:	1ea9      	subs	r1, r5, #2
 8009524:	4620      	mov	r0, r4
 8009526:	f7fe fd5c 	bl	8007fe2 <__any_on>
 800952a:	2800      	cmp	r0, #0
 800952c:	d0c2      	beq.n	80094b4 <__gethex+0x1a8>
 800952e:	f04f 0903 	mov.w	r9, #3
 8009532:	e7c1      	b.n	80094b8 <__gethex+0x1ac>
 8009534:	da09      	bge.n	800954a <__gethex+0x23e>
 8009536:	1b75      	subs	r5, r6, r5
 8009538:	4621      	mov	r1, r4
 800953a:	9801      	ldr	r0, [sp, #4]
 800953c:	462a      	mov	r2, r5
 800953e:	f7fe fb17 	bl	8007b70 <__lshift>
 8009542:	1b7f      	subs	r7, r7, r5
 8009544:	4604      	mov	r4, r0
 8009546:	f100 0a14 	add.w	sl, r0, #20
 800954a:	f04f 0900 	mov.w	r9, #0
 800954e:	e7b8      	b.n	80094c2 <__gethex+0x1b6>
 8009550:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009554:	42bd      	cmp	r5, r7
 8009556:	dd6f      	ble.n	8009638 <__gethex+0x32c>
 8009558:	1bed      	subs	r5, r5, r7
 800955a:	42ae      	cmp	r6, r5
 800955c:	dc34      	bgt.n	80095c8 <__gethex+0x2bc>
 800955e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d022      	beq.n	80095ac <__gethex+0x2a0>
 8009566:	2b03      	cmp	r3, #3
 8009568:	d024      	beq.n	80095b4 <__gethex+0x2a8>
 800956a:	2b01      	cmp	r3, #1
 800956c:	d115      	bne.n	800959a <__gethex+0x28e>
 800956e:	42ae      	cmp	r6, r5
 8009570:	d113      	bne.n	800959a <__gethex+0x28e>
 8009572:	2e01      	cmp	r6, #1
 8009574:	d10b      	bne.n	800958e <__gethex+0x282>
 8009576:	9a02      	ldr	r2, [sp, #8]
 8009578:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	2301      	movs	r3, #1
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	f8ca 3000 	str.w	r3, [sl]
 8009586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009588:	2562      	movs	r5, #98	@ 0x62
 800958a:	601c      	str	r4, [r3, #0]
 800958c:	e73a      	b.n	8009404 <__gethex+0xf8>
 800958e:	1e71      	subs	r1, r6, #1
 8009590:	4620      	mov	r0, r4
 8009592:	f7fe fd26 	bl	8007fe2 <__any_on>
 8009596:	2800      	cmp	r0, #0
 8009598:	d1ed      	bne.n	8009576 <__gethex+0x26a>
 800959a:	9801      	ldr	r0, [sp, #4]
 800959c:	4621      	mov	r1, r4
 800959e:	f7fe f8cf 	bl	8007740 <_Bfree>
 80095a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095a4:	2300      	movs	r3, #0
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	2550      	movs	r5, #80	@ 0x50
 80095aa:	e72b      	b.n	8009404 <__gethex+0xf8>
 80095ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f3      	bne.n	800959a <__gethex+0x28e>
 80095b2:	e7e0      	b.n	8009576 <__gethex+0x26a>
 80095b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1dd      	bne.n	8009576 <__gethex+0x26a>
 80095ba:	e7ee      	b.n	800959a <__gethex+0x28e>
 80095bc:	0800a8a0 	.word	0x0800a8a0
 80095c0:	0800a735 	.word	0x0800a735
 80095c4:	0800aa4e 	.word	0x0800aa4e
 80095c8:	1e6f      	subs	r7, r5, #1
 80095ca:	f1b9 0f00 	cmp.w	r9, #0
 80095ce:	d130      	bne.n	8009632 <__gethex+0x326>
 80095d0:	b127      	cbz	r7, 80095dc <__gethex+0x2d0>
 80095d2:	4639      	mov	r1, r7
 80095d4:	4620      	mov	r0, r4
 80095d6:	f7fe fd04 	bl	8007fe2 <__any_on>
 80095da:	4681      	mov	r9, r0
 80095dc:	117a      	asrs	r2, r7, #5
 80095de:	2301      	movs	r3, #1
 80095e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095e4:	f007 071f 	and.w	r7, r7, #31
 80095e8:	40bb      	lsls	r3, r7
 80095ea:	4213      	tst	r3, r2
 80095ec:	4629      	mov	r1, r5
 80095ee:	4620      	mov	r0, r4
 80095f0:	bf18      	it	ne
 80095f2:	f049 0902 	orrne.w	r9, r9, #2
 80095f6:	f7ff fe21 	bl	800923c <rshift>
 80095fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80095fe:	1b76      	subs	r6, r6, r5
 8009600:	2502      	movs	r5, #2
 8009602:	f1b9 0f00 	cmp.w	r9, #0
 8009606:	d047      	beq.n	8009698 <__gethex+0x38c>
 8009608:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800960c:	2b02      	cmp	r3, #2
 800960e:	d015      	beq.n	800963c <__gethex+0x330>
 8009610:	2b03      	cmp	r3, #3
 8009612:	d017      	beq.n	8009644 <__gethex+0x338>
 8009614:	2b01      	cmp	r3, #1
 8009616:	d109      	bne.n	800962c <__gethex+0x320>
 8009618:	f019 0f02 	tst.w	r9, #2
 800961c:	d006      	beq.n	800962c <__gethex+0x320>
 800961e:	f8da 3000 	ldr.w	r3, [sl]
 8009622:	ea49 0903 	orr.w	r9, r9, r3
 8009626:	f019 0f01 	tst.w	r9, #1
 800962a:	d10e      	bne.n	800964a <__gethex+0x33e>
 800962c:	f045 0510 	orr.w	r5, r5, #16
 8009630:	e032      	b.n	8009698 <__gethex+0x38c>
 8009632:	f04f 0901 	mov.w	r9, #1
 8009636:	e7d1      	b.n	80095dc <__gethex+0x2d0>
 8009638:	2501      	movs	r5, #1
 800963a:	e7e2      	b.n	8009602 <__gethex+0x2f6>
 800963c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800963e:	f1c3 0301 	rsb	r3, r3, #1
 8009642:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0f0      	beq.n	800962c <__gethex+0x320>
 800964a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800964e:	f104 0314 	add.w	r3, r4, #20
 8009652:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009656:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800965a:	f04f 0c00 	mov.w	ip, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f853 2b04 	ldr.w	r2, [r3], #4
 8009664:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009668:	d01b      	beq.n	80096a2 <__gethex+0x396>
 800966a:	3201      	adds	r2, #1
 800966c:	6002      	str	r2, [r0, #0]
 800966e:	2d02      	cmp	r5, #2
 8009670:	f104 0314 	add.w	r3, r4, #20
 8009674:	d13c      	bne.n	80096f0 <__gethex+0x3e4>
 8009676:	f8d8 2000 	ldr.w	r2, [r8]
 800967a:	3a01      	subs	r2, #1
 800967c:	42b2      	cmp	r2, r6
 800967e:	d109      	bne.n	8009694 <__gethex+0x388>
 8009680:	1171      	asrs	r1, r6, #5
 8009682:	2201      	movs	r2, #1
 8009684:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009688:	f006 061f 	and.w	r6, r6, #31
 800968c:	fa02 f606 	lsl.w	r6, r2, r6
 8009690:	421e      	tst	r6, r3
 8009692:	d13a      	bne.n	800970a <__gethex+0x3fe>
 8009694:	f045 0520 	orr.w	r5, r5, #32
 8009698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800969a:	601c      	str	r4, [r3, #0]
 800969c:	9b02      	ldr	r3, [sp, #8]
 800969e:	601f      	str	r7, [r3, #0]
 80096a0:	e6b0      	b.n	8009404 <__gethex+0xf8>
 80096a2:	4299      	cmp	r1, r3
 80096a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80096a8:	d8d9      	bhi.n	800965e <__gethex+0x352>
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	459b      	cmp	fp, r3
 80096ae:	db17      	blt.n	80096e0 <__gethex+0x3d4>
 80096b0:	6861      	ldr	r1, [r4, #4]
 80096b2:	9801      	ldr	r0, [sp, #4]
 80096b4:	3101      	adds	r1, #1
 80096b6:	f7fe f803 	bl	80076c0 <_Balloc>
 80096ba:	4681      	mov	r9, r0
 80096bc:	b918      	cbnz	r0, 80096c6 <__gethex+0x3ba>
 80096be:	4b1a      	ldr	r3, [pc, #104]	@ (8009728 <__gethex+0x41c>)
 80096c0:	4602      	mov	r2, r0
 80096c2:	2184      	movs	r1, #132	@ 0x84
 80096c4:	e6c5      	b.n	8009452 <__gethex+0x146>
 80096c6:	6922      	ldr	r2, [r4, #16]
 80096c8:	3202      	adds	r2, #2
 80096ca:	f104 010c 	add.w	r1, r4, #12
 80096ce:	0092      	lsls	r2, r2, #2
 80096d0:	300c      	adds	r0, #12
 80096d2:	f7ff fd6b 	bl	80091ac <memcpy>
 80096d6:	4621      	mov	r1, r4
 80096d8:	9801      	ldr	r0, [sp, #4]
 80096da:	f7fe f831 	bl	8007740 <_Bfree>
 80096de:	464c      	mov	r4, r9
 80096e0:	6923      	ldr	r3, [r4, #16]
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096e8:	6122      	str	r2, [r4, #16]
 80096ea:	2201      	movs	r2, #1
 80096ec:	615a      	str	r2, [r3, #20]
 80096ee:	e7be      	b.n	800966e <__gethex+0x362>
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	455a      	cmp	r2, fp
 80096f4:	dd0b      	ble.n	800970e <__gethex+0x402>
 80096f6:	2101      	movs	r1, #1
 80096f8:	4620      	mov	r0, r4
 80096fa:	f7ff fd9f 	bl	800923c <rshift>
 80096fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009702:	3701      	adds	r7, #1
 8009704:	42bb      	cmp	r3, r7
 8009706:	f6ff aee0 	blt.w	80094ca <__gethex+0x1be>
 800970a:	2501      	movs	r5, #1
 800970c:	e7c2      	b.n	8009694 <__gethex+0x388>
 800970e:	f016 061f 	ands.w	r6, r6, #31
 8009712:	d0fa      	beq.n	800970a <__gethex+0x3fe>
 8009714:	4453      	add	r3, sl
 8009716:	f1c6 0620 	rsb	r6, r6, #32
 800971a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800971e:	f7fe f8c1 	bl	80078a4 <__hi0bits>
 8009722:	42b0      	cmp	r0, r6
 8009724:	dbe7      	blt.n	80096f6 <__gethex+0x3ea>
 8009726:	e7f0      	b.n	800970a <__gethex+0x3fe>
 8009728:	0800a735 	.word	0x0800a735

0800972c <L_shift>:
 800972c:	f1c2 0208 	rsb	r2, r2, #8
 8009730:	0092      	lsls	r2, r2, #2
 8009732:	b570      	push	{r4, r5, r6, lr}
 8009734:	f1c2 0620 	rsb	r6, r2, #32
 8009738:	6843      	ldr	r3, [r0, #4]
 800973a:	6804      	ldr	r4, [r0, #0]
 800973c:	fa03 f506 	lsl.w	r5, r3, r6
 8009740:	432c      	orrs	r4, r5
 8009742:	40d3      	lsrs	r3, r2
 8009744:	6004      	str	r4, [r0, #0]
 8009746:	f840 3f04 	str.w	r3, [r0, #4]!
 800974a:	4288      	cmp	r0, r1
 800974c:	d3f4      	bcc.n	8009738 <L_shift+0xc>
 800974e:	bd70      	pop	{r4, r5, r6, pc}

08009750 <__match>:
 8009750:	b530      	push	{r4, r5, lr}
 8009752:	6803      	ldr	r3, [r0, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975a:	b914      	cbnz	r4, 8009762 <__match+0x12>
 800975c:	6003      	str	r3, [r0, #0]
 800975e:	2001      	movs	r0, #1
 8009760:	bd30      	pop	{r4, r5, pc}
 8009762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009766:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800976a:	2d19      	cmp	r5, #25
 800976c:	bf98      	it	ls
 800976e:	3220      	addls	r2, #32
 8009770:	42a2      	cmp	r2, r4
 8009772:	d0f0      	beq.n	8009756 <__match+0x6>
 8009774:	2000      	movs	r0, #0
 8009776:	e7f3      	b.n	8009760 <__match+0x10>

08009778 <__hexnan>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	680b      	ldr	r3, [r1, #0]
 800977e:	6801      	ldr	r1, [r0, #0]
 8009780:	115e      	asrs	r6, r3, #5
 8009782:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009786:	f013 031f 	ands.w	r3, r3, #31
 800978a:	b087      	sub	sp, #28
 800978c:	bf18      	it	ne
 800978e:	3604      	addne	r6, #4
 8009790:	2500      	movs	r5, #0
 8009792:	1f37      	subs	r7, r6, #4
 8009794:	4682      	mov	sl, r0
 8009796:	4690      	mov	r8, r2
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	f846 5c04 	str.w	r5, [r6, #-4]
 800979e:	46b9      	mov	r9, r7
 80097a0:	463c      	mov	r4, r7
 80097a2:	9502      	str	r5, [sp, #8]
 80097a4:	46ab      	mov	fp, r5
 80097a6:	784a      	ldrb	r2, [r1, #1]
 80097a8:	1c4b      	adds	r3, r1, #1
 80097aa:	9303      	str	r3, [sp, #12]
 80097ac:	b342      	cbz	r2, 8009800 <__hexnan+0x88>
 80097ae:	4610      	mov	r0, r2
 80097b0:	9105      	str	r1, [sp, #20]
 80097b2:	9204      	str	r2, [sp, #16]
 80097b4:	f7ff fd94 	bl	80092e0 <__hexdig_fun>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d151      	bne.n	8009860 <__hexnan+0xe8>
 80097bc:	9a04      	ldr	r2, [sp, #16]
 80097be:	9905      	ldr	r1, [sp, #20]
 80097c0:	2a20      	cmp	r2, #32
 80097c2:	d818      	bhi.n	80097f6 <__hexnan+0x7e>
 80097c4:	9b02      	ldr	r3, [sp, #8]
 80097c6:	459b      	cmp	fp, r3
 80097c8:	dd13      	ble.n	80097f2 <__hexnan+0x7a>
 80097ca:	454c      	cmp	r4, r9
 80097cc:	d206      	bcs.n	80097dc <__hexnan+0x64>
 80097ce:	2d07      	cmp	r5, #7
 80097d0:	dc04      	bgt.n	80097dc <__hexnan+0x64>
 80097d2:	462a      	mov	r2, r5
 80097d4:	4649      	mov	r1, r9
 80097d6:	4620      	mov	r0, r4
 80097d8:	f7ff ffa8 	bl	800972c <L_shift>
 80097dc:	4544      	cmp	r4, r8
 80097de:	d952      	bls.n	8009886 <__hexnan+0x10e>
 80097e0:	2300      	movs	r3, #0
 80097e2:	f1a4 0904 	sub.w	r9, r4, #4
 80097e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80097ea:	f8cd b008 	str.w	fp, [sp, #8]
 80097ee:	464c      	mov	r4, r9
 80097f0:	461d      	mov	r5, r3
 80097f2:	9903      	ldr	r1, [sp, #12]
 80097f4:	e7d7      	b.n	80097a6 <__hexnan+0x2e>
 80097f6:	2a29      	cmp	r2, #41	@ 0x29
 80097f8:	d157      	bne.n	80098aa <__hexnan+0x132>
 80097fa:	3102      	adds	r1, #2
 80097fc:	f8ca 1000 	str.w	r1, [sl]
 8009800:	f1bb 0f00 	cmp.w	fp, #0
 8009804:	d051      	beq.n	80098aa <__hexnan+0x132>
 8009806:	454c      	cmp	r4, r9
 8009808:	d206      	bcs.n	8009818 <__hexnan+0xa0>
 800980a:	2d07      	cmp	r5, #7
 800980c:	dc04      	bgt.n	8009818 <__hexnan+0xa0>
 800980e:	462a      	mov	r2, r5
 8009810:	4649      	mov	r1, r9
 8009812:	4620      	mov	r0, r4
 8009814:	f7ff ff8a 	bl	800972c <L_shift>
 8009818:	4544      	cmp	r4, r8
 800981a:	d936      	bls.n	800988a <__hexnan+0x112>
 800981c:	f1a8 0204 	sub.w	r2, r8, #4
 8009820:	4623      	mov	r3, r4
 8009822:	f853 1b04 	ldr.w	r1, [r3], #4
 8009826:	f842 1f04 	str.w	r1, [r2, #4]!
 800982a:	429f      	cmp	r7, r3
 800982c:	d2f9      	bcs.n	8009822 <__hexnan+0xaa>
 800982e:	1b3b      	subs	r3, r7, r4
 8009830:	f023 0303 	bic.w	r3, r3, #3
 8009834:	3304      	adds	r3, #4
 8009836:	3401      	adds	r4, #1
 8009838:	3e03      	subs	r6, #3
 800983a:	42b4      	cmp	r4, r6
 800983c:	bf88      	it	hi
 800983e:	2304      	movhi	r3, #4
 8009840:	4443      	add	r3, r8
 8009842:	2200      	movs	r2, #0
 8009844:	f843 2b04 	str.w	r2, [r3], #4
 8009848:	429f      	cmp	r7, r3
 800984a:	d2fb      	bcs.n	8009844 <__hexnan+0xcc>
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	b91b      	cbnz	r3, 8009858 <__hexnan+0xe0>
 8009850:	4547      	cmp	r7, r8
 8009852:	d128      	bne.n	80098a6 <__hexnan+0x12e>
 8009854:	2301      	movs	r3, #1
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	2005      	movs	r0, #5
 800985a:	b007      	add	sp, #28
 800985c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009860:	3501      	adds	r5, #1
 8009862:	2d08      	cmp	r5, #8
 8009864:	f10b 0b01 	add.w	fp, fp, #1
 8009868:	dd06      	ble.n	8009878 <__hexnan+0x100>
 800986a:	4544      	cmp	r4, r8
 800986c:	d9c1      	bls.n	80097f2 <__hexnan+0x7a>
 800986e:	2300      	movs	r3, #0
 8009870:	f844 3c04 	str.w	r3, [r4, #-4]
 8009874:	2501      	movs	r5, #1
 8009876:	3c04      	subs	r4, #4
 8009878:	6822      	ldr	r2, [r4, #0]
 800987a:	f000 000f 	and.w	r0, r0, #15
 800987e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009882:	6020      	str	r0, [r4, #0]
 8009884:	e7b5      	b.n	80097f2 <__hexnan+0x7a>
 8009886:	2508      	movs	r5, #8
 8009888:	e7b3      	b.n	80097f2 <__hexnan+0x7a>
 800988a:	9b01      	ldr	r3, [sp, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d0dd      	beq.n	800984c <__hexnan+0xd4>
 8009890:	f1c3 0320 	rsb	r3, r3, #32
 8009894:	f04f 32ff 	mov.w	r2, #4294967295
 8009898:	40da      	lsrs	r2, r3
 800989a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800989e:	4013      	ands	r3, r2
 80098a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80098a4:	e7d2      	b.n	800984c <__hexnan+0xd4>
 80098a6:	3f04      	subs	r7, #4
 80098a8:	e7d0      	b.n	800984c <__hexnan+0xd4>
 80098aa:	2004      	movs	r0, #4
 80098ac:	e7d5      	b.n	800985a <__hexnan+0xe2>

080098ae <__ascii_mbtowc>:
 80098ae:	b082      	sub	sp, #8
 80098b0:	b901      	cbnz	r1, 80098b4 <__ascii_mbtowc+0x6>
 80098b2:	a901      	add	r1, sp, #4
 80098b4:	b142      	cbz	r2, 80098c8 <__ascii_mbtowc+0x1a>
 80098b6:	b14b      	cbz	r3, 80098cc <__ascii_mbtowc+0x1e>
 80098b8:	7813      	ldrb	r3, [r2, #0]
 80098ba:	600b      	str	r3, [r1, #0]
 80098bc:	7812      	ldrb	r2, [r2, #0]
 80098be:	1e10      	subs	r0, r2, #0
 80098c0:	bf18      	it	ne
 80098c2:	2001      	movne	r0, #1
 80098c4:	b002      	add	sp, #8
 80098c6:	4770      	bx	lr
 80098c8:	4610      	mov	r0, r2
 80098ca:	e7fb      	b.n	80098c4 <__ascii_mbtowc+0x16>
 80098cc:	f06f 0001 	mvn.w	r0, #1
 80098d0:	e7f8      	b.n	80098c4 <__ascii_mbtowc+0x16>

080098d2 <_realloc_r>:
 80098d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d6:	4680      	mov	r8, r0
 80098d8:	4615      	mov	r5, r2
 80098da:	460c      	mov	r4, r1
 80098dc:	b921      	cbnz	r1, 80098e8 <_realloc_r+0x16>
 80098de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098e2:	4611      	mov	r1, r2
 80098e4:	f7fd be60 	b.w	80075a8 <_malloc_r>
 80098e8:	b92a      	cbnz	r2, 80098f6 <_realloc_r+0x24>
 80098ea:	f7fd fde9 	bl	80074c0 <_free_r>
 80098ee:	2400      	movs	r4, #0
 80098f0:	4620      	mov	r0, r4
 80098f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f6:	f000 f840 	bl	800997a <_malloc_usable_size_r>
 80098fa:	4285      	cmp	r5, r0
 80098fc:	4606      	mov	r6, r0
 80098fe:	d802      	bhi.n	8009906 <_realloc_r+0x34>
 8009900:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009904:	d8f4      	bhi.n	80098f0 <_realloc_r+0x1e>
 8009906:	4629      	mov	r1, r5
 8009908:	4640      	mov	r0, r8
 800990a:	f7fd fe4d 	bl	80075a8 <_malloc_r>
 800990e:	4607      	mov	r7, r0
 8009910:	2800      	cmp	r0, #0
 8009912:	d0ec      	beq.n	80098ee <_realloc_r+0x1c>
 8009914:	42b5      	cmp	r5, r6
 8009916:	462a      	mov	r2, r5
 8009918:	4621      	mov	r1, r4
 800991a:	bf28      	it	cs
 800991c:	4632      	movcs	r2, r6
 800991e:	f7ff fc45 	bl	80091ac <memcpy>
 8009922:	4621      	mov	r1, r4
 8009924:	4640      	mov	r0, r8
 8009926:	f7fd fdcb 	bl	80074c0 <_free_r>
 800992a:	463c      	mov	r4, r7
 800992c:	e7e0      	b.n	80098f0 <_realloc_r+0x1e>

0800992e <__ascii_wctomb>:
 800992e:	4603      	mov	r3, r0
 8009930:	4608      	mov	r0, r1
 8009932:	b141      	cbz	r1, 8009946 <__ascii_wctomb+0x18>
 8009934:	2aff      	cmp	r2, #255	@ 0xff
 8009936:	d904      	bls.n	8009942 <__ascii_wctomb+0x14>
 8009938:	228a      	movs	r2, #138	@ 0x8a
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	4770      	bx	lr
 8009942:	700a      	strb	r2, [r1, #0]
 8009944:	2001      	movs	r0, #1
 8009946:	4770      	bx	lr

08009948 <fiprintf>:
 8009948:	b40e      	push	{r1, r2, r3}
 800994a:	b503      	push	{r0, r1, lr}
 800994c:	4601      	mov	r1, r0
 800994e:	ab03      	add	r3, sp, #12
 8009950:	4805      	ldr	r0, [pc, #20]	@ (8009968 <fiprintf+0x20>)
 8009952:	f853 2b04 	ldr.w	r2, [r3], #4
 8009956:	6800      	ldr	r0, [r0, #0]
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	f000 f83f 	bl	80099dc <_vfiprintf_r>
 800995e:	b002      	add	sp, #8
 8009960:	f85d eb04 	ldr.w	lr, [sp], #4
 8009964:	b003      	add	sp, #12
 8009966:	4770      	bx	lr
 8009968:	20000034 	.word	0x20000034

0800996c <abort>:
 800996c:	b508      	push	{r3, lr}
 800996e:	2006      	movs	r0, #6
 8009970:	f000 fa08 	bl	8009d84 <raise>
 8009974:	2001      	movs	r0, #1
 8009976:	f7f7 feb6 	bl	80016e6 <_exit>

0800997a <_malloc_usable_size_r>:
 800997a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800997e:	1f18      	subs	r0, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	bfbc      	itt	lt
 8009984:	580b      	ldrlt	r3, [r1, r0]
 8009986:	18c0      	addlt	r0, r0, r3
 8009988:	4770      	bx	lr

0800998a <__sfputc_r>:
 800998a:	6893      	ldr	r3, [r2, #8]
 800998c:	3b01      	subs	r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	b410      	push	{r4}
 8009992:	6093      	str	r3, [r2, #8]
 8009994:	da08      	bge.n	80099a8 <__sfputc_r+0x1e>
 8009996:	6994      	ldr	r4, [r2, #24]
 8009998:	42a3      	cmp	r3, r4
 800999a:	db01      	blt.n	80099a0 <__sfputc_r+0x16>
 800999c:	290a      	cmp	r1, #10
 800999e:	d103      	bne.n	80099a8 <__sfputc_r+0x1e>
 80099a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099a4:	f000 b932 	b.w	8009c0c <__swbuf_r>
 80099a8:	6813      	ldr	r3, [r2, #0]
 80099aa:	1c58      	adds	r0, r3, #1
 80099ac:	6010      	str	r0, [r2, #0]
 80099ae:	7019      	strb	r1, [r3, #0]
 80099b0:	4608      	mov	r0, r1
 80099b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <__sfputs_r>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	4606      	mov	r6, r0
 80099bc:	460f      	mov	r7, r1
 80099be:	4614      	mov	r4, r2
 80099c0:	18d5      	adds	r5, r2, r3
 80099c2:	42ac      	cmp	r4, r5
 80099c4:	d101      	bne.n	80099ca <__sfputs_r+0x12>
 80099c6:	2000      	movs	r0, #0
 80099c8:	e007      	b.n	80099da <__sfputs_r+0x22>
 80099ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ce:	463a      	mov	r2, r7
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7ff ffda 	bl	800998a <__sfputc_r>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	d1f3      	bne.n	80099c2 <__sfputs_r+0xa>
 80099da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099dc <_vfiprintf_r>:
 80099dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	460d      	mov	r5, r1
 80099e2:	b09d      	sub	sp, #116	@ 0x74
 80099e4:	4614      	mov	r4, r2
 80099e6:	4698      	mov	r8, r3
 80099e8:	4606      	mov	r6, r0
 80099ea:	b118      	cbz	r0, 80099f4 <_vfiprintf_r+0x18>
 80099ec:	6a03      	ldr	r3, [r0, #32]
 80099ee:	b90b      	cbnz	r3, 80099f4 <_vfiprintf_r+0x18>
 80099f0:	f7fc fdf8 	bl	80065e4 <__sinit>
 80099f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099f6:	07d9      	lsls	r1, r3, #31
 80099f8:	d405      	bmi.n	8009a06 <_vfiprintf_r+0x2a>
 80099fa:	89ab      	ldrh	r3, [r5, #12]
 80099fc:	059a      	lsls	r2, r3, #22
 80099fe:	d402      	bmi.n	8009a06 <_vfiprintf_r+0x2a>
 8009a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a02:	f7fc ff06 	bl	8006812 <__retarget_lock_acquire_recursive>
 8009a06:	89ab      	ldrh	r3, [r5, #12]
 8009a08:	071b      	lsls	r3, r3, #28
 8009a0a:	d501      	bpl.n	8009a10 <_vfiprintf_r+0x34>
 8009a0c:	692b      	ldr	r3, [r5, #16]
 8009a0e:	b99b      	cbnz	r3, 8009a38 <_vfiprintf_r+0x5c>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4630      	mov	r0, r6
 8009a14:	f000 f938 	bl	8009c88 <__swsetup_r>
 8009a18:	b170      	cbz	r0, 8009a38 <_vfiprintf_r+0x5c>
 8009a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a1c:	07dc      	lsls	r4, r3, #31
 8009a1e:	d504      	bpl.n	8009a2a <_vfiprintf_r+0x4e>
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295
 8009a24:	b01d      	add	sp, #116	@ 0x74
 8009a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	89ab      	ldrh	r3, [r5, #12]
 8009a2c:	0598      	lsls	r0, r3, #22
 8009a2e:	d4f7      	bmi.n	8009a20 <_vfiprintf_r+0x44>
 8009a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a32:	f7fc feef 	bl	8006814 <__retarget_lock_release_recursive>
 8009a36:	e7f3      	b.n	8009a20 <_vfiprintf_r+0x44>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3c:	2320      	movs	r3, #32
 8009a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a46:	2330      	movs	r3, #48	@ 0x30
 8009a48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009bf8 <_vfiprintf_r+0x21c>
 8009a4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a50:	f04f 0901 	mov.w	r9, #1
 8009a54:	4623      	mov	r3, r4
 8009a56:	469a      	mov	sl, r3
 8009a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a5c:	b10a      	cbz	r2, 8009a62 <_vfiprintf_r+0x86>
 8009a5e:	2a25      	cmp	r2, #37	@ 0x25
 8009a60:	d1f9      	bne.n	8009a56 <_vfiprintf_r+0x7a>
 8009a62:	ebba 0b04 	subs.w	fp, sl, r4
 8009a66:	d00b      	beq.n	8009a80 <_vfiprintf_r+0xa4>
 8009a68:	465b      	mov	r3, fp
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ffa2 	bl	80099b8 <__sfputs_r>
 8009a74:	3001      	adds	r0, #1
 8009a76:	f000 80a7 	beq.w	8009bc8 <_vfiprintf_r+0x1ec>
 8009a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a7c:	445a      	add	r2, fp
 8009a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a80:	f89a 3000 	ldrb.w	r3, [sl]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 809f 	beq.w	8009bc8 <_vfiprintf_r+0x1ec>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a94:	f10a 0a01 	add.w	sl, sl, #1
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	9307      	str	r3, [sp, #28]
 8009a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009aa2:	4654      	mov	r4, sl
 8009aa4:	2205      	movs	r2, #5
 8009aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aaa:	4853      	ldr	r0, [pc, #332]	@ (8009bf8 <_vfiprintf_r+0x21c>)
 8009aac:	f7f6 fbb0 	bl	8000210 <memchr>
 8009ab0:	9a04      	ldr	r2, [sp, #16]
 8009ab2:	b9d8      	cbnz	r0, 8009aec <_vfiprintf_r+0x110>
 8009ab4:	06d1      	lsls	r1, r2, #27
 8009ab6:	bf44      	itt	mi
 8009ab8:	2320      	movmi	r3, #32
 8009aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009abe:	0713      	lsls	r3, r2, #28
 8009ac0:	bf44      	itt	mi
 8009ac2:	232b      	movmi	r3, #43	@ 0x2b
 8009ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8009acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ace:	d015      	beq.n	8009afc <_vfiprintf_r+0x120>
 8009ad0:	9a07      	ldr	r2, [sp, #28]
 8009ad2:	4654      	mov	r4, sl
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	f04f 0c0a 	mov.w	ip, #10
 8009ada:	4621      	mov	r1, r4
 8009adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ae0:	3b30      	subs	r3, #48	@ 0x30
 8009ae2:	2b09      	cmp	r3, #9
 8009ae4:	d94b      	bls.n	8009b7e <_vfiprintf_r+0x1a2>
 8009ae6:	b1b0      	cbz	r0, 8009b16 <_vfiprintf_r+0x13a>
 8009ae8:	9207      	str	r2, [sp, #28]
 8009aea:	e014      	b.n	8009b16 <_vfiprintf_r+0x13a>
 8009aec:	eba0 0308 	sub.w	r3, r0, r8
 8009af0:	fa09 f303 	lsl.w	r3, r9, r3
 8009af4:	4313      	orrs	r3, r2
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	46a2      	mov	sl, r4
 8009afa:	e7d2      	b.n	8009aa2 <_vfiprintf_r+0xc6>
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	1d19      	adds	r1, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	9103      	str	r1, [sp, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bfbb      	ittet	lt
 8009b08:	425b      	neglt	r3, r3
 8009b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b0e:	9307      	strge	r3, [sp, #28]
 8009b10:	9307      	strlt	r3, [sp, #28]
 8009b12:	bfb8      	it	lt
 8009b14:	9204      	strlt	r2, [sp, #16]
 8009b16:	7823      	ldrb	r3, [r4, #0]
 8009b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b1a:	d10a      	bne.n	8009b32 <_vfiprintf_r+0x156>
 8009b1c:	7863      	ldrb	r3, [r4, #1]
 8009b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b20:	d132      	bne.n	8009b88 <_vfiprintf_r+0x1ac>
 8009b22:	9b03      	ldr	r3, [sp, #12]
 8009b24:	1d1a      	adds	r2, r3, #4
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	9203      	str	r2, [sp, #12]
 8009b2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b2e:	3402      	adds	r4, #2
 8009b30:	9305      	str	r3, [sp, #20]
 8009b32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c08 <_vfiprintf_r+0x22c>
 8009b36:	7821      	ldrb	r1, [r4, #0]
 8009b38:	2203      	movs	r2, #3
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	f7f6 fb68 	bl	8000210 <memchr>
 8009b40:	b138      	cbz	r0, 8009b52 <_vfiprintf_r+0x176>
 8009b42:	9b04      	ldr	r3, [sp, #16]
 8009b44:	eba0 000a 	sub.w	r0, r0, sl
 8009b48:	2240      	movs	r2, #64	@ 0x40
 8009b4a:	4082      	lsls	r2, r0
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	3401      	adds	r4, #1
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b56:	4829      	ldr	r0, [pc, #164]	@ (8009bfc <_vfiprintf_r+0x220>)
 8009b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b5c:	2206      	movs	r2, #6
 8009b5e:	f7f6 fb57 	bl	8000210 <memchr>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d03f      	beq.n	8009be6 <_vfiprintf_r+0x20a>
 8009b66:	4b26      	ldr	r3, [pc, #152]	@ (8009c00 <_vfiprintf_r+0x224>)
 8009b68:	bb1b      	cbnz	r3, 8009bb2 <_vfiprintf_r+0x1d6>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	3307      	adds	r3, #7
 8009b6e:	f023 0307 	bic.w	r3, r3, #7
 8009b72:	3308      	adds	r3, #8
 8009b74:	9303      	str	r3, [sp, #12]
 8009b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b78:	443b      	add	r3, r7
 8009b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b7c:	e76a      	b.n	8009a54 <_vfiprintf_r+0x78>
 8009b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b82:	460c      	mov	r4, r1
 8009b84:	2001      	movs	r0, #1
 8009b86:	e7a8      	b.n	8009ada <_vfiprintf_r+0xfe>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	3401      	adds	r4, #1
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	f04f 0c0a 	mov.w	ip, #10
 8009b94:	4620      	mov	r0, r4
 8009b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9a:	3a30      	subs	r2, #48	@ 0x30
 8009b9c:	2a09      	cmp	r2, #9
 8009b9e:	d903      	bls.n	8009ba8 <_vfiprintf_r+0x1cc>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0c6      	beq.n	8009b32 <_vfiprintf_r+0x156>
 8009ba4:	9105      	str	r1, [sp, #20]
 8009ba6:	e7c4      	b.n	8009b32 <_vfiprintf_r+0x156>
 8009ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bac:	4604      	mov	r4, r0
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e7f0      	b.n	8009b94 <_vfiprintf_r+0x1b8>
 8009bb2:	ab03      	add	r3, sp, #12
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	4b12      	ldr	r3, [pc, #72]	@ (8009c04 <_vfiprintf_r+0x228>)
 8009bba:	a904      	add	r1, sp, #16
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f7fb feb9 	bl	8005934 <_printf_float>
 8009bc2:	4607      	mov	r7, r0
 8009bc4:	1c78      	adds	r0, r7, #1
 8009bc6:	d1d6      	bne.n	8009b76 <_vfiprintf_r+0x19a>
 8009bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bca:	07d9      	lsls	r1, r3, #31
 8009bcc:	d405      	bmi.n	8009bda <_vfiprintf_r+0x1fe>
 8009bce:	89ab      	ldrh	r3, [r5, #12]
 8009bd0:	059a      	lsls	r2, r3, #22
 8009bd2:	d402      	bmi.n	8009bda <_vfiprintf_r+0x1fe>
 8009bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bd6:	f7fc fe1d 	bl	8006814 <__retarget_lock_release_recursive>
 8009bda:	89ab      	ldrh	r3, [r5, #12]
 8009bdc:	065b      	lsls	r3, r3, #25
 8009bde:	f53f af1f 	bmi.w	8009a20 <_vfiprintf_r+0x44>
 8009be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009be4:	e71e      	b.n	8009a24 <_vfiprintf_r+0x48>
 8009be6:	ab03      	add	r3, sp, #12
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	462a      	mov	r2, r5
 8009bec:	4b05      	ldr	r3, [pc, #20]	@ (8009c04 <_vfiprintf_r+0x228>)
 8009bee:	a904      	add	r1, sp, #16
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	f7fc f937 	bl	8005e64 <_printf_i>
 8009bf6:	e7e4      	b.n	8009bc2 <_vfiprintf_r+0x1e6>
 8009bf8:	0800a9f9 	.word	0x0800a9f9
 8009bfc:	0800aa03 	.word	0x0800aa03
 8009c00:	08005935 	.word	0x08005935
 8009c04:	080099b9 	.word	0x080099b9
 8009c08:	0800a9ff 	.word	0x0800a9ff

08009c0c <__swbuf_r>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	460e      	mov	r6, r1
 8009c10:	4614      	mov	r4, r2
 8009c12:	4605      	mov	r5, r0
 8009c14:	b118      	cbz	r0, 8009c1e <__swbuf_r+0x12>
 8009c16:	6a03      	ldr	r3, [r0, #32]
 8009c18:	b90b      	cbnz	r3, 8009c1e <__swbuf_r+0x12>
 8009c1a:	f7fc fce3 	bl	80065e4 <__sinit>
 8009c1e:	69a3      	ldr	r3, [r4, #24]
 8009c20:	60a3      	str	r3, [r4, #8]
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	071a      	lsls	r2, r3, #28
 8009c26:	d501      	bpl.n	8009c2c <__swbuf_r+0x20>
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	b943      	cbnz	r3, 8009c3e <__swbuf_r+0x32>
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 f82a 	bl	8009c88 <__swsetup_r>
 8009c34:	b118      	cbz	r0, 8009c3e <__swbuf_r+0x32>
 8009c36:	f04f 37ff 	mov.w	r7, #4294967295
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	6922      	ldr	r2, [r4, #16]
 8009c42:	1a98      	subs	r0, r3, r2
 8009c44:	6963      	ldr	r3, [r4, #20]
 8009c46:	b2f6      	uxtb	r6, r6
 8009c48:	4283      	cmp	r3, r0
 8009c4a:	4637      	mov	r7, r6
 8009c4c:	dc05      	bgt.n	8009c5a <__swbuf_r+0x4e>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f7ff fa47 	bl	80090e4 <_fflush_r>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d1ed      	bne.n	8009c36 <__swbuf_r+0x2a>
 8009c5a:	68a3      	ldr	r3, [r4, #8]
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	60a3      	str	r3, [r4, #8]
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	6022      	str	r2, [r4, #0]
 8009c66:	701e      	strb	r6, [r3, #0]
 8009c68:	6962      	ldr	r2, [r4, #20]
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d004      	beq.n	8009c7a <__swbuf_r+0x6e>
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	07db      	lsls	r3, r3, #31
 8009c74:	d5e1      	bpl.n	8009c3a <__swbuf_r+0x2e>
 8009c76:	2e0a      	cmp	r6, #10
 8009c78:	d1df      	bne.n	8009c3a <__swbuf_r+0x2e>
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f7ff fa31 	bl	80090e4 <_fflush_r>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d0d9      	beq.n	8009c3a <__swbuf_r+0x2e>
 8009c86:	e7d6      	b.n	8009c36 <__swbuf_r+0x2a>

08009c88 <__swsetup_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4b29      	ldr	r3, [pc, #164]	@ (8009d30 <__swsetup_r+0xa8>)
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	460c      	mov	r4, r1
 8009c92:	b118      	cbz	r0, 8009c9c <__swsetup_r+0x14>
 8009c94:	6a03      	ldr	r3, [r0, #32]
 8009c96:	b90b      	cbnz	r3, 8009c9c <__swsetup_r+0x14>
 8009c98:	f7fc fca4 	bl	80065e4 <__sinit>
 8009c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca0:	0719      	lsls	r1, r3, #28
 8009ca2:	d422      	bmi.n	8009cea <__swsetup_r+0x62>
 8009ca4:	06da      	lsls	r2, r3, #27
 8009ca6:	d407      	bmi.n	8009cb8 <__swsetup_r+0x30>
 8009ca8:	2209      	movs	r2, #9
 8009caa:	602a      	str	r2, [r5, #0]
 8009cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb6:	e033      	b.n	8009d20 <__swsetup_r+0x98>
 8009cb8:	0758      	lsls	r0, r3, #29
 8009cba:	d512      	bpl.n	8009ce2 <__swsetup_r+0x5a>
 8009cbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cbe:	b141      	cbz	r1, 8009cd2 <__swsetup_r+0x4a>
 8009cc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cc4:	4299      	cmp	r1, r3
 8009cc6:	d002      	beq.n	8009cce <__swsetup_r+0x46>
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f7fd fbf9 	bl	80074c0 <_free_r>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	6063      	str	r3, [r4, #4]
 8009cde:	6923      	ldr	r3, [r4, #16]
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	f043 0308 	orr.w	r3, r3, #8
 8009ce8:	81a3      	strh	r3, [r4, #12]
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	b94b      	cbnz	r3, 8009d02 <__swsetup_r+0x7a>
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf8:	d003      	beq.n	8009d02 <__swsetup_r+0x7a>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f000 f883 	bl	8009e08 <__smakebuf_r>
 8009d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d06:	f013 0201 	ands.w	r2, r3, #1
 8009d0a:	d00a      	beq.n	8009d22 <__swsetup_r+0x9a>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	60a2      	str	r2, [r4, #8]
 8009d10:	6962      	ldr	r2, [r4, #20]
 8009d12:	4252      	negs	r2, r2
 8009d14:	61a2      	str	r2, [r4, #24]
 8009d16:	6922      	ldr	r2, [r4, #16]
 8009d18:	b942      	cbnz	r2, 8009d2c <__swsetup_r+0xa4>
 8009d1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d1e:	d1c5      	bne.n	8009cac <__swsetup_r+0x24>
 8009d20:	bd38      	pop	{r3, r4, r5, pc}
 8009d22:	0799      	lsls	r1, r3, #30
 8009d24:	bf58      	it	pl
 8009d26:	6962      	ldrpl	r2, [r4, #20]
 8009d28:	60a2      	str	r2, [r4, #8]
 8009d2a:	e7f4      	b.n	8009d16 <__swsetup_r+0x8e>
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	e7f7      	b.n	8009d20 <__swsetup_r+0x98>
 8009d30:	20000034 	.word	0x20000034

08009d34 <_raise_r>:
 8009d34:	291f      	cmp	r1, #31
 8009d36:	b538      	push	{r3, r4, r5, lr}
 8009d38:	4605      	mov	r5, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	d904      	bls.n	8009d48 <_raise_r+0x14>
 8009d3e:	2316      	movs	r3, #22
 8009d40:	6003      	str	r3, [r0, #0]
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d4a:	b112      	cbz	r2, 8009d52 <_raise_r+0x1e>
 8009d4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d50:	b94b      	cbnz	r3, 8009d66 <_raise_r+0x32>
 8009d52:	4628      	mov	r0, r5
 8009d54:	f000 f830 	bl	8009db8 <_getpid_r>
 8009d58:	4622      	mov	r2, r4
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d62:	f000 b817 	b.w	8009d94 <_kill_r>
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d00a      	beq.n	8009d80 <_raise_r+0x4c>
 8009d6a:	1c59      	adds	r1, r3, #1
 8009d6c:	d103      	bne.n	8009d76 <_raise_r+0x42>
 8009d6e:	2316      	movs	r3, #22
 8009d70:	6003      	str	r3, [r0, #0]
 8009d72:	2001      	movs	r0, #1
 8009d74:	e7e7      	b.n	8009d46 <_raise_r+0x12>
 8009d76:	2100      	movs	r1, #0
 8009d78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	4798      	blx	r3
 8009d80:	2000      	movs	r0, #0
 8009d82:	e7e0      	b.n	8009d46 <_raise_r+0x12>

08009d84 <raise>:
 8009d84:	4b02      	ldr	r3, [pc, #8]	@ (8009d90 <raise+0xc>)
 8009d86:	4601      	mov	r1, r0
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	f7ff bfd3 	b.w	8009d34 <_raise_r>
 8009d8e:	bf00      	nop
 8009d90:	20000034 	.word	0x20000034

08009d94 <_kill_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4d07      	ldr	r5, [pc, #28]	@ (8009db4 <_kill_r+0x20>)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	4611      	mov	r1, r2
 8009da0:	602b      	str	r3, [r5, #0]
 8009da2:	f7f7 fc90 	bl	80016c6 <_kill>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d102      	bne.n	8009db0 <_kill_r+0x1c>
 8009daa:	682b      	ldr	r3, [r5, #0]
 8009dac:	b103      	cbz	r3, 8009db0 <_kill_r+0x1c>
 8009dae:	6023      	str	r3, [r4, #0]
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
 8009db2:	bf00      	nop
 8009db4:	20000834 	.word	0x20000834

08009db8 <_getpid_r>:
 8009db8:	f7f7 bc7d 	b.w	80016b6 <_getpid>

08009dbc <__swhatbuf_r>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	b096      	sub	sp, #88	@ 0x58
 8009dc8:	4615      	mov	r5, r2
 8009dca:	461e      	mov	r6, r3
 8009dcc:	da0d      	bge.n	8009dea <__swhatbuf_r+0x2e>
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009dd4:	f04f 0100 	mov.w	r1, #0
 8009dd8:	bf14      	ite	ne
 8009dda:	2340      	movne	r3, #64	@ 0x40
 8009ddc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009de0:	2000      	movs	r0, #0
 8009de2:	6031      	str	r1, [r6, #0]
 8009de4:	602b      	str	r3, [r5, #0]
 8009de6:	b016      	add	sp, #88	@ 0x58
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
 8009dea:	466a      	mov	r2, sp
 8009dec:	f000 f848 	bl	8009e80 <_fstat_r>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	dbec      	blt.n	8009dce <__swhatbuf_r+0x12>
 8009df4:	9901      	ldr	r1, [sp, #4]
 8009df6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dfa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009dfe:	4259      	negs	r1, r3
 8009e00:	4159      	adcs	r1, r3
 8009e02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e06:	e7eb      	b.n	8009de0 <__swhatbuf_r+0x24>

08009e08 <__smakebuf_r>:
 8009e08:	898b      	ldrh	r3, [r1, #12]
 8009e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e0c:	079d      	lsls	r5, r3, #30
 8009e0e:	4606      	mov	r6, r0
 8009e10:	460c      	mov	r4, r1
 8009e12:	d507      	bpl.n	8009e24 <__smakebuf_r+0x1c>
 8009e14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	6123      	str	r3, [r4, #16]
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	6163      	str	r3, [r4, #20]
 8009e20:	b003      	add	sp, #12
 8009e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e24:	ab01      	add	r3, sp, #4
 8009e26:	466a      	mov	r2, sp
 8009e28:	f7ff ffc8 	bl	8009dbc <__swhatbuf_r>
 8009e2c:	9f00      	ldr	r7, [sp, #0]
 8009e2e:	4605      	mov	r5, r0
 8009e30:	4639      	mov	r1, r7
 8009e32:	4630      	mov	r0, r6
 8009e34:	f7fd fbb8 	bl	80075a8 <_malloc_r>
 8009e38:	b948      	cbnz	r0, 8009e4e <__smakebuf_r+0x46>
 8009e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e3e:	059a      	lsls	r2, r3, #22
 8009e40:	d4ee      	bmi.n	8009e20 <__smakebuf_r+0x18>
 8009e42:	f023 0303 	bic.w	r3, r3, #3
 8009e46:	f043 0302 	orr.w	r3, r3, #2
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	e7e2      	b.n	8009e14 <__smakebuf_r+0xc>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	6020      	str	r0, [r4, #0]
 8009e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	9b01      	ldr	r3, [sp, #4]
 8009e5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e5e:	b15b      	cbz	r3, 8009e78 <__smakebuf_r+0x70>
 8009e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e64:	4630      	mov	r0, r6
 8009e66:	f000 f81d 	bl	8009ea4 <_isatty_r>
 8009e6a:	b128      	cbz	r0, 8009e78 <__smakebuf_r+0x70>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	f043 0301 	orr.w	r3, r3, #1
 8009e76:	81a3      	strh	r3, [r4, #12]
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	431d      	orrs	r5, r3
 8009e7c:	81a5      	strh	r5, [r4, #12]
 8009e7e:	e7cf      	b.n	8009e20 <__smakebuf_r+0x18>

08009e80 <_fstat_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4d07      	ldr	r5, [pc, #28]	@ (8009ea0 <_fstat_r+0x20>)
 8009e84:	2300      	movs	r3, #0
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	602b      	str	r3, [r5, #0]
 8009e8e:	f7f7 fc7a 	bl	8001786 <_fstat>
 8009e92:	1c43      	adds	r3, r0, #1
 8009e94:	d102      	bne.n	8009e9c <_fstat_r+0x1c>
 8009e96:	682b      	ldr	r3, [r5, #0]
 8009e98:	b103      	cbz	r3, 8009e9c <_fstat_r+0x1c>
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	bd38      	pop	{r3, r4, r5, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20000834 	.word	0x20000834

08009ea4 <_isatty_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d06      	ldr	r5, [pc, #24]	@ (8009ec0 <_isatty_r+0x1c>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	602b      	str	r3, [r5, #0]
 8009eb0:	f7f7 fc79 	bl	80017a6 <_isatty>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_isatty_r+0x1a>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_isatty_r+0x1a>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	20000834 	.word	0x20000834

08009ec4 <_init>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr

08009ed0 <_fini>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	bf00      	nop
 8009ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed6:	bc08      	pop	{r3}
 8009ed8:	469e      	mov	lr, r3
 8009eda:	4770      	bx	lr
